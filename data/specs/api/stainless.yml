# yaml-language-server: $schema=https://app.stainlessapi.com/config.schema.json

organization:
  name: knock
  docs: https://docs.knock.app
  contact: support@knock.app
  security_contact: security@knock.app
  github_org: knocklabs
  upload_spec: true
resources:
  $shared:
    models:
      condition: "#/components/schemas/Condition"
  recipients:
    models:
      recipient: "#/components/schemas/Recipient"
      recipient_request: "#/components/schemas/RecipientRequest"
    subresources:
      subscriptions:
        models:
          subscription: "#/components/schemas/Subscription"
      preferences:
        models:
          preference_set: "#/components/schemas/PreferenceSet"
          preference_set_request: "#/components/schemas/PreferenceSetRequest"
          inline_preference_set_request: "#/components/schemas/InlinePreferenceSetRequest"
          preference_set_channel_types: "#/components/schemas/PreferenceSetChannelTypes"
          preference_set_channel_type_setting: "#/components/schemas/PreferenceSetChannelTypeSetting"
      channel_data:
        models:
          channel_data: "#/components/schemas/ChannelData"
          channel_data_request: "#/components/schemas/ChannelDataRequest"
          push_channel_data: "#/components/schemas/PushChannelData"
          slack_channel_data: "#/components/schemas/SlackChannelData"
          ms_teams_channel_data: "#/components/schemas/MsTeamsChannelData"
          discord_channel_data: "#/components/schemas/DiscordChannelData"
          one_signal_channel_data: "#/components/schemas/OneSignalChannelData"
          inline_channel_data_request: "#/components/schemas/InlineChannelDataRequest"
  users:
    models:
      user: "#/components/schemas/User"
      identify_user_request: "#/components/schemas/IdentifyUserRequest"
      inline_identify_user_request: "#/components/schemas/InlineIdentifyUserRequest"
    methods:
      list: get /v1/users
      delete: delete /v1/users/{user_id}
      get: get /v1/users/{user_id}
      update: put /v1/users/{user_id}
      merge: post /v1/users/{user_id}/merge
      list_subscriptions: get /v1/users/{user_id}/subscriptions
      list_schedules: get /v1/users/{user_id}/schedules
      list_messages: get /v1/users/{user_id}/messages
      list_preferences: get /v1/users/{user_id}/preferences
      get_preferences:
        type: http
        endpoint: get /v1/users/{user_id}/preferences/{preference_set_id}
        positional_params: [user_id, preference_set_id]
      set_preferences:
        type: http
        endpoint: put /v1/users/{user_id}/preferences/{preference_set_id}
        positional_params: [user_id, preference_set_id]
      get_channel_data:
        type: http
        endpoint: get /v1/users/{user_id}/channel_data/{channel_id}
        positional_params: [user_id, channel_id]
      set_channel_data:
        type: http
        endpoint: put /v1/users/{user_id}/channel_data/{channel_id}
        positional_params: [user_id, channel_id]
      unset_channel_data:
        type: http
        endpoint: delete /v1/users/{user_id}/channel_data/{channel_id}
        positional_params: [user_id, channel_id]
    subresources:
      feeds:
        methods:
          list_items:
            type: http
            endpoint: get /v1/users/{user_id}/feeds/{channel_id}
            positional_params: [user_id, channel_id]
          get_settings:
            type: http
            endpoint: get /v1/users/{user_id}/feeds/{channel_id}/settings
            positional_params: [user_id, channel_id]
      bulk:
        methods:
          delete: post /v1/users/bulk/delete
          identify: post /v1/users/bulk/identify
          set_preferences: post /v1/users/bulk/preferences
  objects:
    models:
      object: "#/components/schemas/Object"
      inline_object_request: "#/components/schemas/InlineIdentifyObjectRequest"
    methods:
      delete:
        type: http
        endpoint: delete /v1/objects/{collection}/{object_id}
        positional_params: [collection, object_id]
      get:
        type: http
        endpoint: get /v1/objects/{collection}/{object_id}
        positional_params: [collection, object_id]
      set:
        type: http
        endpoint: put /v1/objects/{collection}/{object_id}
        positional_params: [collection, object_id]
      list: get /v1/objects/{collection}
      get_preferences:
        type: http
        endpoint: get /v1/objects/{collection}/{object_id}/preferences/{preference_set_id}
        positional_params: [collection, object_id, preference_set_id]
      set_preferences:
        type: http
        endpoint: put /v1/objects/{collection}/{object_id}/preferences/{preference_set_id}
        positional_params: [collection, object_id, preference_set_id]
      list_schedules:
        type: http
        endpoint: get /v1/objects/{collection}/{object_id}/schedules
        positional_params: [collection, object_id]
      list_messages:
        type: http
        endpoint: get /v1/objects/{collection}/{object_id}/messages
        positional_params: [collection, object_id]
      get_channel_data:
        type: http
        endpoint: get /v1/objects/{collection}/{object_id}/channel_data/{channel_id}
        positional_params: [collection, object_id, channel_id]
      set_channel_data:
        type: http
        endpoint: put /v1/objects/{collection}/{object_id}/channel_data/{channel_id}
        positional_params: [collection, object_id, channel_id]
      unset_channel_data:
        type: http
        endpoint: delete /v1/objects/{collection}/{object_id}/channel_data/{channel_id}
        positional_params: [collection, object_id, channel_id]
      list_subscriptions:
        type: http
        endpoint: get /v1/objects/{collection}/{object_id}/subscriptions
        positional_params: [collection, object_id]
      add_subscriptions:
        type: http
        endpoint: post /v1/objects/{collection}/{object_id}/subscriptions
        positional_params: [collection, object_id]
      delete_subscriptions:
        type: http
        endpoint: delete /v1/objects/{collection}/{object_id}/subscriptions
        positional_params: [collection, object_id]
    subresources:
      bulk:
        methods:
          delete: post /v1/objects/{collection}/bulk/delete
          set: post /v1/objects/{collection}/bulk/set
          add_subscriptions: post /v1/objects/{collection}/bulk/subscriptions/add
  tenants:
    models:
      tenant: "#/components/schemas/Tenant"
      tenant_request: "#/components/schemas/TenantRequest"
      inline_tenant_request: "#/components/schemas/InlineTenantRequest"
    methods:
      delete: delete /v1/tenants/{tenant_id}
      get: get /v1/tenants/{tenant_id}
      set: put /v1/tenants/{tenant_id}
      list: get /v1/tenants
    subresources:
      bulk:
        methods:
          delete: post /v1/tenants/bulk/delete
          set: post /v1/tenants/bulk/set
  bulk_operations:
    models:
      bulk_operation: "#/components/schemas/BulkOperation"
    methods:
      get: get /v1/bulk_operations/{id}
  messages:
    models:
      message: "#/components/schemas/Message"
      activity: "#/components/schemas/Activity"
      message_delivery_log: "#/components/schemas/MessageDeliveryLog"
      message_event: "#/components/schemas/MessageEvent"
    methods:
      get: get /v1/messages/{message_id}
      list_delivery_logs: get /v1/messages/{message_id}/delivery_logs
      list: get /v1/messages
      mark_as_seen: put /v1/messages/{message_id}/seen
      mark_as_unseen: delete /v1/messages/{message_id}/unseen
      mark_as_read: put /v1/messages/{message_id}/read
      mark_as_unread: delete /v1/messages/{message_id}/unread
      list_events: get /v1/messages/{message_id}/events
      get_content: get /v1/messages/{message_id}/content
      list_activities: get /v1/messages/{message_id}/activities
      mark_as_interacted: put /v1/messages/{message_id}/interacted
      archive: put /v1/messages/{message_id}/archived
      unarchive: delete /v1/messages/{message_id}/unarchived
    subresources:
      batch:
        methods:
          unarchive: post /v1/messages/batch/unarchived
          mark_as_seen: post /v1/messages/batch/seen
          mark_as_unseen: post /v1/messages/batch/unseen
          get_content: get /v1/messages/batch/content
          mark_as_unread: post /v1/messages/batch/unread
          archive: post /v1/messages/batch/archived
          mark_as_read: post /v1/messages/batch/read
          mark_as_interacted: post /v1/messages/batch/interacted
  providers:
    subresources:
      slack:
        methods:
          list_channels: get /v1/providers/slack/{channel_id}/channels
          check_auth: get /v1/providers/slack/{channel_id}/auth_check
          revoke_access: put /v1/providers/slack/{channel_id}/revoke_access
      ms_teams:
        methods:
          check_auth: get /v1/providers/ms-teams/{channel_id}/auth_check
          list_channels:
            endpoint: get /v1/providers/ms-teams/{channel_id}/channels
            paginated: false
          list_teams: get /v1/providers/ms-teams/{channel_id}/teams
          revoke_access: put /v1/providers/ms-teams/{channel_id}/revoke_access
  workflows:
    methods:
      trigger: post /v1/workflows/{key}/trigger
      cancel: post /v1/workflows/{key}/cancel
  schedules:
    models:
      schedule: "#/components/schemas/Schedule"
      schedule_repeat_rule: "#/components/schemas/ScheduleRepeatRule"
    methods:
      delete: delete /v1/schedules
      list: get /v1/schedules
      create: post /v1/schedules
      update: put /v1/schedules
  channels:
    subresources:
      bulk:
        methods:
          # delete_messages: post /v1/channels/{channel_id}/messages/bulk/delete
          update_message_status:
            type: http
            endpoint: post /v1/channels/{channel_id}/messages/bulk/{action}
            positional_params: [channel_id, action]
  audiences:
    models:
      audience_member: "#/components/schemas/AudienceMember"
    methods:
      add_members: post /v1/audiences/{key}/members
      remove_members: delete /v1/audiences/{key}/members
      list_members: get /v1/audiences/{key}/members

targets:
  typescript:
    package_name: "@knocklabs/node"
    production_repo: null
    publish:
      npm: false
    skip: false
  go:
    package_name: knock
    production_repo: null
    skip: false
  python:
    package_name: knockapi
    production_repo: null
    publish:
      pypi: false
    skip: false
  java:
    reverse_domain: app.knock.api
    production_repo: null
    publish:
      maven: false
    skip: false
  ruby:
    gem_name: knockapi
    production_repo: null
    publish:
      rubygems: false
settings:
  license: Apache-2.0
client_settings:
  opts:
    api_key:
      type: string
      read_env: KNOCK_API_KEY
      auth: { security_scheme: BearerAuth }
environments:
  production: https://api.knock.app
openapi:
  code_samples:
    stainless: true
query_settings:
  nested_format: brackets
  array_format: brackets
pagination:
  - name: entries_cursor
    type: cursor
    request:
      after:
        type: string
        x-stainless-pagination-property:
          purpose: next_cursor_param
      before:
        type: string
        x-stainless-pagination-property:
          purpose: previous_cursor_param
      page_size:
        type: integer
    response:
      entries:
        type: array
        items:
          type: object
      page_info:
        type: object
        properties:
          after:
            type: string
            x-stainless-pagination-property:
              purpose: next_cursor_field
  - name: items_cursor
    type: cursor
    request:
      after:
        type: string
        x-stainless-pagination-property:
          purpose: next_cursor_param
      before:
        type: string
        x-stainless-pagination-property:
          purpose: previous_cursor_param
      page_size:
        type: integer
    response:
      items:
        type: array
        items:
          type: object
      page_info:
        type: object
        properties:
          after:
            type: string
            x-stainless-pagination-property:
              purpose: next_cursor_field
  - name: slack_channels_cursor
    type: cursor
    request:
      "query_options.cursor":
        type: string
        x-stainless-pagination-property:
          purpose: next_cursor_param
      "query_options.limit":
        type: integer
    response:
      next_cursor:
        type: string
        x-stainless-pagination-property:
          purpose: next_cursor_field
      slack_channels:
        type: array
        items:
          type: object
readme:
  example_requests:
    default:
      type: request
      endpoint: get /v1/users/{user_id}
      params:
        user_id: dnedry
    headline:
      type: request
      endpoint: post /v1/workflows/{key}/trigger
      params:
        key: dinosaurs-loose
        recipients: ["dnedry"]
        data:
          dinosaur: triceratops
    pagination:
      type: request
      endpoint: get /v1/users
      params: {}
