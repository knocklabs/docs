components:
  responses: {}
  schemas:
    ListUsersResponse:
      description: A paginated list of users.
      example:
        entries:
          - __typename: User
            created_at: null
            email: jane@ingen.net
            id: jane
            name: Jane Doe
            updated_at: '2024-05-22T12:00:00Z'
        page_info:
          __typename: PageInfo
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: The list of users
          items:
            $ref: '#/components/schemas/User'
          type: array
        page_info:
          $ref: '#/components/schemas/PageInfo'
      title: ListUsersResponse
      type: object
    ChannelData:
      description: Channel data for various channel types
      example:
        __typename: ChannelData
        channel_id: 123e4567-e89b-12d3-a456-426614174000
        data:
          tokens:
            - push_token_1
      properties:
        __typename:
          example: ChannelData
          type: string
        channel_id:
          format: uuid
          type: string
        data:
          oneOf:
            - $ref: '#/components/schemas/PushChannelData'
            - $ref: '#/components/schemas/SlackChannelData'
            - $ref: '#/components/schemas/MsTeamsChannelData'
            - $ref: '#/components/schemas/DiscordChannelData'
            - $ref: '#/components/schemas/OneSignalChannelData'
          type: object
      required:
        - __typename
        - channel_id
        - data
      title: ChannelData
      type: object
    AddAudienceMembersRequest:
      description: A request to add members to an audience
      example:
        members:
          - tenant: null
            user:
              email: jane@ingen.net
              id: user_1
              name: Jane Doe
              timezone: America/New_York
      properties:
        members:
          items:
            $ref: '#/components/schemas/AudienceMemberRequest'
          nullable: false
          type: array
      required:
        - members
      title: AddAudienceMembersRequest
      type: object
    TriggerWorkflowResponse:
      description: The response from triggering a workflow
      example:
        workflow_run_id: 123e4567-e89b-12d3-a456-426614174000
      properties:
        workflow_run_id:
          description: >-
            The ID of the workflow trigger. This value allows you to track individual workflow runs associated
            with this trigger request.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
      required:
        - workflow_run_id
      title: TriggerWorkflowResponse
      type: object
    Subscription:
      description: A subscription object
      example:
        __typename: Subscription
        inserted_at: '2021-01-01T00:00:00Z'
        object:
          __typename: Object
          collection: projects
          created_at: null
          id: project_1
          name: My first project
          updated_at: '2024-05-22T12:00:00Z'
        recipient:
          __typename: User
          avatar: null
          created_at: null
          email: jane@ingen.net
          id: jane
          name: Jane Doe
          phone_number: null
          timezone: null
          updated_at: '2024-05-22T12:00:00Z'
        updated_at: '2021-01-01T00:00:00Z'
      properties:
        __typename:
          example: Subscription
          type: string
        inserted_at:
          example: '2021-01-01T00:00:00Z'
          format: date-time
          type: string
        object:
          $ref: '#/components/schemas/Object'
        properties:
          additionalProperties: true
          description: The custom properties associated with the subscription
          nullable: true
          type: object
        recipient:
          $ref: '#/components/schemas/Recipient'
        updated_at:
          example: '2021-01-01T00:00:00Z'
          format: date-time
          type: string
      required:
        - __typename
        - recipient
        - object
        - inserted_at
        - updated_at
      title: Subscription
      type: object
    ListUserPreferenceSetsResponse:
      description: A list of preference sets for the user
      example:
        - __typename: PreferenceSet
          categories:
            marketing: false
            transactional:
              channel_types:
                email: false
          channel_types:
            email: true
            push: false
            sms:
              conditions:
                - argument: US
                  operator: equal_to
                  variable: recipient.country_code
          id: default
          workflows: null
      items:
        $ref: '#/components/schemas/PreferenceSet'
      title: ListUserPreferenceSetsResponse
      type: array
    PreferenceSetWorkflowCategorySettingObject:
      description: The settings object for a workflow or category, where you can specify channel types or conditions.
      example:
        channel_types:
          email: false
        conditions: null
      properties:
        channel_types:
          anyOf:
            - $ref: '#/components/schemas/PreferenceSetChannelTypes'
            - nullable: true
        conditions:
          items:
            $ref: '#/components/schemas/Condition'
          nullable: true
          type: array
      title: PreferenceSetWorkflowCategorySettingObject
      type: object
    MsTeamsTokenConnection:
      description: Microsoft Teams token connection
      example:
        ms_teams_channel_id: 123e4567-e89b-12d3-a456-426614174000
        ms_teams_team_id: 123e4567-e89b-12d3-a456-426614174000
        ms_teams_tenant_id: null
        ms_teams_user_id: null
      properties:
        ms_teams_channel_id:
          description: The Microsoft Teams channel ID
          format: uuid
          nullable: true
          type: string
        ms_teams_team_id:
          description: The Microsoft Teams team ID
          format: uuid
          nullable: true
          type: string
        ms_teams_tenant_id:
          description: The Microsoft Teams tenant ID
          format: uuid
          nullable: true
          type: string
        ms_teams_user_id:
          description: The Microsoft Teams user ID
          format: uuid
          nullable: true
          type: string
      title: MsTeamsTokenConnection
      type: object
    TriggerWorkflowRequest:
      description: A set of parameters to trigger a workflow with.
      example:
        actor: null
        cancellation_key: null
        data:
          dinosaur_names:
            - Tyrannosaurus
            - Velociraptor
            - Stegosaurus
          is_alert: true
          park_id: prk_1
          severity: 1
          welcome_message: Welcome, to Jurassic Park!
        recipients:
          - jhammond
        tenant: acme_corp
      properties:
        actor:
          anyOf:
            - $ref: '#/components/schemas/RecipientRequest'
            - nullable: true
          description: The actor associated with the workflow trigger.
        cancellation_key:
          description: >-
            An optional key that is used in the workflow cancellation endpoint to target a cancellation of any
            workflow runs associated with this trigger.
          nullable: true
          type: string
        data:
          additionalProperties: true
          description: >-
            An optional map of data to be used in the workflow. This data will be available to the workflow as
            a map in the `data` field.
          nullable: true
          type: object
        recipients:
          description: The recipients to trigger the workflow for. Cannot exceed 1000 recipients in a single trigger.
          items:
            $ref: '#/components/schemas/RecipientRequest'
          type: array
        tenant:
          anyOf:
            - $ref: '#/components/schemas/InlineTenantRequest'
            - nullable: true
          description: >-
            The tenant to trigger the workflow for. Triggering with a tenant will use any tenant-level
            overrides associated with the tenant object, and all messages produced from workflow runs will be
            tagged with the tenant.
      title: TriggerWorkflowRequest
      type: object
    BulkIdentifyUsersRequest:
      description: A request to identify a list of users
      example:
        users:
          - email: jane@ingen.net
            id: user_1
            name: Jane Doe
            timezone: America/New_York
      properties:
        users:
          items:
            $ref: '#/components/schemas/InlineIdentifyUserRequest'
          type: array
      required:
        - users
      title: BulkIdentifyUsersRequest
      type: object
    InlinePreferenceSetRequest:
      additionalProperties:
        $ref: '#/components/schemas/PreferenceSetRequest'
      description: Inline set preferences for a recipient, where the key is the preference set name
      example:
        default:
          categories:
            transactional:
              channel_types:
                email: false
          channel_types: null
          workflows:
            dinosaurs-loose:
              channel_types:
                email: true
      title: InlinePreferenceSetRequest
      type: object
    MessageContents:
      description: The contents of a message
      example:
        __typename: MessageContent
        data:
          __typename: MessageSmsContent
          body: Hello, world!
          to: user_123
        inserted_at: '2021-01-01T00:00:00Z'
        message_id: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
      properties:
        __typename:
          example: MessageContent
          nullable: false
          type: string
        data:
          nullable: false
          oneOf:
            - $ref: '#/components/schemas/MessageEmailContent'
            - $ref: '#/components/schemas/MessageSmsContent'
            - $ref: '#/components/schemas/MessagePushContent'
            - $ref: '#/components/schemas/MessageChatContent'
            - $ref: '#/components/schemas/MessageInAppFeedContent'
          type: object
        inserted_at:
          example: '2021-01-01T00:00:00Z'
          format: date-time
          nullable: false
          type: string
        message_id:
          example: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
          nullable: false
          type: string
      required:
        - __typename
        - message_id
        - data
        - inserted_at
      title: MessageContents
      type: object
    ListAudienceMembersResponse:
      description: A response containing a list of audience members
      example:
        entries:
          - __typename: AudienceMember
            added_at: '2021-01-01T00:00:00Z'
            tenant: acme_corp
            user:
              __typename: User
              created_at: null
              email: jane@ingen.net
              id: jane
              name: Jane Doe
              updated_at: '2024-05-22T12:00:00Z'
            user_id: user_123
        page_info:
          __typename: PageInfo
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          items:
            $ref: '#/components/schemas/AudienceMember'
          type: array
        page_info:
          $ref: '#/components/schemas/PageInfo'
      required:
        - entries
        - page_info
      title: ListAudienceMembersResponse
      type: object
    InlineChannelDataRequest:
      additionalProperties:
        $ref: '#/components/schemas/ChannelDataRequest'
      description: Allows inline setting channel data for a recipient
      example:
        97c5837d-c65c-4d54-aa39-080eeb81c69d:
          data:
            tokens:
              - push_token_xxx
      title: InlineChannelDataRequest
      type: object
    MessageEmailContent:
      description: The contents of an email message
      example:
        __typename: MessageEmailContent
        bcc: null
        cc: null
        from: noreply@example.com
        html_body: <p>Hello, world!</p>
        reply_to: null
        subject_line: Hello, world!
        text_body: Hello, world!
        to: user_123@example.com
      properties:
        __typename:
          example: MessageEmailContent
          nullable: false
          type: string
        bcc:
          nullable: true
          type: string
        cc:
          nullable: true
          type: string
        from:
          nullable: false
          type: string
        html_body:
          nullable: false
          type: string
        reply_to:
          nullable: true
          type: string
        subject_line:
          nullable: false
          type: string
        text_body:
          nullable: false
          type: string
        to:
          nullable: false
          type: string
      required:
        - __typename
        - html_body
        - text_body
        - subject_line
        - from
        - to
      title: MessageEmailContent
      type: object
    InlineTenantRequest:
      description: An inline tenant request
      example:
        id: tenant_1
        name: Acme Corp, Inc.
      oneOf:
        - description: A tenant identifier
          type: string
        - $ref: '#/components/schemas/TenantRequest'
      title: InlineTenantRequest
    PreferenceSetChannelTypes:
      description: Channel type preferences
      example:
        email: true
        sms:
          conditions:
            - argument: US
              operator: equal_to
              variable: recipient.country_code
      properties:
        chat:
          oneOf:
            - type: boolean
            - $ref: '#/components/schemas/PreferenceSetChannelTypeSetting'
        email:
          oneOf:
            - type: boolean
            - $ref: '#/components/schemas/PreferenceSetChannelTypeSetting'
        http:
          oneOf:
            - type: boolean
            - $ref: '#/components/schemas/PreferenceSetChannelTypeSetting'
        in_app_feed:
          oneOf:
            - type: boolean
            - $ref: '#/components/schemas/PreferenceSetChannelTypeSetting'
        push:
          oneOf:
            - type: boolean
            - $ref: '#/components/schemas/PreferenceSetChannelTypeSetting'
        sms:
          oneOf:
            - type: boolean
            - $ref: '#/components/schemas/PreferenceSetChannelTypeSetting'
      title: PreferenceSetChannelTypes
      type: object
    MessageEvent:
      description: A single event that occurred for a message
      example:
        __typename: MessageEvent
        data: null
        id: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
        inserted_at: '2021-01-01T00:00:00Z'
        recipient: user_123
        type: message.sent
      properties:
        __typename:
          example: MessageEvent
          type: string
        data:
          additionalProperties: true
          description: The data associated with the event. Only present for some event types
          nullable: true
          type: object
        id:
          example: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
          type: string
        inserted_at:
          example: '2021-01-01T00:00:00Z'
          format: date-time
          type: string
        recipient:
          $ref: '#/components/schemas/RecipientReference'
        type:
          enum:
            - message.queued
            - message.sent
            - message.delivered
            - message.undelivered
            - message.bounced
            - message.read
            - message.unread
            - message.link_clicked
            - message.interacted
            - message.seen
            - message.unseen
            - message.archived
            - message.unarchived
          example: message.sent
          type: string
      required:
        - __typename
        - id
        - inserted_at
        - recipient
        - type
      title: MessageEvent
      type: object
    BulkUpsertSubscriptionsRequest:
      description: A request to upsert subscriptions for a set of objects in a single collection
      example:
        subscriptions:
          - id: project-1
            properties: null
            recipients:
              - id: user_1
      properties:
        subscriptions:
          items:
            properties:
              id:
                type: string
              properties:
                additionalProperties: true
                nullable: true
                type: object
              recipients:
                items:
                  $ref: '#/components/schemas/RecipientRequest'
                type: array
            required:
              - id
              - recipients
            type: object
          required: true
          type: array
      required:
        - subscriptions
      title: BulkUpsertSubscriptionsRequest
      type: object
    ListSchedulesResponse:
      description: A paginated list of schedules in a collection.
      example:
        entries:
          - __typename: Schedule
            actor: null
            data: null
            id: 123e4567-e89b-12d3-a456-426614174000
            inserted_at: '2021-01-01T00:00:00Z'
            last_occurrence_at: null
            next_occurrence_at: null
            recipient:
              __typename: User
              avatar: null
              created_at: null
              email: jane@ingen.net
              id: jane
              name: Jane Doe
              phone_number: null
              timezone: null
              updated_at: '2024-05-22T12:00:00Z'
            repeats:
              - __typename: ScheduleRepeat
                day_of_month: null
                days:
                  - mon
                  - tue
                  - wed
                  - thu
                  - fri
                  - sat
                  - sun
                frequency: daily
                hours: null
                interval: 1
                minutes: null
            tenant: null
            updated_at: '2021-01-01T00:00:00Z'
            workflow: workflow_123
        page_info:
          __typename: PageInfo
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: The list of schedules
          items:
            $ref: '#/components/schemas/Schedule'
          type: array
        page_info:
          $ref: '#/components/schemas/PageInfo'
      required:
        - entries
        - page_info
      title: ListSchedulesResponse
      type: object
    MessageChatContent:
      description: The contents of a chat message
      example:
        __typename: MessageChatContent
        connection:
          access_token: null
          channel_id: null
          user_id: null
        metadata: null
        template:
          blocks:
            - content: content
              name: name
              type: text
          json_content: null
          summary: This is a summary
      properties:
        __typename:
          example: MessageChatContent
          nullable: false
          type: string
        connection:
          additionalProperties: true
          description: The channel data connection from the recipient to the underlying provider
          nullable: false
          type: object
        metadata:
          additionalProperties: true
          nullable: true
          type: object
        template:
          nullable: false
          properties:
            blocks:
              description: The structured blocks of the message
              items:
                $ref: '#/components/schemas/MessageChatContentBlock'
              nullable: true
              type: array
            json_content:
              additionalProperties: true
              description: The JSON content of the message
              nullable: true
              type: object
            summary:
              nullable: true
              type: string
          type: object
      required:
        - __typename
        - template
        - connection
      title: MessageChatContent
      type: object
    BatchGetMessageContentsResponse:
      description: A list of message contents
      example:
        - __typename: MessageContent
          data:
            __typename: MessageSmsContent
            body: Hello, world!
            to: user_123
          inserted_at: '2021-01-01T00:00:00Z'
          message_id: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
      items:
        $ref: '#/components/schemas/MessageContents'
      title: BatchGetMessageContentsResponse
      type: array
    DiscordChannelData:
      description: Discord channel data
      example:
        connections:
          - channel_id: '123456789012345678'
      properties:
        connections:
          items:
            oneOf:
              - $ref: '#/components/schemas/DiscordChannelConnection'
              - $ref: '#/components/schemas/DiscordIncomingWebhookConnection'
            type: object
          nullable: false
          type: array
      required:
        - connections
      title: DiscordChannelData
      type: object
    BulkDeleteUsersRequest:
      description: A request to delete users in bulk
      example:
        user_ids:
          - user_1
          - user_2
      properties:
        user_ids:
          items:
            type: string
          type: array
      required:
        - user_ids
      title: BulkDeleteUsersRequest
      type: object
    ListSubscriptionsResponse:
      description: A paginated list of subscriptions for an object.
      example:
        entries:
          - __typename: Subscription
            inserted_at: '2021-01-01T00:00:00Z'
            object:
              __typename: Object
              collection: projects
              created_at: null
              id: project_1
              name: My first project
              updated_at: '2024-05-22T12:00:00Z'
            recipient:
              __typename: User
              avatar: null
              created_at: null
              email: jane@ingen.net
              id: jane
              name: Jane Doe
              phone_number: null
              timezone: null
              updated_at: '2024-05-22T12:00:00Z'
            updated_at: '2021-01-01T00:00:00Z'
        page_info:
          __typename: PageInfo
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: The list of subscriptions
          items:
            $ref: '#/components/schemas/Subscription'
          type: array
        page_info:
          $ref: '#/components/schemas/PageInfo'
      required:
        - entries
        - page_info
      title: ListSubscriptionsResponse
      type: object
    MsTeamsAuthCheckResponse:
      description: The response from a Microsoft Teams auth check request
      example:
        connection:
          ok: true
      properties:
        connection:
          properties:
            ok:
              nullable: false
              type: boolean
            reason:
              nullable: true
              type: string
          required:
            - ok
          type: object
      required:
        - connection
      title: MsTeamsAuthCheckResponse
      type: object
    SlackAuthCheckResponse:
      description: The response from a Slack auth check request
      example:
        connection:
          ok: true
      properties:
        connection:
          properties:
            ok:
              nullable: false
              type: boolean
            reason:
              nullable: true
              type: string
          required:
            - ok
          type: object
      required:
        - connection
      title: SlackAuthCheckResponse
      type: object
    RecipientReference:
      description: A reference to a recipient, either a user identifier (string) or an object reference (id, collection).
      example: user_123
      oneOf:
        - description: A user identifier
          example: user_123
          nullable: false
          type: string
        - description: An object reference to a recipient
          example:
            collection: projects
            id: project_123
          properties:
            collection:
              description: The collection the object belongs to
              example: projects
              nullable: false
              type: string
            id:
              description: An object identifier
              example: project_123
              nullable: false
              type: string
          required:
            - id
            - collection
          title: ObjectReference
          type: object
      title: RecipientReference
    BatchMessagesInteractedRequest:
      description: A request to mark a list of messages as interacted with
      example:
        message_ids:
          - 1jNaXzB2RZX3LY8wVQnfCKyPnv7
        metadata:
          key: value
      properties:
        message_ids:
          description: The message IDs to update
          items:
            type: string
          type: array
        metadata:
          additionalProperties: true
          description: Metadata about the interaction
          example:
            key: value
          nullable: true
          type: object
      required:
        - message_ids
      title: BatchMessagesInteractedRequest
      type: object
    SetObjectRequest:
      additionalProperties: true
      description: A set of parameters to set an object with. Does not include the object id or collection.
      example:
        description: My product description
        name: My product
        price: 100
      properties:
        channel_data:
          oneOf:
            - $ref: '#/components/schemas/InlineChannelDataRequest'
            - nullable: true
        preferences:
          oneOf:
            - $ref: '#/components/schemas/InlinePreferenceSetRequest'
            - nullable: true
      title: SetObjectRequest
      type: object
    PreferenceSeRequestCategories:
      additionalProperties:
        $ref: '#/components/schemas/PreferenceSetWorkflowCategorySetting'
      description: >-
        A setting for a preference set, where the key in the object is the category, and the values are the
        preference settings for that category.
      example:
        marketing:
          channel_types:
            email: false
      title: PreferenceSeRequestCategories
      type: object
    UserInAppFeedSettingsResponse:
      description: The response for the user's feed settings
      example:
        features:
          branding_required: true
      properties:
        features:
          properties:
            branding_required:
              type: boolean
          required:
            - branding_required
          type: object
      required:
        - features
      title: UserInAppFeedSettingsResponse
      type: object
    ListObjectPreferenceSetsResponse:
      description: A list of preference sets for the object
      example:
        - __typename: PreferenceSet
          categories:
            marketing: false
            transactional:
              channel_types:
                email: false
          channel_types:
            email: true
            push: false
            sms:
              conditions:
                - argument: US
                  operator: equal_to
                  variable: recipient.country_code
          id: default
          workflows: null
      items:
        $ref: '#/components/schemas/PreferenceSet'
      title: ListObjectPreferenceSetsResponse
      type: array
    Tenant:
      additionalProperties: true
      description: A tenant entity
      example:
        __typename: Tenant
        id: tenant_123
        name: ACME Corp, Inc.
      properties:
        __typename:
          example: Tenant
          type: string
        id:
          nullable: false
          type: string
      required:
        - __typename
        - id
      title: Tenant
      type: object
    BulkSetUserPreferencesRequest:
      description: A request to set preferences for a set of users in bulk
      example:
        preferences:
          categories:
            marketing: false
            transactional:
              channel_types:
                email: false
          channel_types:
            email: true
          workflows:
            dinosaurs-loose:
              channel_types:
                email: false
        user_ids:
          - user_1
          - user_2
      properties:
        preferences:
          $ref: '#/components/schemas/PreferenceSetRequest'
        user_ids:
          items:
            type: string
          type: array
      required:
        - preferences
        - user_ids
      title: BulkSetUserPreferencesRequest
      type: object
    MessageInteractedRequest:
      description: A request to mark a message as interacted with
      example:
        metadata:
          key: value
      properties:
        metadata:
          additionalProperties: true
          description: Metadata about the interaction
          example:
            key: value
          type: object
      title: MessageInteractedRequest
      type: object
    InlineIdentifyObjectRequest:
      additionalProperties: true
      description: Inline identifies a custom object belonging to a collection
      example:
        collection: projects
        id: project_1
        name: My project
      properties:
        channel_data:
          oneOf:
            - $ref: '#/components/schemas/InlineChannelDataRequest'
            - nullable: true
        collection:
          type: string
        created_at:
          format: date-time
          nullable: true
          type: string
        id:
          type: string
        preferences:
          oneOf:
            - $ref: '#/components/schemas/InlinePreferenceSetRequest'
            - nullable: true
      required:
        - id
        - collection
      title: InlineIdentifyObjectRequest
      type: object
    MessageInAppFeedButtonSetBlock:
      description: A set of buttons in a message in an app feed
      example:
        buttons:
          - action: action_1
            label: Action 1
            name: primary
        name: actions
        type: button_set
      properties:
        buttons:
          items:
            description: A button in a set of buttons
            nullable: false
            properties:
              action:
                nullable: false
                type: string
              label:
                nullable: false
                type: string
              name:
                nullable: false
                type: string
            required:
              - action
              - label
              - name
            type: object
          nullable: false
          type: array
        name:
          nullable: false
          type: string
        type:
          enum:
            - button_set
          nullable: false
          type: string
      required:
        - type
        - name
        - buttons
      title: MessageInAppFeedButtonSetBlock
      type: object
    PushChannelData:
      description: Channel data for push providers
      example:
        tokens:
          - push_token_1
      properties:
        tokens:
          example:
            - push_token_1
            - push_token_2
          items:
            nullable: false
            required: true
            type: string
          nullable: false
          type: array
      required:
        - tokens
      title: PushChannelData
      type: object
    MessagePushContent:
      description: The contents of a push message
      example:
        __typename: MessagePushContent
        body: Hello, world!
        data: null
        title: Hello, world!
        token: xoxo-1234567890
      properties:
        __typename:
          example: MessagePushContent
          nullable: false
          type: string
        body:
          nullable: false
          type: string
        data:
          additionalProperties: true
          nullable: true
          type: object
        title:
          nullable: false
          type: string
        token:
          nullable: false
          type: string
      required:
        - __typename
        - title
        - body
        - token
      title: MessagePushContent
      type: object
    PreferenceSet:
      description: A preference set object.
      example:
        __typename: PreferenceSet
        categories:
          marketing: false
          transactional:
            channel_types:
              email: false
        channel_types:
          email: true
          push: false
          sms:
            conditions:
              - argument: US
                operator: equal_to
                variable: recipient.country_code
        id: default
        workflows: null
      properties:
        __typename:
          example: PreferenceSet
          type: string
        categories:
          anyOf:
            - additionalProperties:
                $ref: '#/components/schemas/PreferenceSetWorkflowCategorySetting'
              description: A map of categories and their settings
              example:
                marketing:
                  channel_types:
                    email: false
              title: PreferenceSetCategories
              type: object
            - nullable: true
        channel_types:
          anyOf:
            - $ref: '#/components/schemas/PreferenceSetChannelTypes'
            - nullable: true
        id:
          example: default
          type: string
        workflows:
          anyOf:
            - additionalProperties:
                $ref: '#/components/schemas/PreferenceSetWorkflowCategorySetting'
              description: A map of workflows and their settings
              example:
                dinosaurs-loose:
                  channel_types:
                    email: false
              title: PreferenceSetWorkflows
              type: object
            - nullable: true
      required:
        - __typename
        - id
      title: PreferenceSet
      type: object
    ScheduleRepeatRule:
      description: A schedule repeat rule
      example:
        __typename: ScheduleRepeat
        day_of_month: null
        days:
          - mon
          - tue
          - wed
          - thu
          - fri
          - sat
          - sun
        frequency: daily
        hours: null
        interval: 1
        minutes: null
      properties:
        __typename:
          example: ScheduleRepeat
          type: string
        day_of_month:
          example: 1
          nullable: true
          type: integer
        days:
          example:
            - mon
            - tue
            - wed
            - thu
            - fri
          items:
            enum:
              - mon
              - tue
              - wed
              - thu
              - fri
              - sat
              - sun
            type: string
          nullable: true
          type: array
        frequency:
          enum:
            - daily
            - weekly
            - monthly
            - hourly
          example: daily
          type: string
        hours:
          example: 0
          nullable: true
          type: integer
        interval:
          default: 1
          example: 1
          type: integer
        minutes:
          example: 0
          nullable: true
          type: integer
      required:
        - __typename
        - frequency
      title: ScheduleRepeatRule
      type: object
    CreateSchedulesRequest:
      description: A request to create schedules
      example:
        data:
          key: value
        ending_at: null
        recipients:
          - user_123
        repeats:
          - __typename: ScheduleRepeat
            day_of_month: null
            days:
              - mon
              - tue
              - wed
              - thu
              - fri
              - sat
              - sun
            frequency: daily
            hours: null
            interval: 1
            minutes: null
        scheduled_at: null
        tenant: acme_corp
        workflow: comment-created
      properties:
        data:
          additionalProperties: true
          nullable: true
          type: object
        ending_at:
          format: date-time
          nullable: true
          type: string
        recipients:
          items:
            $ref: '#/components/schemas/RecipientReference'
          type: array
        repeats:
          items:
            $ref: '#/components/schemas/ScheduleRepeatRule'
          type: array
        scheduled_at:
          format: date-time
          nullable: true
          type: string
        tenant:
          anyOf:
            - $ref: '#/components/schemas/InlineTenantRequest'
            - nullable: true
        workflow:
          nullable: false
          type: string
      required:
        - workflow
        - repeats
        - recipients
      title: CreateSchedulesRequest
      type: object
    MessageDeliveryLog:
      description: A message delivery log
      example:
        __typename: MessageDeliveryLog
        environment_id: 123e4567-e89b-12d3-a456-426614174000
        id: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
        inserted_at: '2021-01-01T00:00:00Z'
        request:
          body:
            html_content: <html></html>
          headers:
            Content-Type: application/json
          host: localhost
          method: GET
          path: /
          query: '?foo=bar'
        response:
          body:
            success: true
          headers:
            Content-Type: application/json
          status: 200
        service_name: Postmark
      properties:
        __typename:
          example: MessageDeliveryLog
          nullable: false
          type: string
        environment_id:
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          nullable: false
          type: string
        id:
          example: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
          nullable: false
          type: string
        inserted_at:
          example: '2021-01-01T00:00:00Z'
          nullable: false
          type: string
        request:
          $ref: '#/components/schemas/MessageDeliveryLogRequest'
        response:
          $ref: '#/components/schemas/MessageDeliveryLogResponse'
        service_name:
          example: Postmark
          nullable: false
          type: string
      required:
        - __typename
        - id
        - environment_id
        - request
        - response
        - service_name
        - inserted_at
      title: MessageDeliveryLog
      type: object
    ListObjectsResponse:
      description: A paginated list of objects in a collection.
      example:
        entries:
          - __typename: Object
            collection: projects
            created_at: null
            id: project_1
            name: My first project
            updated_at: '2024-05-22T12:00:00Z'
        page_info:
          __typename: PageInfo
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: The list of objects
          items:
            $ref: '#/components/schemas/Object'
          type: array
        page_info:
          $ref: '#/components/schemas/PageInfo'
      required:
        - entries
        - page_info
      title: ListObjectsResponse
      type: object
    ObjectReference:
      description: An object reference to a recipient
      example:
        collection: projects
        id: project_123
      properties:
        collection:
          description: The collection the object belongs to
          example: projects
          nullable: false
          type: string
        id:
          description: An object identifier
          example: project_123
          nullable: false
          type: string
      required:
        - id
        - collection
      title: ObjectReference
      type: object
    PreferenceSetRequestWorkflows:
      additionalProperties:
        $ref: '#/components/schemas/PreferenceSetWorkflowCategorySetting'
      description: >-
        A setting for a preference set, where the key in the object is the workflow key, and the values are
        the preference settings for that workflow.
      example:
        dinosaurs-loose:
          channel_types:
            email: false
      title: PreferenceSetRequestWorkflows
      type: object
    PreferenceSetWorkflowCategorySetting:
      description: Workflow or category preferences within a preference set
      example:
        channel_types:
          email: false
      oneOf:
        - example: false
          type: boolean
        - description: The settings object for a workflow or category, where you can specify channel types or conditions.
          example:
            channel_types:
              email: false
            conditions: null
          properties:
            channel_types:
              anyOf:
                - $ref: '#/components/schemas/PreferenceSetChannelTypes'
                - nullable: true
            conditions:
              items:
                $ref: '#/components/schemas/Condition'
              nullable: true
              type: array
          title: PreferenceSetWorkflowCategorySettingObject
          type: object
      title: PreferenceSetWorkflowCategorySetting
      type: object
    InAppFeedItem:
      description: An in-app feed message in a user's feed
      example:
        __typename: FeedItem
        activities:
          - __typename: Activity
            actor: null
            data:
              foo: bar
            id: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
            inserted_at: '2024-01-01T00:00:00Z'
            recipient:
              __typename: User
              avatar: null
              created_at: null
              email: jane@ingen.net
              id: jane
              name: Jane Doe
              phone_number: null
              timezone: null
              updated_at: '2024-05-22T12:00:00Z'
            updated_at: '2024-01-01T00:00:00Z'
        actors:
          - __typename: User
            avatar: null
            created_at: null
            email: jane@ingen.net
            id: jane
            name: Jane Doe
            phone_number: null
            timezone: null
            updated_at: '2024-05-22T12:00:00Z'
        blocks:
          - content: This is a message in an app feed
            name: body
            rendered: <p>This is a message in an app feed</p>
            type: markdown
        data:
          foo: bar
        id: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
        inserted_at: '2021-01-01T00:00:00Z'
        source:
          __typename: NotificationSource
          categories:
            - collaboration
          key: my_source
          version_id: 123e4567-e89b-12d3-a456-426614174000
        tenant: acme_corp
        total_activities: 10
        total_actors: 5
        updated_at: '2021-01-01T00:00:00Z'
      properties:
        __typename:
          example: FeedItem
          type: string
        activities:
          items:
            $ref: '#/components/schemas/Activity'
          type: array
        actors:
          items:
            $ref: '#/components/schemas/Recipient'
          type: array
        archived_at:
          nullable: true
          type: string
        blocks:
          items:
            nullable: false
            oneOf:
              - $ref: '#/components/schemas/MessageInAppFeedContentBlock'
              - $ref: '#/components/schemas/MessageInAppFeedButtonSetBlock'
            type: object
          type: array
        clicked_at:
          nullable: true
          type: string
        data:
          additionalProperties: true
          nullable: true
          type: object
        id:
          example: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
          type: string
        inserted_at:
          nullable: false
          type: string
        interacted_at:
          nullable: true
          type: string
        link_clicked_at:
          nullable: true
          type: string
        read_at:
          nullable: true
          type: string
        seen_at:
          nullable: true
          type: string
        source:
          nullable: false
          properties:
            __typename:
              example: NotificationSource
              type: string
            categories:
              items:
                nullable: false
                type: string
              type: array
            key:
              nullable: false
              type: string
            version_id:
              format: uuid
              nullable: false
              type: string
          required:
            - __typename
            - key
            - version_id
            - categories
          type: object
        tenant:
          nullable: true
          type: string
        total_activities:
          example: 10
          type: integer
        total_actors:
          example: 5
          type: integer
        updated_at:
          nullable: false
          type: string
      required:
        - __typename
        - id
        - inserted_at
        - updated_at
        - actors
        - activities
        - blocks
        - source
        - tenant
        - total_activities
        - total_actors
        - data
      title: InAppFeedItem
      type: object
    MessageDeliveryLogResponse:
      description: A message delivery log response
      example:
        body:
          success: true
        headers:
          Content-Type: application/json
        status: 200
      properties:
        body:
          oneOf:
            - type: string
            - additionalProperties: true
              type: object
          type: object
        headers:
          additionalProperties: true
          nullable: true
          type: object
        status:
          example: 200
          nullable: false
          type: integer
      title: MessageDeliveryLogResponse
      type: object
    ListMessageDeliveryLogsResponse:
      description: A paginated list of message delivery logs
      example:
        entries:
          - __typename: MessageDeliveryLog
            environment_id: 123e4567-e89b-12d3-a456-426614174000
            id: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
            inserted_at: '2021-01-01T00:00:00Z'
            request:
              body:
                html_content: <html></html>
              headers:
                Content-Type: application/json
              host: localhost
              method: GET
              path: /
              query: '?foo=bar'
            response:
              body:
                success: true
              headers:
                Content-Type: application/json
              status: 200
            service_name: Postmark
        page_info:
          __typename: PageInfo
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          items:
            $ref: '#/components/schemas/MessageDeliveryLog'
          type: array
        page_info:
          $ref: '#/components/schemas/PageInfo'
      required:
        - entries
        - page_info
      title: ListMessageDeliveryLogsResponse
      type: object
    ListTenantsResponse:
      description: A paginated list of tenants.
      example:
        entries:
          - __typename: Tenant
            id: tenant_123
            name: ACME Corp, Inc.
        page_info:
          __typename: PageInfo
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: The list of tenants
          items:
            $ref: '#/components/schemas/Tenant'
          type: array
        page_info:
          $ref: '#/components/schemas/PageInfo'
      required:
        - entries
        - page_info
      title: ListTenantsResponse
      type: object
    ListActivitiesResponse:
      description: A paginated list of activities
      example:
        items:
          - __typename: Activity
            actor: null
            data:
              foo: bar
            id: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
            inserted_at: '2024-01-01T00:00:00Z'
            recipient:
              __typename: User
              avatar: null
              created_at: null
              email: jane@ingen.net
              id: jane
              name: Jane Doe
              phone_number: null
              timezone: null
              updated_at: '2024-05-22T12:00:00Z'
            updated_at: '2024-01-01T00:00:00Z'
        page_info:
          __typename: PageInfo
          after: null
          before: null
          page_size: 25
      properties:
        items:
          items:
            $ref: '#/components/schemas/Activity'
          type: array
        page_info:
          $ref: '#/components/schemas/PageInfo'
      required:
        - items
        - page_info
      title: ListActivitiesResponse
      type: object
    SlackChannelDataTokenObject:
      description: A token that's used to store the access token for a Slack workspace.
      example:
        access_token: xoxb-1234567890
      nullable: true
      properties:
        access_token:
          example: xoxb-1234567890
          nullable: true
          type: string
      required:
        - access_token
      title: SlackChannelDataTokenObject
      type: object
    Recipient:
      description: A recipient, which is either a user or an object
      discriminator: __typename
      example:
        __typename: User
        avatar: null
        created_at: null
        email: jane@ingen.net
        id: jane
        name: Jane Doe
        phone_number: null
        timezone: null
        updated_at: '2024-05-22T12:00:00Z'
      oneOf:
        - $ref: '#/components/schemas/User'
        - $ref: '#/components/schemas/Object'
      title: Recipient
      type: object
    TenantRequest:
      additionalProperties: true
      description: A tenant to be set in the system
      example:
        id: tenant_123
        name: ACME Corp, Inc.
        settings:
          branding:
            icon_url: https://example.com/icon.png
            logo_url: https://example.com/logo.png
            primary_color: '#000000'
            primary_color_contrast: '#FFFFFF'
      properties:
        channel_data:
          oneOf:
            - nullable: true
            - $ref: '#/components/schemas/InlineChannelDataRequest'
        id:
          type: string
        preferences:
          oneOf:
            - nullable: true
            - $ref: '#/components/schemas/InlinePreferenceSetRequest'
        settings:
          properties:
            branding:
              properties:
                icon_url:
                  nullable: true
                  type: string
                logo_url:
                  nullable: true
                  type: string
                primary_color:
                  nullable: true
                  type: string
                primary_color_contrast:
                  nullable: true
                  type: string
              type: object
            preference_set:
              oneOf:
                - nullable: true
                - $ref: '#/components/schemas/PreferenceSetRequest'
          type: object
      required:
        - id
      title: TenantRequest
      type: object
    PageInfo:
      description: The information about a paginated result
      example:
        __typename: PageInfo
        after: null
        before: null
        page_size: 25
      properties:
        __typename:
          example: PageInfo
          type: string
        after:
          nullable: true
          type: string
        before:
          nullable: true
          type: string
        page_size:
          type: integer
      required:
        - __typename
        - page_size
      title: PageInfo
      type: object
    UserInAppFeedResponse:
      description: The response for the user's feed
      example:
        entries:
          - __typename: FeedItem
            activities:
              - __typename: Activity
                actor: null
                data:
                  foo: bar
                id: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
                inserted_at: '2024-01-01T00:00:00Z'
                recipient:
                  __typename: User
                  avatar: null
                  created_at: null
                  email: jane@ingen.net
                  id: jane
                  name: Jane Doe
                  phone_number: null
                  timezone: null
                  updated_at: '2024-05-22T12:00:00Z'
                updated_at: '2024-01-01T00:00:00Z'
            actors:
              - __typename: User
                avatar: null
                created_at: null
                email: jane@ingen.net
                id: jane
                name: Jane Doe
                phone_number: null
                timezone: null
                updated_at: '2024-05-22T12:00:00Z'
            blocks:
              - content: This is a message in an app feed
                name: body
                rendered: <p>This is a message in an app feed</p>
                type: markdown
            data:
              foo: bar
            id: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
            inserted_at: '2021-01-01T00:00:00Z'
            source:
              __typename: NotificationSource
              categories:
                - collaboration
              key: my_source
              version_id: 123e4567-e89b-12d3-a456-426614174000
            tenant: acme_corp
            total_activities: 10
            total_actors: 5
            updated_at: '2021-01-01T00:00:00Z'
        meta:
          __typename: FeedMetadata
          total_count: 100
          unread_count: 10
          unseen_count: 5
        page_info:
          has_next_page: true
          has_previous_page: false
          total_count: 100
        vars:
          foo: bar
      properties:
        entries:
          items:
            $ref: '#/components/schemas/InAppFeedItem'
          nullable: false
          type: array
        meta:
          example:
            __typename: FeedMetadata
            total_count: 100
            unread_count: 10
            unseen_count: 5
          properties:
            __typename:
              example: FeedMetadata
              type: string
            total_count:
              example: 100
              type: integer
            unread_count:
              example: 10
              type: integer
            unseen_count:
              example: 5
              type: integer
          required:
            - __typename
            - total_count
            - unread_count
            - unseen_count
          type: object
        page_info:
          properties:
            has_next_page:
              type: boolean
            has_previous_page:
              type: boolean
            total_count:
              type: integer
          required:
            - has_next_page
            - has_previous_page
            - total_count
          type: object
        vars:
          additionalProperties: true
          type: object
      required:
        - entries
        - page_info
        - vars
        - meta
      title: UserInAppFeedResponse
      type: object
    RecipientRequest:
      description: >-
        Specifies a recipient in a request. This can either be a user identifier (string), an inline user
        request (object), or an inline object request, which is determined by the presence of a `collection`
        property.
      example:
        id: user_1
      oneOf:
        - description: A user identifier
          type: string
        - $ref: '#/components/schemas/InlineIdentifyUserRequest'
        - $ref: '#/components/schemas/InlineIdentifyObjectRequest'
      title: RecipientRequest
    SlackTokenConnection:
      description: A Slack connection, which either includes a channel_id or a user_id
      example:
        access_token: xoxb-1234567890
        channel_id: C01234567890
        user_id: U01234567890
      properties:
        access_token:
          example: xoxb-1234567890
          nullable: true
          type: string
        channel_id:
          example: C01234567890
          nullable: true
          type: string
        user_id:
          example: U01234567890
          nullable: true
          type: string
      title: SlackTokenConnection
      type: object
    IdentifyUserRequest:
      additionalProperties: true
      description: >-
        A set of parameters to identify a user with. Does not include the user ID, as that's specified
        elsewhere in the request. You can supply any additional properties you'd like to upsert against the
        user.
      example:
        email: jane@ingen.net
        name: Jane Doe
        timezone: America/New_York
      properties:
        channel_data:
          description: A set of channel data for the user. This is a map of channel IDs to channel data.
          oneOf:
            - nullable: true
            - $ref: '#/components/schemas/InlineChannelDataRequest'
        created_at:
          format: date-time
          nullable: true
          type: string
        preferences:
          description: A set of preferences for the user. This is a map of preference set names to preference set values.
          oneOf:
            - nullable: true
            - $ref: '#/components/schemas/InlinePreferenceSetRequest'
      title: IdentifyUserRequest
      type: object
    ChannelsForMsTeamsProviderResponse:
      description: The response from a channels for Microsoft Teams provider request
      example:
        ms_teams_channels:
          - displayName: General
            id: channel-id-1
      properties:
        ms_teams_channels:
          items:
            properties:
              createdDateTime:
                nullable: false
                type: string
              description:
                nullable: true
                type: string
              displayName:
                nullable: false
                type: string
              id:
                nullable: false
                type: string
              isArchived:
                nullable: false
                type: boolean
              membershipType:
                nullable: false
                type: string
            required:
              - id
              - displayName
            type: object
          type: array
      required:
        - ms_teams_channels
      title: ChannelsForMsTeamsProviderResponse
      type: object
    BulkSetObjectsRequest:
      description: A request to set objects in bulk
      example:
        objects:
          - collection: projects
            id: project_1
            name: My project
      properties:
        objects:
          items:
            $ref: '#/components/schemas/InlineIdentifyObjectRequest'
          type: array
      required:
        - objects
      title: BulkSetObjectsRequest
      type: object
    DeleteSchedulesRequest:
      description: A request to delete schedules
      example:
        schedule_ids:
          - 123e4567-e89b-12d3-a456-426614174000
      properties:
        schedule_ids:
          items:
            type: string
          required: true
          type: array
      required:
        - schedule_ids
      title: DeleteSchedulesRequest
      type: object
    Object:
      additionalProperties: true
      description: A custom-object entity which belongs to a collection.
      example:
        __typename: Object
        collection: projects
        created_at: null
        id: project_1
        name: My first project
        updated_at: '2024-05-22T12:00:00Z'
      properties:
        __typename:
          example: Object
          type: string
        collection:
          type: string
        created_at:
          format: date-time
          nullable: true
          type: string
        id:
          type: string
        updated_at:
          format: date-time
          type: string
      required:
        - __typename
        - id
        - collection
        - updated_at
      title: Object
      type: object
    MessageInAppFeedContentBlock:
      description: A content (text or markdown) block in a message in an app feed
      example:
        content: This is a message in an app feed
        name: body
        rendered: <p>This is a message in an app feed</p>
        type: markdown
      properties:
        content:
          nullable: false
          type: string
        name:
          nullable: false
          type: string
        rendered:
          nullable: false
          type: string
        type:
          enum:
            - markdown
            - text
          nullable: false
          type: string
      required:
        - type
        - name
        - rendered
        - content
      title: MessageInAppFeedContentBlock
      type: object
    ListMessagesResponse:
      description: A paginated list of messages.
      example:
        entries:
          - actors:
              - user_123
            archived_at: null
            channel_id: 123e4567-e89b-12d3-a456-426614174000
            clicked_at: null
            data:
              foo: bar
            engagement_statuses:
              - read
              - seen
            id: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
            inserted_at: '2021-01-01T00:00:00Z'
            interacted_at: null
            link_clicked_at: null
            metadata:
              external_id: 123e4567-e89b-12d3-a456-426614174000
            read_at: null
            recipient: user_123
            scheduled_at: null
            seen_at: null
            source:
              __typename: NotificationSource
              categories:
                - collaboration
              key: comment-created
              version_id: 123e4567-e89b-12d3-a456-426614174000
            status: sent
            tenant: tenant_123
            updated_at: '2021-01-01T00:00:00Z'
            workflow: comment-created
        page_info:
          __typename: PageInfo
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: The list of messages
          items:
            $ref: '#/components/schemas/Message'
          type: array
        page_info:
          $ref: '#/components/schemas/PageInfo'
      required:
        - entries
        - page_info
      title: ListMessagesResponse
      type: object
    MergeUserRequest:
      description: A set of parameters to merge one user into another
      example:
        from_user_id: user_1
      properties:
        from_user_id:
          description: The user ID to merge from
          type: string
      required:
        - from_user_id
      title: MergeUserRequest
      type: object
    DiscordIncomingWebhookConnection:
      description: Discord incoming webhook connection
      example:
        incoming_webhook:
          url: https://example.com/webhook
      properties:
        incoming_webhook:
          description: The incoming webhook
          properties:
            url:
              description: The URL of the incoming webhook
              example: https://example.com/webhook
              type: string
          required:
            - url
          type: object
      required:
        - incoming_webhook
      title: DiscordIncomingWebhookConnection
      type: object
    User:
      additionalProperties: true
      description: A user object
      example:
        __typename: User
        created_at: null
        email: jane@ingen.net
        id: jane
        name: Jane Doe
        updated_at: '2024-05-22T12:00:00Z'
      properties:
        __typename:
          example: User
          type: string
        avatar:
          nullable: true
          type: string
        created_at:
          format: date-time
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        id:
          type: string
        name:
          nullable: true
          type: string
        phone_number:
          nullable: true
          type: string
        timezone:
          nullable: true
          type: string
        updated_at:
          format: date-time
          type: string
      required:
        - __typename
        - id
        - updated_at
      title: User
      type: object
    UpdateSchedulesRequest:
      description: A request to update schedules
      example:
        actor: null
        data:
          key: value
        ending_at: null
        repeats:
          - __typename: ScheduleRepeat
            day_of_month: null
            days:
              - mon
              - tue
              - wed
              - thu
              - fri
              - sat
              - sun
            frequency: daily
            hours: null
            interval: 1
            minutes: null
        schedule_ids:
          - 123e4567-e89b-12d3-a456-426614174000
        scheduled_at: null
        tenant: acme_corp
      properties:
        actor:
          oneOf:
            - $ref: '#/components/schemas/RecipientRequest'
            - nullable: true
        data:
          additionalProperties: true
          nullable: true
          type: object
        ending_at:
          format: date-time
          nullable: true
          type: string
        repeats:
          items:
            $ref: '#/components/schemas/ScheduleRepeatRule'
          type: array
        schedule_ids:
          items:
            format: uuid
            type: string
          type: array
        scheduled_at:
          format: date-time
          nullable: true
          type: string
        tenant:
          anyOf:
            - $ref: '#/components/schemas/InlineTenantRequest'
            - nullable: true
      required:
        - schedule_ids
      title: UpdateSchedulesRequest
      type: object
    AudienceMember:
      description: A user belonging to an audience
      example:
        __typename: AudienceMember
        added_at: '2021-01-01T00:00:00Z'
        tenant: acme_corp
        user:
          __typename: User
          created_at: null
          email: jane@ingen.net
          id: jane
          name: Jane Doe
          updated_at: '2024-05-22T12:00:00Z'
        user_id: user_123
      properties:
        __typename:
          example: AudienceMember
          type: string
        added_at:
          example: '2021-01-01T00:00:00Z'
          format: date-time
          type: string
        tenant:
          example: acme_corp
          nullable: true
          type: string
        user:
          $ref: '#/components/schemas/User'
        user_id:
          example: user_123
          type: string
      required:
        - __typename
        - added_at
        - user_id
        - user
      title: AudienceMember
      type: object
    MessageSmsContent:
      description: The contents of an SMS message
      example:
        __typename: MessageSmsContent
        body: Hello, world!
        to: '+1234567890'
      properties:
        __typename:
          example: MessageSmsContent
          nullable: false
          type: string
        body:
          nullable: false
          type: string
        to:
          nullable: false
          type: string
      required:
        - __typename
        - to
        - body
      title: MessageSmsContent
      type: object
    PreferenceSetCategories:
      additionalProperties:
        $ref: '#/components/schemas/PreferenceSetWorkflowCategorySetting'
      description: A map of categories and their settings
      example:
        marketing:
          channel_types:
            email: false
      title: PreferenceSetCategories
      type: object
    PreferenceSetWorkflows:
      additionalProperties:
        $ref: '#/components/schemas/PreferenceSetWorkflowCategorySetting'
      description: A map of workflows and their settings
      example:
        dinosaurs-loose:
          channel_types:
            email: false
      title: PreferenceSetWorkflows
      type: object
    SlackChannelData:
      description: Slack channel data
      example:
        connections:
          - access_token: xoxb-1234567890
            channel_id: C01234567890
            user_id: U01234567890
        token:
          access_token: xoxb-1234567890
      properties:
        connections:
          items:
            nullable: false
            oneOf:
              - $ref: '#/components/schemas/SlackTokenConnection'
              - $ref: '#/components/schemas/SlackIncomingWebhookConnection'
            type: object
          nullable: false
          type: array
        token:
          description: A token that's used to store the access token for a Slack workspace.
          example:
            access_token: xoxb-1234567890
          nullable: true
          properties:
            access_token:
              example: xoxb-1234567890
              nullable: true
              type: string
          required:
            - access_token
          title: SlackChannelDataTokenObject
          type: object
      required:
        - connections
      title: SlackChannelData
      type: object
    BulkUpdateMessagesForChannelRequest:
      description: Request body for bulk updating messages for a specific channel
      example:
        archived: include
        delivery_status: delivered
        engagement_status: seen
        has_tenant: true
        newer_than: '2024-01-01T00:00:00Z'
        older_than: '2024-01-01T00:00:00Z'
        recipient_ids:
          - recipient1
          - recipient2
        tenants:
          - tenant1
          - tenant2
        trigger_data: '{"key":"value"}'
        workflows:
          - workflow1
          - workflow2
      properties:
        archived:
          enum:
            - exclude
            - include
            - only
          type: string
        delivery_status:
          enum:
            - queued
            - sent
            - delivered
            - delivery_attempted
            - undelivered
            - not_sent
            - bounced
          type: string
        engagement_status:
          enum:
            - seen
            - unseen
            - read
            - unread
            - archived
            - unarchived
            - link_clicked
            - interacted
          type: string
        has_tenant:
          type: boolean
        newer_than:
          format: date-time
          type: string
        older_than:
          format: date-time
          type: string
        recipient_ids:
          items:
            type: string
          type: array
        tenants:
          items:
            type: string
          type: array
        trigger_data:
          type: string
        workflows:
          items:
            type: string
          type: array
      title: BulkUpdateMessagesForChannelRequest
      type: object
    EmptyContentResponse:
      description: An empty response
      example: ''
      required: true
      title: EmptyContentResponse
      type: string
    BatchListMessagesResponse:
      description: The list of messages that were updated
      example:
        - actors:
            - user_123
          archived_at: null
          channel_id: 123e4567-e89b-12d3-a456-426614174000
          clicked_at: null
          data:
            foo: bar
          engagement_statuses:
            - read
            - seen
          id: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
          inserted_at: '2021-01-01T00:00:00Z'
          interacted_at: null
          link_clicked_at: null
          metadata:
            external_id: 123e4567-e89b-12d3-a456-426614174000
          read_at: null
          recipient: user_123
          scheduled_at: null
          seen_at: null
          source:
            __typename: NotificationSource
            categories:
              - collaboration
            key: comment-created
            version_id: 123e4567-e89b-12d3-a456-426614174000
          status: sent
          tenant: tenant_123
          updated_at: '2021-01-01T00:00:00Z'
          workflow: comment-created
      items:
        $ref: '#/components/schemas/Message'
      title: BatchListMessagesResponse
      type: array
    Activity:
      description: An activity associated with a workflow run
      example:
        __typename: Activity
        actor: null
        data:
          foo: bar
        id: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
        inserted_at: '2024-01-01T00:00:00Z'
        recipient:
          __typename: User
          avatar: null
          created_at: null
          email: jane@ingen.net
          id: jane
          name: Jane Doe
          phone_number: null
          timezone: null
          updated_at: '2024-05-22T12:00:00Z'
        updated_at: '2024-01-01T00:00:00Z'
      properties:
        __typename:
          example: Activity
          type: string
        actor:
          oneOf:
            - $ref: '#/components/schemas/Recipient'
            - nullable: true
          type: object
        data:
          additionalProperties: true
          description: The data associated with the activity
          nullable: true
          type: object
        id:
          example: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
          type: string
        inserted_at:
          format: date-time
          type: string
        recipient:
          $ref: '#/components/schemas/Recipient'
        updated_at:
          format: date-time
          type: string
      title: Activity
      type: object
    InlineIdentifyUserRequest:
      additionalProperties: true
      description: >-
        A set of parameters to inline-identify a user with. Inline identifying the user will ensure that the
        user is available before the request is executed in Knock. It will perform an upsert against the user
        you're supplying, replacing any properties specified.
      example:
        email: jane@ingen.net
        id: user_1
        name: Jane Doe
        timezone: America/New_York
      properties:
        channel_data:
          description: A set of channel data for the user. This is a map of channel IDs to channel data.
          oneOf:
            - nullable: true
            - $ref: '#/components/schemas/InlineChannelDataRequest'
        created_at:
          description: The creation date of the user from your system.
          format: date-time
          nullable: true
          type: string
        id:
          description: The ID of the user to identify. This is an ID that you supply.
          type: string
        preferences:
          description: A set of preferences for the user. This is a map of preference set names to preference set values.
          oneOf:
            - nullable: true
            - $ref: '#/components/schemas/InlinePreferenceSetRequest'
      required:
        - id
      title: InlineIdentifyUserRequest
      type: object
    MsTeamsChannelData:
      description: Microsoft Teams channel data
      example:
        connections:
          - ms_teams_channel_id: 123e4567-e89b-12d3-a456-426614174000
            ms_teams_team_id: 123e4567-e89b-12d3-a456-426614174000
            ms_teams_tenant_id: null
            ms_teams_user_id: null
        ms_teams_tenant_id: null
      properties:
        connections:
          items:
            oneOf:
              - $ref: '#/components/schemas/MsTeamsTokenConnection'
              - $ref: '#/components/schemas/MsTeamsIncomingWebhookConnection'
            type: object
          nullable: false
          type: array
        ms_teams_tenant_id:
          description: The Microsoft Teams tenant ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          nullable: true
          type: string
      required:
        - connections
      title: MsTeamsChannelData
      type: object
    OneSignalChannelData:
      description: OneSignal channel data
      example:
        player_ids:
          - 123e4567-e89b-12d3-a456-426614174000
      properties:
        player_ids:
          description: The OneSignal player IDs
          example:
            - 123e4567-e89b-12d3-a456-426614174000
          items:
            format: uuid
            nullable: false
            type: string
          nullable: false
          type: array
      required:
        - player_ids
      title: OneSignalChannelData
      type: object
    SlackIncomingWebhookConnection:
      description: An incoming webhook Slack connection
      example:
        url: https://hooks.slack.com/services/T01234567890/B01234567890/1234567890
      properties:
        url:
          example: https://hooks.slack.com/services/T01234567890/B01234567890/1234567890
          nullable: false
          type: string
      required:
        - url
      title: SlackIncomingWebhookConnection
      type: object
    PreferenceSetChannelTypeSetting:
      description: A set of settings for a channel type. Currently, this can only be a list of conditions to apply.
      example:
        conditions:
          - argument: US
            operator: equal_to
            variable: recipient.country_code
      properties:
        conditions:
          items:
            $ref: '#/components/schemas/Condition'
          type: array
      required:
        - conditions
      title: PreferenceSetChannelTypeSetting
      type: object
    UpsertSubscriptionsRequest:
      description: Request to upsert subscriptions for an object
      example:
        properties:
          key: value
        recipients:
          - user_1
          - user_2
      properties:
        properties:
          additionalProperties: true
          description: The custom properties associated with the subscription
          nullable: true
          type: object
        recipients:
          description: The recipients to subscribe to the object
          items:
            $ref: '#/components/schemas/RecipientRequest'
          type: array
      required:
        - recipients
      title: UpsertSubscriptionsRequest
      type: object
    BulkOperation:
      description: A bulk operation entity
      example:
        __typename: BulkOperation
        completed_at: null
        error_count: 0
        error_items: []
        estimated_total_rows: 1000
        failed_at: null
        id: 123e4567-e89b-12d3-a456-426614174000
        inserted_at: '2024-05-22T12:00:00Z'
        name: Bulk operation name
        processed_rows: 0
        started_at: null
        status: processing
        success_count: 0
        updated_at: '2024-05-22T12:00:00Z'
      properties:
        __typename:
          example: BulkOperation
          type: string
        completed_at:
          format: date-time
          nullable: true
          type: string
        error_count:
          example: 0
          type: integer
        error_items:
          description: A list of items that failed to be processed
          items:
            properties:
              collection:
                nullable: true
                type: string
              id:
                type: string
            required:
              - id
            type: object
          type: array
        estimated_total_rows:
          example: 1000
          type: integer
        failed_at:
          format: date-time
          nullable: true
          type: string
        id:
          format: uuid
          type: string
        inserted_at:
          format: date-time
          type: string
        name:
          example: Bulk operation name
          type: string
        processed_rows:
          example: 0
          type: integer
        started_at:
          format: date-time
          nullable: true
          type: string
        status:
          enum:
            - queued
            - processing
            - completed
            - failed
          example: queued
          nullable: false
          type: string
        success_count:
          example: 0
          type: integer
        updated_at:
          format: date-time
          type: string
      required:
        - __typename
        - id
        - name
        - status
        - estimated_total_rows
        - processed_rows
        - success_count
        - updated_at
        - inserted_at
      title: BulkOperation
      type: object
    MsTeamsIncomingWebhookConnection:
      description: Microsoft Teams incoming webhook connection
      example:
        incoming_webhook:
          url: https://example.com/webhook
      properties:
        incoming_webhook:
          description: The incoming webhook
          properties:
            url:
              description: The URL of the incoming webhook
              example: https://example.com/webhook
              type: string
          required:
            - url
          type: object
      required:
        - incoming_webhook
      title: MsTeamsIncomingWebhookConnection
      type: object
    Message:
      description: Represents a single message that was generated by a workflow for a given channel.
      example:
        actors:
          - user_123
        archived_at: null
        channel_id: 123e4567-e89b-12d3-a456-426614174000
        clicked_at: null
        data:
          foo: bar
        engagement_statuses:
          - read
          - seen
        id: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
        inserted_at: '2021-01-01T00:00:00Z'
        interacted_at: null
        link_clicked_at: null
        metadata:
          external_id: 123e4567-e89b-12d3-a456-426614174000
        read_at: null
        recipient: user_123
        scheduled_at: null
        seen_at: null
        source:
          __typename: NotificationSource
          categories:
            - collaboration
          key: comment-created
          version_id: 123e4567-e89b-12d3-a456-426614174000
        status: sent
        tenant: tenant_123
        updated_at: '2021-01-01T00:00:00Z'
        workflow: comment-created
      properties:
        __typename:
          example: Message
          type: string
        actors:
          description: A list of actor representations associated with the message (up to 10)
          items:
            $ref: '#/components/schemas/RecipientReference'
          type: array
        archived_at:
          description: Timestamp when message was archived
          format: date-time
          nullable: true
          type: string
        channel_id:
          description: Channel ID associated with the message
          format: uuid
          type: string
        clicked_at:
          description: Timestamp when message was clicked
          format: date-time
          nullable: true
          type: string
        data:
          additionalProperties: true
          description: Additional message data
          nullable: true
          type: object
        engagement_statuses:
          description: List of engagement statuses
          example:
            - read
            - seen
          items:
            enum:
              - seen
              - read
              - interacted
              - link_clicked
              - archived
            type: string
          type: array
        id:
          description: The message ID
          type: string
        inserted_at:
          description: Timestamp of creation
          format: date-time
          type: string
        interacted_at:
          description: Timestamp when message was interacted with
          format: date-time
          nullable: true
          type: string
        link_clicked_at:
          description: Timestamp when a link in the message was clicked
          format: date-time
          nullable: true
          type: string
        metadata:
          additionalProperties: true
          description: Message metadata
          example:
            external_id: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
          type: object
        read_at:
          description: Timestamp when message was read
          format: date-time
          nullable: true
          type: string
        recipient:
          $ref: '#/components/schemas/RecipientReference'
        scheduled_at:
          description: Timestamp when message was scheduled for
          format: date-time
          nullable: true
          type: string
        seen_at:
          description: Timestamp when message was seen
          format: date-time
          nullable: true
          type: string
        source:
          description: Source information
          example:
            __typename: NotificationSource
            categories:
              - collaboration
            key: comment-created
            version_id: 123e4567-e89b-12d3-a456-426614174000
          properties:
            __typename:
              example: NotificationSource
              type: string
            categories:
              description: The workflow categories
              items:
                type: string
              type: array
            key:
              description: The workflow key
              type: string
            version_id:
              description: The source version ID
              format: uuid
              type: string
          required:
            - __typename
            - key
            - version_id
            - categories
          type: object
        status:
          description: Message delivery status
          enum:
            - queued
            - sent
            - delivered
            - delivery_attempted
            - undelivered
            - not_sent
            - bounced
          example: sent
          type: string
        tenant:
          description: Tenant ID that the message belongs to
          nullable: true
          type: string
        updated_at:
          description: Timestamp of last update
          format: date-time
          type: string
        workflow:
          deprecated: true
          description: Workflow key used to create the message
          nullable: true
          type: string
      title: Message
      type: object
    BulkSetTenantsRequest:
      description: A request to set tenants in bulk
      example:
        tenants:
          - id: tenant_1
            name: Acme Corp, Inc.
      properties:
        tenants:
          items:
            $ref: '#/components/schemas/InlineTenantRequest'
          type: array
      required:
        - tenants
      title: BulkSetTenantsRequest
      type: object
    AudienceMemberRequest:
      description: A request for an individual audience member
      example:
        tenant: null
        user:
          email: jane@ingen.net
          id: user_1
          name: Jane Doe
          timezone: America/New_York
      properties:
        tenant:
          example: acme_corp
          nullable: true
          type: string
        user:
          $ref: '#/components/schemas/InlineIdentifyUserRequest'
      required:
        - user
      title: AudienceMemberRequest
      type: object
    RemoveAudienceMembersRequest:
      description: A request to remove members from an audience
      example:
        members:
          - tenant: null
            user:
              email: jane@ingen.net
              id: user_1
              name: Jane Doe
              timezone: America/New_York
      properties:
        members:
          items:
            $ref: '#/components/schemas/AudienceMemberRequest'
          nullable: false
          type: array
      required:
        - members
      title: RemoveAudienceMembersRequest
      type: object
    SetTenantRequest:
      additionalProperties: true
      description: A tenant to be set in the system. You can supply any additional properties on the tenant object.
      example:
        name: ACME Corp, Inc.
        settings:
          branding:
            icon_url: https://example.com/icon.png
            logo_url: https://example.com/logo.png
            primary_color: '#000000'
            primary_color_contrast: '#FFFFFF'
      properties:
        channel_data:
          oneOf:
            - nullable: true
            - $ref: '#/components/schemas/InlineChannelDataRequest'
        preferences:
          oneOf:
            - nullable: true
            - $ref: '#/components/schemas/InlinePreferenceSetRequest'
        settings:
          properties:
            branding:
              properties:
                icon_url:
                  nullable: true
                  type: string
                logo_url:
                  nullable: true
                  type: string
                primary_color:
                  nullable: true
                  type: string
                primary_color_contrast:
                  nullable: true
                  type: string
              type: object
            preference_set:
              oneOf:
                - nullable: true
                - $ref: '#/components/schemas/PreferenceSetRequest'
          type: object
      title: SetTenantRequest
      type: object
    MessageInAppFeedContent:
      description: The contents of a message in an app feed
      example:
        __typename: MessageInAppFeedContent
        blocks:
          - content: This is a message in an app feed
            name: body
            rendered: <p>This is a message in an app feed</p>
            type: markdown
      nullable: false
      properties:
        __typename:
          example: MessageInAppFeedContent
          nullable: false
          type: string
        blocks:
          description: The blocks of the message
          items:
            nullable: false
            oneOf:
              - $ref: '#/components/schemas/MessageInAppFeedContentBlock'
              - $ref: '#/components/schemas/MessageInAppFeedButtonSetBlock'
            type: object
          nullable: false
          type: array
      required:
        - __typename
        - blocks
      title: MessageInAppFeedContent
      type: object
    DiscordChannelConnection:
      description: Discord channel connection
      example:
        channel_id: '123456789012345678'
      properties:
        channel_id:
          description: The Discord channel ID
          example: '123456789012345678'
          type: string
      required:
        - channel_id
      title: DiscordChannelConnection
      type: object
    MessageChatContentBlock:
      description: A block in a chat message
      example:
        content: Hello, world!
        name: body
        type: text
      nullable: false
      properties:
        content:
          nullable: false
          type: string
        name:
          nullable: false
          type: string
        type:
          enum:
            - text
            - markdown
          nullable: false
          type: string
      required:
        - type
        - name
        - content
      title: MessageChatContentBlock
      type: object
    DeleteSubscriptionsRequest:
      description: Request to delete subscriptions
      example:
        recipients:
          - id: user_1
      properties:
        recipients:
          items:
            $ref: '#/components/schemas/RecipientRequest'
          type: array
      required:
        - recipients
      title: DeleteSubscriptionsRequest
      type: object
    Schedule:
      description: A schedule that represents a recurring workflow execution
      example:
        __typename: Schedule
        actor: null
        data: null
        id: 123e4567-e89b-12d3-a456-426614174000
        inserted_at: '2021-01-01T00:00:00Z'
        last_occurrence_at: null
        next_occurrence_at: null
        recipient:
          __typename: User
          avatar: null
          created_at: null
          email: jane@ingen.net
          id: jane
          name: Jane Doe
          phone_number: null
          timezone: null
          updated_at: '2024-05-22T12:00:00Z'
        repeats:
          - __typename: ScheduleRepeat
            day_of_month: null
            days:
              - mon
              - tue
              - wed
              - thu
              - fri
              - sat
              - sun
            frequency: daily
            hours: null
            interval: 1
            minutes: null
        tenant: null
        updated_at: '2021-01-01T00:00:00Z'
        workflow: workflow_123
      properties:
        __typename:
          example: Schedule
          type: string
        actor:
          oneOf:
            - $ref: '#/components/schemas/Recipient'
            - nullable: true
        data:
          additionalProperties: true
          nullable: true
          type: object
        id:
          format: uuid
          type: string
        inserted_at:
          format: date-time
          type: string
        last_occurrence_at:
          format: date-time
          nullable: true
          type: string
        next_occurrence_at:
          format: date-time
          nullable: true
          type: string
        recipient:
          $ref: '#/components/schemas/Recipient'
        repeats:
          items:
            $ref: '#/components/schemas/ScheduleRepeatRule'
          type: array
        tenant:
          nullable: true
          type: string
        updated_at:
          format: date-time
          type: string
        workflow:
          type: string
      required:
        - id
        - workflow
        - recipient
        - repeats
        - inserted_at
        - updated_at
      title: Schedule
      type: object
    SchedulesResponse:
      description: A list of schedules
      example:
        - __typename: Schedule
          actor: null
          data: null
          id: 123e4567-e89b-12d3-a456-426614174000
          inserted_at: '2021-01-01T00:00:00Z'
          last_occurrence_at: null
          next_occurrence_at: null
          recipient:
            __typename: User
            avatar: null
            created_at: null
            email: jane@ingen.net
            id: jane
            name: Jane Doe
            phone_number: null
            timezone: null
            updated_at: '2024-05-22T12:00:00Z'
          repeats:
            - __typename: ScheduleRepeat
              day_of_month: null
              days:
                - mon
                - tue
                - wed
                - thu
                - fri
                - sat
                - sun
              frequency: daily
              hours: null
              interval: 1
              minutes: null
          tenant: null
          updated_at: '2021-01-01T00:00:00Z'
          workflow: workflow_123
      items:
        $ref: '#/components/schemas/Schedule'
      title: SchedulesResponse
      type: array
    PreferenceSetRequest:
      description: Set preferences for a recipient
      example:
        categories:
          marketing: false
          transactional:
            channel_types:
              email: false
        channel_types:
          email: true
        workflows:
          dinosaurs-loose:
            channel_types:
              email: false
      properties:
        categories:
          anyOf:
            - additionalProperties:
                $ref: '#/components/schemas/PreferenceSetWorkflowCategorySetting'
              description: >-
                A setting for a preference set, where the key in the object is the category, and the values
                are the preference settings for that category.
              example:
                marketing:
                  channel_types:
                    email: false
              title: PreferenceSeRequestCategories
              type: object
            - nullable: true
        channel_types:
          anyOf:
            - $ref: '#/components/schemas/PreferenceSetChannelTypes'
            - nullable: true
        workflows:
          anyOf:
            - additionalProperties:
                $ref: '#/components/schemas/PreferenceSetWorkflowCategorySetting'
              description: >-
                A setting for a preference set, where the key in the object is the workflow key, and the
                values are the preference settings for that workflow.
              example:
                dinosaurs-loose:
                  channel_types:
                    email: false
              title: PreferenceSetRequestWorkflows
              type: object
            - nullable: true
      title: PreferenceSetRequest
      type: object
    TeamsForMsTeamsProviderResponse:
      description: The response from a teams for Microsoft Teams provider request
      example:
        ms_teams_teams:
          - displayName: Engineering Team
            id: team-id-1
        skip_token: token-for-next-page
      properties:
        ms_teams_teams:
          items:
            properties:
              description:
                nullable: true
                type: string
              displayName:
                nullable: false
                type: string
              id:
                nullable: false
                type: string
            required:
              - id
              - displayName
            type: object
          type: array
        skip_token:
          nullable: true
          type: string
      required:
        - ms_teams_teams
        - skip_token
      title: TeamsForMsTeamsProviderResponse
      type: object
    ListMessageEventsResponse:
      description: A paginated list of message events.
      example:
        entries:
          - __typename: MessageEvent
            data: null
            id: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
            inserted_at: '2021-01-01T00:00:00Z'
            recipient: user_123
            type: message.sent
        page_info:
          __typename: PageInfo
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: The list of message events
          items:
            $ref: '#/components/schemas/MessageEvent'
          type: array
        page_info:
          $ref: '#/components/schemas/PageInfo'
      required:
        - entries
        - page_info
      title: ListMessageEventsResponse
      type: object
    SubscriptionsResponse:
      description: Response containing a list of subscriptions
      example:
        - __typename: Subscription
          inserted_at: '2021-01-01T00:00:00Z'
          object:
            __typename: Object
            collection: projects
            created_at: null
            id: project_1
            name: My first project
            updated_at: '2024-05-22T12:00:00Z'
          recipient:
            __typename: User
            avatar: null
            created_at: null
            email: jane@ingen.net
            id: jane
            name: Jane Doe
            phone_number: null
            timezone: null
            updated_at: '2024-05-22T12:00:00Z'
          updated_at: '2021-01-01T00:00:00Z'
      items:
        $ref: '#/components/schemas/Subscription'
      title: SubscriptionsResponse
      type: array
    ChannelsForSlackProviderResponse:
      description: The response from a Slack channels for provider request
      example:
        next_cursor: null
        slack_channels:
          - context_team_id: T01234567890
            id: C01234567890
            is_im: false
            is_private: false
            name: general
      properties:
        next_cursor:
          nullable: true
          type: string
        slack_channels:
          items:
            properties:
              context_team_id:
                nullable: false
                type: string
              id:
                nullable: false
                type: string
              is_im:
                nullable: false
                type: boolean
              is_private:
                nullable: false
                type: boolean
              name:
                nullable: false
                type: string
            required:
              - id
              - name
              - is_private
              - is_im
              - context_team_id
            type: object
          type: array
      required:
        - slack_channels
        - next_cursor
      title: ChannelsForSlackProviderResponse
      type: object
    Condition:
      description: A condition to be evaluated
      example:
        argument: some_property
        operator: equal_to
        variable: recipient.property
      properties:
        argument:
          example: some_property
          nullable: true
          type: string
        operator:
          enum:
            - equal_to
            - not_equal_to
            - greater_than
            - less_than
            - greater_than_or_equal_to
            - less_than_or_equal_to
            - contains
            - not_contains
            - empty
            - not_empty
            - contains_all
            - is_timestamp
            - is_not_timestamp
            - is_timestamp_after
            - is_timestamp_before
            - is_timestamp_between
            - is_audience_member
          example: equal_to
          type: string
        variable:
          example: recipient.property
          type: string
      required:
        - variable
        - operator
        - argument
      title: Condition
      type: object
    CancelWorkflowRequest:
      description: A set of parameters to cancel a workflow with
      example:
        cancellation_key: cancel-workflow-123
        recipients:
          - jhammond
        tenant: prk_1
      properties:
        cancellation_key:
          description: >-
            The cancellation key supplied to the workflow trigger endpoint to use for cancelling one or more
            workflow runs.
          type: string
        recipients:
          description: An optional list of recipients to cancel the workflow for using the cancellation key.
          items:
            type: string
          nullable: true
          type: array
        tenant:
          nullable: true
          type: string
      required:
        - cancellation_key
      title: CancelWorkflowRequest
      type: object
    ChannelDataRequest:
      description: Set channel data for a type of channel
      example:
        data:
          tokens:
            - push_token_1
      properties:
        data:
          nullable: false
          oneOf:
            - $ref: '#/components/schemas/PushChannelData'
            - $ref: '#/components/schemas/OneSignalChannelData'
            - $ref: '#/components/schemas/SlackChannelData'
            - $ref: '#/components/schemas/MsTeamsChannelData'
            - $ref: '#/components/schemas/DiscordChannelData'
          type: object
      required:
        - data
      title: ChannelDataRequest
      type: object
    MessageDeliveryLogRequest:
      description: A message delivery log request
      example:
        body:
          html_content: <html></html>
        headers:
          Content-Type: application/json
        host: localhost
        method: GET
        path: /
        query: '?foo=bar'
      properties:
        body:
          oneOf:
            - type: string
            - additionalProperties: true
              type: object
          type: object
        headers:
          additionalProperties: true
          nullable: true
          type: object
        host:
          example: localhost
          nullable: false
          type: string
        method:
          enum:
            - GET
            - POST
            - PUT
            - DELETE
            - PATCH
          example: GET
          nullable: false
          type: string
        path:
          example: /
          nullable: false
          type: string
        query:
          example: '?foo=bar'
          nullable: true
          type: string
      title: MessageDeliveryLogRequest
      type: object
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
info:
  title: Knock API
  version: '1.0'
openapi: 3.0.0
paths:
  /v1/objects/{collection}/{object_id}/preferences/{preference_set_id}/categories:
    put:
      callbacks: {}
      deprecated: true
      operationId: updateObjectPreferenceCategories
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSet'
          description: OK
      summary: Update categories in preference set
      tags:
        - Objects
        - Preferences
  /v1/users/{user_id}/preferences/{preference_set_id}:
    get:
      callbacks: {}
      operationId: getUserPreferenceSet
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: string
        - description: Preference set ID
          in: path
          name: preference_set_id
          required: true
          schema:
            default: default
            example: default
            type: string
        - description: Tenant ID
          in: query
          name: tenant
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSet'
          description: OK
      summary: Get preference set
      tags:
        - Users
        - Preferences
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const preferenceSet = await client.users.getPreferences('user_id', 'default');

            console.log(preferenceSet.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          preference_set = client.users.get_preferences(
              user_id="user_id",
              preference_set_id="default",
          )
          print(preference_set.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            preferenceSet, err := client.Users.GetPreferences(
              context.TODO(),
              "user_id",
              "default",
              knock.UserGetPreferencesParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", preferenceSet.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.recipients.preferences.PreferenceSet;
          import app.knock.api.models.users.UserGetPreferencesParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  UserGetPreferencesParams params = UserGetPreferencesParams.builder()
                      .userId("user_id")
                      .preferenceSetId("default")
                      .build();
                  PreferenceSet preferenceSet = client.users().getPreferences(params);
              }
          }
    put:
      callbacks: {}
      description: >-
        Updates a complete preference set for a user. This is a destructive operation that will replace the
        existing preference set for the user.
      operationId: updateUserPreferenceSet
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: string
        - description: Preference set ID
          in: path
          name: preference_set_id
          required: true
          schema:
            default: default
            example: default
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreferenceSetRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSet'
          description: OK
      summary: Update preference set
      tags:
        - Users
        - Preferences
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const preferenceSet = await client.users.setPreferences('user_id', 'default');

            console.log(preferenceSet.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          preference_set = client.users.set_preferences(
              user_id="user_id",
              preference_set_id="default",
          )
          print(preference_set.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            preferenceSet, err := client.Users.SetPreferences(
              context.TODO(),
              "user_id",
              "default",
              knock.UserSetPreferencesParams{
                PreferenceSetRequest: knock.PreferenceSetRequestParam{

                },
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", preferenceSet.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.recipients.preferences.PreferenceSet;
          import app.knock.api.models.recipients.preferences.PreferenceSetRequest;
          import app.knock.api.models.users.UserSetPreferencesParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  UserSetPreferencesParams params = UserSetPreferencesParams.builder()
                      .userId("user_id")
                      .preferenceSetId("default")
                      .preferenceSetRequest(PreferenceSetRequest.builder().build())
                      .build();
                  PreferenceSet preferenceSet = client.users().setPreferences(params);
              }
          }
  /v1/objects/{collection}/{object_id}/messages:
    get:
      callbacks: {}
      operationId: listMessagesForObject
      parameters:
        - description: The cursor to fetch entries after
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The page size to fetch
          in: query
          name: page_size
          required: false
          schema:
            type: integer
        - description: The tenant ID
          example: tenant_123
          in: query
          name: tenant
          required: false
          schema:
            type: string
        - description: The channel ID
          example: 123e4567-e89b-12d3-a456-426614174000
          in: query
          name: channel_id
          required: false
          schema:
            type: string
        - description: The status of the message
          example:
            - delivered
          in: query
          name: status[]
          required: false
          schema:
            items:
              enum:
                - queued
                - sent
                - delivered
                - delivery_attempted
                - undelivered
                - not_sent
                - bounced
              type: string
            type: array
        - description: The engagement status of the message
          example:
            - unread
          in: query
          name: engagement_status[]
          required: false
          schema:
            items:
              enum:
                - seen
                - read
                - interacted
                - link_clicked
                - archived
              type: string
            type: array
        - description: The message IDs to filter messages by
          example:
            - 1jNaXzB2RZX3LY8wVQnfCKyPnv7
          in: query
          name: message_ids[]
          required: false
          schema:
            items:
              type: string
            type: array
        - description: The workflow categories to filter messages by
          example:
            - workflow_123
          in: query
          name: workflow_categories[]
          required: false
          schema:
            items:
              type: string
            type: array
        - description: The source of the message (workflow key)
          example: comment-created
          in: query
          name: source
          required: false
          schema:
            type: string
        - description: The workflow run ID to filter messages by
          example: 123e4567-e89b-12d3-a456-426614174000
          in: query
          name: workflow_run_id
          required: false
          schema:
            format: uuid
            type: string
        - description: The workflow recipient run ID to filter messages by
          example: 123e4567-e89b-12d3-a456-426614174000
          in: query
          name: workflow_recipient_run_id
          required: false
          schema:
            format: uuid
            type: string
        - description: The trigger data to filter messages by. Must be a valid JSON object.
          example: '{"comment_id": "123"}'
          in: query
          name: trigger_data
          required: false
          schema:
            type: string
        - description: The collection name
          example: projects
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: The object ID
          example: project-123
          in: path
          name: object_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessagesResponse'
          description: OK
      summary: List messages
      tags:
        - Messages
        - Objects
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const message of client.objects.listMessages('projects', 'project-123')) {
              console.log(message.id);
            }
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          page = client.objects.list_messages(
              collection="projects",
              object_id="project-123",
          )
          page = page.entries[0]
          print(page.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            page, err := client.Objects.ListMessages(
              context.TODO(),
              "projects",
              "project-123",
              knock.ObjectListMessagesParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", page)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.objects.ObjectListMessagesPage;
          import app.knock.api.models.objects.ObjectListMessagesParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ObjectListMessagesParams params = ObjectListMessagesParams.builder()
                      .collection("projects")
                      .objectId("project-123")
                      .build();
                  ObjectListMessagesPage page = client.objects().listMessages(params);
              }
          }
  /v1/bulk_operations/{id}:
    get:
      callbacks: {}
      description: Retrieves a bulk operation (if it exists) and displays the current state of it.
      operationId: getBulkOperation
      parameters:
        - description: The ID of the bulk operation to retrieve
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperation'
          description: OK
      summary: Get bulk operation
      tags:
        - Bulk operations
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const bulkOperation = await client.bulkOperations.get('182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e');

            console.log(bulkOperation.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          bulk_operation = client.bulk_operations.get(
              "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
          )
          print(bulk_operation.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            bulkOperation, err := client.BulkOperations.Get(context.TODO(), "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", bulkOperation.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.bulkoperations.BulkOperation;
          import app.knock.api.models.bulkoperations.BulkOperationGetParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  BulkOperationGetParams params = BulkOperationGetParams.builder()
                      .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                      .build();
                  BulkOperation bulkOperation = client.bulkOperations().get(params);
              }
          }
  /v1/users/{user_id}/subscriptions:
    get:
      callbacks: {}
      operationId: listSubscriptionsForUser
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: string
        - description: The cursor to fetch entries after
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The page size to fetch
          in: query
          name: page_size
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSubscriptionsResponse'
          description: OK
      summary: List subscriptions
      tags:
        - Subscriptions
        - Users
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const subscription of client.users.listSubscriptions('user_id')) {
              console.log(subscription.__typename);
            }
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          page = client.users.list_subscriptions(
              user_id="user_id",
          )
          page = page.entries[0]
          print(page._typename)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            page, err := client.Users.ListSubscriptions(
              context.TODO(),
              "user_id",
              knock.UserListSubscriptionsParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", page)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.users.UserListSubscriptionsPage;
          import app.knock.api.models.users.UserListSubscriptionsParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  UserListSubscriptionsParams params = UserListSubscriptionsParams.builder()
                      .userId("user_id")
                      .build();
                  UserListSubscriptionsPage page = client.users().listSubscriptions(params);
              }
          }
  /v1/users/{user_id}:
    delete:
      callbacks: {}
      operationId: deleteUser
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyContentResponse'
          description: No Content
      summary: Delete user
      tags:
        - Users
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const user = await client.users.delete('user_id');

            console.log(user);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          user = client.users.delete(
              "user_id",
          )
          print(user)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            user, err := client.Users.Delete(context.TODO(), "user_id")
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", user)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.users.UserDeleteParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  UserDeleteParams params = UserDeleteParams.builder()
                      .userId("user_id")
                      .build();
                  String user = client.users().delete(params);
              }
          }
    get:
      callbacks: {}
      operationId: retrieveUser
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
      summary: Get user
      tags:
        - Users
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const user = await client.users.get('user_id');

            console.log(user.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          user = client.users.get(
              "user_id",
          )
          print(user.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            user, err := client.Users.Get(context.TODO(), "user_id")
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", user.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.users.User;
          import app.knock.api.models.users.UserGetParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  UserGetParams params = UserGetParams.builder()
                      .userId("user_id")
                      .build();
                  User user = client.users().get(params);
              }
          }
    put:
      callbacks: {}
      operationId: identifyUser
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentifyUserRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
      summary: Identify user
      tags:
        - Users
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const user = await client.users.update('user_id');

            console.log(user.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          user = client.users.update(
              user_id="user_id",
          )
          print(user.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            user, err := client.Users.Update(
              context.TODO(),
              "user_id",
              knock.UserUpdateParams{
                IdentifyUserRequest: knock.IdentifyUserRequestParam{

                },
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", user.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.users.IdentifyUserRequest;
          import app.knock.api.models.users.User;
          import app.knock.api.models.users.UserUpdateParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  UserUpdateParams params = UserUpdateParams.builder()
                      .userId("user_id")
                      .identifyUserRequest(IdentifyUserRequest.builder().build())
                      .build();
                  User user = client.users().update(params);
              }
          }
  /v1/messages/{message_id}/delivery_logs:
    get:
      callbacks: {}
      operationId: listMessageDeliveryLogs
      parameters:
        - description: The ID of the message to fetch delivery logs for
          in: path
          name: message_id
          required: true
          schema:
            type: string
        - description: The cursor to fetch entries after
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The page size to fetch
          in: query
          name: page_size
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessageDeliveryLogsResponse'
          description: OK
      summary: List delivery logs
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const messageDeliveryLog of client.messages.listDeliveryLogs('message_id')) {
              console.log(messageDeliveryLog.id);
            }
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          page = client.messages.list_delivery_logs(
              message_id="message_id",
          )
          page = page.entries[0]
          print(page.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            page, err := client.Messages.ListDeliveryLogs(
              context.TODO(),
              "message_id",
              knock.MessageListDeliveryLogsParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", page)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.MessageListDeliveryLogsPage;
          import app.knock.api.models.messages.MessageListDeliveryLogsParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MessageListDeliveryLogsParams params = MessageListDeliveryLogsParams.builder()
                      .messageId("message_id")
                      .build();
                  MessageListDeliveryLogsPage page = client.messages().listDeliveryLogs(params);
              }
          }
  /v1/objects/{collection}/{object_id}/schedules:
    get:
      callbacks: {}
      operationId: listObjectSchedules
      parameters:
        - description: The ID of the object to list schedules for
          in: path
          name: object_id
          required: true
          schema:
            type: string
        - description: The collection of the object to list schedules for
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: The ID of the tenant to list schedules for
          in: query
          name: tenant
          required: false
          schema:
            type: string
        - description: The ID of the workflow to list schedules for
          in: query
          name: workflow
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries after
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The page size to fetch
          in: query
          name: page_size
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSchedulesResponse'
          description: OK
      summary: List schedules
      tags:
        - Schedules
        - Objects
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const schedule of client.objects.listSchedules('collection', 'object_id')) {
              console.log(schedule.id);
            }
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          page = client.objects.list_schedules(
              collection="collection",
              object_id="object_id",
          )
          page = page.entries[0]
          print(page.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            page, err := client.Objects.ListSchedules(
              context.TODO(),
              "collection",
              "object_id",
              knock.ObjectListSchedulesParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", page)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.objects.ObjectListSchedulesPage;
          import app.knock.api.models.objects.ObjectListSchedulesParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ObjectListSchedulesParams params = ObjectListSchedulesParams.builder()
                      .collection("collection")
                      .objectId("object_id")
                      .build();
                  ObjectListSchedulesPage page = client.objects().listSchedules(params);
              }
          }
  /v1/messages:
    get:
      callbacks: {}
      operationId: listMessages
      parameters:
        - description: The cursor to fetch entries after
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The page size to fetch
          in: query
          name: page_size
          required: false
          schema:
            type: integer
        - description: The tenant ID
          example: tenant_123
          in: query
          name: tenant
          required: false
          schema:
            type: string
        - description: The channel ID
          example: 123e4567-e89b-12d3-a456-426614174000
          in: query
          name: channel_id
          required: false
          schema:
            type: string
        - description: The status of the message
          example:
            - delivered
          in: query
          name: status[]
          required: false
          schema:
            items:
              enum:
                - queued
                - sent
                - delivered
                - delivery_attempted
                - undelivered
                - not_sent
                - bounced
              type: string
            type: array
        - description: The engagement status of the message
          example:
            - unread
          in: query
          name: engagement_status[]
          required: false
          schema:
            items:
              enum:
                - seen
                - read
                - interacted
                - link_clicked
                - archived
              type: string
            type: array
        - description: The message IDs to filter messages by
          example:
            - 1jNaXzB2RZX3LY8wVQnfCKyPnv7
          in: query
          name: message_ids[]
          required: false
          schema:
            items:
              type: string
            type: array
        - description: The workflow categories to filter messages by
          example:
            - workflow_123
          in: query
          name: workflow_categories[]
          required: false
          schema:
            items:
              type: string
            type: array
        - description: The source of the message (workflow key)
          example: comment-created
          in: query
          name: source
          required: false
          schema:
            type: string
        - description: The workflow run ID to filter messages by
          example: 123e4567-e89b-12d3-a456-426614174000
          in: query
          name: workflow_run_id
          required: false
          schema:
            format: uuid
            type: string
        - description: The workflow recipient run ID to filter messages by
          example: 123e4567-e89b-12d3-a456-426614174000
          in: query
          name: workflow_recipient_run_id
          required: false
          schema:
            format: uuid
            type: string
        - description: The trigger data to filter messages by. Must be a valid JSON object.
          example: '{"comment_id": "123"}'
          in: query
          name: trigger_data
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessagesResponse'
          description: OK
      summary: List messages
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const message of client.messages.list()) {
              console.log(message.id);
            }
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          page = client.messages.list()
          page = page.entries[0]
          print(page.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            page, err := client.Messages.List(context.TODO(), knock.MessageListParams{

            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", page)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.MessageListPage;
          import app.knock.api.models.messages.MessageListParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MessageListPage page = client.messages().list();
              }
          }
  /v1/messages/{message_id}/unseen:
    delete:
      callbacks: {}
      operationId: markMessageUnseen (2)
      parameters:
        - description: The message ID
          example: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
          in: path
          name: message_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: OK
      summary: Mark message as unseen
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const message = await client.messages.markAsUnseen('1jNaXzB2RZX3LY8wVQnfCKyPnv7');

            console.log(message.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          message = client.messages.mark_as_unseen(
              "message_id",
          )
          print(message.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            message, err := client.Messages.MarkAsUnseen(context.TODO(), "1jNaXzB2RZX3LY8wVQnfCKyPnv7")
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", message.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.Message;
          import app.knock.api.models.messages.MessageMarkAsUnseenParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MessageMarkAsUnseenParams params = MessageMarkAsUnseenParams.builder()
                      .messageId("1jNaXzB2RZX3LY8wVQnfCKyPnv7")
                      .build();
                  Message message = client.messages().markAsUnseen(params);
              }
          }
  /v1/objects/{collection}/bulk/delete:
    post:
      callbacks: {}
      operationId: bulkDeleteObjects
      parameters:
        - description: The collection to delete objects from
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: The IDs of the objects to delete
          in: query
          name: object_ids[]
          required: true
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperation'
          description: OK
      summary: Bulk delete objects
      tags:
        - Objects
        - Bulk operations
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const bulkOperation = await client.objects.bulk.delete('collection', { object_ids: ['string'] });

            console.log(bulkOperation.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          bulk_operation = client.objects.bulk.delete(
              collection="collection",
              object_ids=["string"],
          )
          print(bulk_operation.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            bulkOperation, err := client.Objects.Bulk.Delete(
              context.TODO(),
              "collection",
              knock.ObjectBulkDeleteParams{
                ObjectIDs: knock.F([]string{"string"}),
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", bulkOperation.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.bulkoperations.BulkOperation;
          import app.knock.api.models.objects.bulk.BulkDeleteParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  BulkDeleteParams params = BulkDeleteParams.builder()
                      .collection("collection")
                      .addObjectId("string")
                      .build();
                  BulkOperation bulkOperation = client.objects().bulk().delete(params);
              }
          }
  /v1/providers/slack/{channel_id}/channels:
    get:
      callbacks: {}
      description: List Slack channels for a Slack workspace
      operationId: listChannelsForSlackProvider
      parameters:
        - description: The ID of the Knock Slack channel to get channels for
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: A JSON encoded string containing the access token object reference
          example: '{"collection":"projects","object_id":"project_123"}'
          in: query
          name: access_token_object
          required: true
          schema:
            type: string
        - description: A cursor to paginate through the channels
          in: query
          name: query_options.cursor
          required: false
          schema:
            type: string
        - description: The number of channels to return
          in: query
          name: query_options.limit
          required: false
          schema:
            type: integer
        - description: Whether to exclude archived channels
          in: query
          name: query_options.exclude_archived
          required: false
          schema:
            type: boolean
        - description: The types of channels to return (comma separated list)
          in: query
          name: query_options.types
          required: false
          schema:
            type: string
        - description: The ID of the Slack team to get channels for
          in: query
          name: query_options.team_id
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelsForSlackProviderResponse'
          description: OK
      summary: List channels
      tags:
        - Providers
        - Slack
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const slackListChannelsResponse of client.providers.slack.listChannels('channel_id', {
              access_token_object: 'access_token_object',
            })) {
              console.log(slackListChannelsResponse.id);
            }
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          page = client.providers.slack.list_channels(
              channel_id="channel_id",
              access_token_object="access_token_object",
          )
          page = page.slack_channels[0]
          print(page.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            page, err := client.Providers.Slack.ListChannels(
              context.TODO(),
              "channel_id",
              knock.ProviderSlackListChannelsParams{
                AccessTokenObject: knock.F("access_token_object"),
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", page)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.providers.slack.SlackListChannelsPage;
          import app.knock.api.models.providers.slack.SlackListChannelsParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  SlackListChannelsParams params = SlackListChannelsParams.builder()
                      .channelId("channel_id")
                      .accessTokenObject("access_token_object")
                      .build();
                  SlackListChannelsPage page = client.providers().slack().listChannels(params);
              }
          }
  /v1/workflows/{key}/trigger:
    post:
      callbacks: {}
      description: >-
        Trigger a workflow specified by the key to run for the given recipients, using the parameters
        provided. Returns an identifier for the workflow run request. All workflow runs are executed
        asynchronously.
      operationId: triggerWorkflow
      parameters:
        - description: Workflow key
          in: path
          name: key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerWorkflowRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerWorkflowResponse'
          description: OK
      summary: Trigger workflow
      tags:
        - Workflows
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.workflows.trigger('key');

            console.log(response.workflow_run_id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          response = client.workflows.trigger(
              key="key",
          )
          print(response.workflow_run_id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            response, err := client.Workflows.Trigger(
              context.TODO(),
              "key",
              knock.WorkflowTriggerParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", response.WorkflowRunID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.workflows.WorkflowTriggerParams;
          import app.knock.api.models.workflows.WorkflowTriggerResponse;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  WorkflowTriggerParams params = WorkflowTriggerParams.builder()
                      .key("key")
                      .build();
                  WorkflowTriggerResponse response = client.workflows().trigger(params);
              }
          }
  /v1/messages/batch/unarchived:
    post:
      callbacks: {}
      operationId: batchMarkMessagesAsUnarchived
      parameters:
        - description: The message IDs to update
          in: body
          name: message_ids
          required: true
          schema:
            items:
              format: uuid
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The list of messages that were updated
                example:
                  - actors:
                      - user_123
                    archived_at: null
                    channel_id: 123e4567-e89b-12d3-a456-426614174000
                    clicked_at: null
                    data:
                      foo: bar
                    engagement_statuses:
                      - read
                      - seen
                    id: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
                    inserted_at: '2021-01-01T00:00:00Z'
                    interacted_at: null
                    link_clicked_at: null
                    metadata:
                      external_id: 123e4567-e89b-12d3-a456-426614174000
                    read_at: null
                    recipient: user_123
                    scheduled_at: null
                    seen_at: null
                    source:
                      __typename: NotificationSource
                      categories:
                        - collaboration
                      key: comment-created
                      version_id: 123e4567-e89b-12d3-a456-426614174000
                    status: sent
                    tenant: tenant_123
                    updated_at: '2021-01-01T00:00:00Z'
                    workflow: comment-created
                items:
                  $ref: '#/components/schemas/Message'
                title: BatchListMessagesResponse
                type: array
          description: OK
      summary: Mark messages as unarchived
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const messages = await client.messages.batch.unarchive({
              message_ids: ['182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e'],
            });

            console.log(messages);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          messages = client.messages.batch.unarchive(
              message_ids=["182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"],
          )
          print(messages)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            messages, err := client.Messages.Batch.Unarchive(context.TODO(), knock.MessageBatchUnarchiveParams{
              MessageIDs: knock.F([]string{"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"}),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", messages)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.Message;
          import app.knock.api.models.messages.batch.BatchUnarchiveParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  List<Message> messages = client.messages().batch().unarchive();
              }
          }
  /v1/objects/{collection}/{object_id}:
    delete:
      callbacks: {}
      operationId: deleteObject
      parameters:
        - description: Collection name
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: Object ID
          in: path
          name: object_id
          required: true
          schema:
            type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyContentResponse'
          description: No Content
      summary: Delete an object
      tags:
        - Objects
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const object = await client.objects.delete('collection', 'object_id');

            console.log(object);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          object = client.objects.delete(
              collection="collection",
              object_id="object_id",
          )
          print(object)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            object, err := client.Objects.Delete(
              context.TODO(),
              "collection",
              "object_id",
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", object)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.objects.ObjectDeleteParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ObjectDeleteParams params = ObjectDeleteParams.builder()
                      .collection("collection")
                      .objectId("object_id")
                      .build();
                  String object_ = client.objects().delete(params);
              }
          }
    get:
      callbacks: {}
      operationId: getObject
      parameters:
        - description: Collection name
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: Object ID
          in: path
          name: object_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
      summary: Get an object
      tags:
        - Objects
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const object = await client.objects.get('collection', 'object_id');

            console.log(object.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          object = client.objects.get(
              collection="collection",
              object_id="object_id",
          )
          print(object.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            object, err := client.Objects.Get(
              context.TODO(),
              "collection",
              "object_id",
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", object.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.objects.Object;
          import app.knock.api.models.objects.ObjectGetParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ObjectGetParams params = ObjectGetParams.builder()
                      .collection("collection")
                      .objectId("object_id")
                      .build();
                  Object object_ = client.objects().get(params);
              }
          }
    put:
      callbacks: {}
      operationId: setObject
      parameters:
        - description: Collection name
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: Object ID
          in: path
          name: object_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetObjectRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
      summary: Set (identify) an object
      tags:
        - Objects
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const object = await client.objects.set('collection', 'object_id');

            console.log(object.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          object = client.objects.set(
              collection="collection",
              object_id="object_id",
          )
          print(object.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            object, err := client.Objects.Set(
              context.TODO(),
              "collection",
              "object_id",
              knock.ObjectSetParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", object.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.objects.Object;
          import app.knock.api.models.objects.ObjectSetParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ObjectSetParams params = ObjectSetParams.builder()
                      .collection("collection")
                      .objectId("object_id")
                      .build();
                  Object object_ = client.objects().set(params);
              }
          }
  /v1/messages/{message_id}/unread:
    delete:
      callbacks: {}
      operationId: markMessageUnread (2)
      parameters:
        - description: The message ID
          example: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
          in: path
          name: message_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: OK
      summary: Mark message as unread
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const message = await client.messages.markAsUnread('1jNaXzB2RZX3LY8wVQnfCKyPnv7');

            console.log(message.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          message = client.messages.mark_as_unread(
              "message_id",
          )
          print(message.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            message, err := client.Messages.MarkAsUnread(context.TODO(), "1jNaXzB2RZX3LY8wVQnfCKyPnv7")
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", message.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.Message;
          import app.knock.api.models.messages.MessageMarkAsUnreadParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MessageMarkAsUnreadParams params = MessageMarkAsUnreadParams.builder()
                      .messageId("1jNaXzB2RZX3LY8wVQnfCKyPnv7")
                      .build();
                  Message message = client.messages().markAsUnread(params);
              }
          }
  /v1/providers/ms-teams/{channel_id}/auth_check:
    get:
      callbacks: {}
      description: Check if a connection to Microsoft Teams has been authorized for a given Microsoft Teams tenant object
      operationId: msTeamsProviderAuthCheck
      parameters:
        - description: The ID of the Knock Microsoft Teams channel to check
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: A JSON encoded string containing the Microsoft Teams tenant object reference
          example: '{"collection":"projects","object_id":"project_123"}'
          in: query
          name: ms_teams_tenant_object
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MsTeamsAuthCheckResponse'
          description: OK
      summary: Check auth
      tags:
        - Providers
        - Microsoft Teams
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.providers.msTeams.checkAuth('channel_id', {
              ms_teams_tenant_object: 'ms_teams_tenant_object',
            });

            console.log(response.connection);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          response = client.providers.ms_teams.check_auth(
              channel_id="channel_id",
              ms_teams_tenant_object="ms_teams_tenant_object",
          )
          print(response.connection)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            response, err := client.Providers.MsTeams.CheckAuth(
              context.TODO(),
              "channel_id",
              knock.ProviderMsTeamCheckAuthParams{
                MsTeamsTenantObject: knock.F("ms_teams_tenant_object"),
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", response.Connection)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.providers.msteams.MsTeamCheckAuthParams;
          import app.knock.api.models.providers.msteams.MsTeamCheckAuthResponse;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MsTeamCheckAuthParams params = MsTeamCheckAuthParams.builder()
                      .channelId("channel_id")
                      .msTeamsTenantObject("ms_teams_tenant_object")
                      .build();
                  MsTeamCheckAuthResponse response = client.providers().msTeams().checkAuth(params);
              }
          }
  /v1/messages/{message_id}/seen:
    delete:
      callbacks: {}
      operationId: markMessageUnseen
      parameters:
        - description: The message ID
          example: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
          in: path
          name: message_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: OK
      summary: Mark message as unseen
      tags:
        - Messages
    put:
      callbacks: {}
      operationId: markMessageSeen
      parameters:
        - description: The message ID
          example: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
          in: path
          name: message_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: OK
      summary: Mark message as seen
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const message = await client.messages.markAsSeen('1jNaXzB2RZX3LY8wVQnfCKyPnv7');

            console.log(message.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          message = client.messages.mark_as_seen(
              "message_id",
          )
          print(message.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            message, err := client.Messages.MarkAsSeen(context.TODO(), "1jNaXzB2RZX3LY8wVQnfCKyPnv7")
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", message.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.Message;
          import app.knock.api.models.messages.MessageMarkAsSeenParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MessageMarkAsSeenParams params = MessageMarkAsSeenParams.builder()
                      .messageId("1jNaXzB2RZX3LY8wVQnfCKyPnv7")
                      .build();
                  Message message = client.messages().markAsSeen(params);
              }
          }
  /v1/users/{user_id}/channel_data/{channel_id}:
    delete:
      callbacks: {}
      operationId: unsetUserChannelData
      parameters:
        - description: The user ID
          in: path
          name: user_id
          required: true
          schema:
            type: string
        - description: The channel ID
          in: path
          name: channel_id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyContentResponse'
          description: No Content
      summary: Unset channel data
      tags:
        - Channel data
        - Users
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.users.unsetChannelData('user_id', '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e');

            console.log(response);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          response = client.users.unset_channel_data(
              user_id="user_id",
              channel_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
          )
          print(response)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            response, err := client.Users.UnsetChannelData(
              context.TODO(),
              "user_id",
              "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", response)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.users.UserUnsetChannelDataParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  UserUnsetChannelDataParams params = UserUnsetChannelDataParams.builder()
                      .userId("user_id")
                      .channelId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                      .build();
                  String response = client.users().unsetChannelData(params);
              }
          }
    get:
      callbacks: {}
      operationId: getUserChannelData
      parameters:
        - description: The user ID
          in: path
          name: user_id
          required: true
          schema:
            type: string
        - description: The channel ID
          in: path
          name: channel_id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelData'
          description: OK
      summary: Get channel data
      tags:
        - Channel data
        - Users
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const channelData = await client.users.getChannelData('user_id', '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e');

            console.log(channelData.channel_id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          channel_data = client.users.get_channel_data(
              user_id="user_id",
              channel_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
          )
          print(channel_data.channel_id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            channelData, err := client.Users.GetChannelData(
              context.TODO(),
              "user_id",
              "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", channelData.ChannelID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.recipients.channeldata.ChannelData;
          import app.knock.api.models.users.UserGetChannelDataParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  UserGetChannelDataParams params = UserGetChannelDataParams.builder()
                      .userId("user_id")
                      .channelId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                      .build();
                  ChannelData channelData = client.users().getChannelData(params);
              }
          }
    put:
      callbacks: {}
      operationId: setUserChannelData
      parameters:
        - description: The user ID
          in: path
          name: user_id
          required: true
          schema:
            type: string
        - description: The channel ID
          in: path
          name: channel_id
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelDataRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelData'
          description: OK
      summary: Set channel data
      tags:
        - Channel data
        - Users
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const channelData = await client.users.setChannelData('user_id', '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e', {
              data: { tokens: ['push_token_1'] },
            });

            console.log(channelData.channel_id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          channel_data = client.users.set_channel_data(
              user_id="user_id",
              channel_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
              data={
                  "tokens": ["push_token_1"]
              },
          )
          print(channel_data.channel_id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            channelData, err := client.Users.SetChannelData(
              context.TODO(),
              "user_id",
              "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
              knock.UserSetChannelDataParams{
                ChannelDataRequest: knock.ChannelDataRequestParam{
                  Data: knock.F[knock.ChannelDataRequestDataUnionParam](knock.PushChannelDataParam{
                    Tokens: knock.F([]string{"push_token_1"}),
                  }),
                },
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", channelData.ChannelID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.recipients.channeldata.ChannelData;
          import app.knock.api.models.recipients.channeldata.ChannelDataRequest;
          import app.knock.api.models.recipients.channeldata.PushChannelData;
          import app.knock.api.models.users.UserSetChannelDataParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  UserSetChannelDataParams params = UserSetChannelDataParams.builder()
                      .userId("user_id")
                      .channelId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                      .channelDataRequest(ChannelDataRequest.builder()
                          .data(PushChannelData.builder()
                              .addToken("push_token_1")
                              .build())
                          .build())
                      .build();
                  ChannelData channelData = client.users().setChannelData(params);
              }
          }
  /v1/messages/{message_id}/events:
    get:
      callbacks: {}
      operationId: listMessageEvents
      parameters:
        - description: The ID of the message to fetch events for
          in: path
          name: message_id
          required: true
          schema:
            type: string
        - description: The cursor to fetch entries after
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The page size to fetch
          in: query
          name: page_size
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessageEventsResponse'
          description: OK
      summary: List events
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const messageEvent of client.messages.listEvents('message_id')) {
              console.log(messageEvent.id);
            }
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          page = client.messages.list_events(
              message_id="message_id",
          )
          page = page.entries[0]
          print(page.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            page, err := client.Messages.ListEvents(
              context.TODO(),
              "message_id",
              knock.MessageListEventsParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", page)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.MessageListEventsPage;
          import app.knock.api.models.messages.MessageListEventsParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MessageListEventsParams params = MessageListEventsParams.builder()
                      .messageId("message_id")
                      .build();
                  MessageListEventsPage page = client.messages().listEvents(params);
              }
          }
  /v1/providers/slack/{channel_id}/auth_check:
    get:
      callbacks: {}
      description: Check if a Slack channel is authenticated
      operationId: slackProviderAuthCheck
      parameters:
        - description: The ID of the Knock Slack channel to check
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: A JSON encoded string containing the access token object reference
          example: '{"collection":"projects","object_id":"project_123"}'
          in: query
          name: access_token_object
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlackAuthCheckResponse'
          description: OK
      summary: Check auth
      tags:
        - Providers
        - Slack
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.providers.slack.checkAuth('channel_id', {
              access_token_object: 'access_token_object',
            });

            console.log(response.connection);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          response = client.providers.slack.check_auth(
              channel_id="channel_id",
              access_token_object="access_token_object",
          )
          print(response.connection)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            response, err := client.Providers.Slack.CheckAuth(
              context.TODO(),
              "channel_id",
              knock.ProviderSlackCheckAuthParams{
                AccessTokenObject: knock.F("access_token_object"),
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", response.Connection)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.providers.slack.SlackCheckAuthParams;
          import app.knock.api.models.providers.slack.SlackCheckAuthResponse;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  SlackCheckAuthParams params = SlackCheckAuthParams.builder()
                      .channelId("channel_id")
                      .accessTokenObject("access_token_object")
                      .build();
                  SlackCheckAuthResponse response = client.providers().slack().checkAuth(params);
              }
          }
  /v1/tenants:
    get:
      callbacks: {}
      operationId: listTenants
      parameters:
        - description: The cursor to fetch entries after
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The page size to fetch
          in: query
          name: page_size
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTenantsResponse'
          description: OK
      summary: List tenants
      tags:
        - Tenants
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const tenant of client.tenants.list()) {
              console.log(tenant.id);
            }
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          page = client.tenants.list()
          page = page.entries[0]
          print(page.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            page, err := client.Tenants.List(context.TODO(), knock.TenantListParams{

            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", page)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.tenants.TenantListPage;
          import app.knock.api.models.tenants.TenantListParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  TenantListPage page = client.tenants().list();
              }
          }
  /v1/messages/batch/seen:
    post:
      callbacks: {}
      operationId: batchMarkMessagesAsSeen
      parameters:
        - description: The message IDs to update
          in: body
          name: message_ids
          required: true
          schema:
            items:
              format: uuid
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The list of messages that were updated
                example:
                  - actors:
                      - user_123
                    archived_at: null
                    channel_id: 123e4567-e89b-12d3-a456-426614174000
                    clicked_at: null
                    data:
                      foo: bar
                    engagement_statuses:
                      - read
                      - seen
                    id: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
                    inserted_at: '2021-01-01T00:00:00Z'
                    interacted_at: null
                    link_clicked_at: null
                    metadata:
                      external_id: 123e4567-e89b-12d3-a456-426614174000
                    read_at: null
                    recipient: user_123
                    scheduled_at: null
                    seen_at: null
                    source:
                      __typename: NotificationSource
                      categories:
                        - collaboration
                      key: comment-created
                      version_id: 123e4567-e89b-12d3-a456-426614174000
                    status: sent
                    tenant: tenant_123
                    updated_at: '2021-01-01T00:00:00Z'
                    workflow: comment-created
                items:
                  $ref: '#/components/schemas/Message'
                title: BatchListMessagesResponse
                type: array
          description: OK
      summary: Mark messages as seen
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const messages = await client.messages.batch.markAsSeen({
              message_ids: ['182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e'],
            });

            console.log(messages);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          messages = client.messages.batch.mark_as_seen(
              message_ids=["182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"],
          )
          print(messages)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            messages, err := client.Messages.Batch.MarkAsSeen(context.TODO(), knock.MessageBatchMarkAsSeenParams{
              MessageIDs: knock.F([]string{"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"}),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", messages)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.Message;
          import app.knock.api.models.messages.batch.BatchMarkAsSeenParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  List<Message> messages = client.messages().batch().markAsSeen();
              }
          }
  /v1/objects/{collection}/{object_id}/preferences/{preference_set_id}/channel_types/{type}:
    put:
      callbacks: {}
      deprecated: true
      operationId: updateObjectPreferenceChannelType
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSet'
          description: OK
      summary: Update a channel type preference
      tags:
        - Objects
        - Preferences
  /v1/messages/batch/unseen:
    post:
      callbacks: {}
      operationId: batchMarkMessagesAsUnseen
      parameters:
        - description: The message IDs to update
          in: body
          name: message_ids
          required: true
          schema:
            items:
              format: uuid
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The list of messages that were updated
                example:
                  - actors:
                      - user_123
                    archived_at: null
                    channel_id: 123e4567-e89b-12d3-a456-426614174000
                    clicked_at: null
                    data:
                      foo: bar
                    engagement_statuses:
                      - read
                      - seen
                    id: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
                    inserted_at: '2021-01-01T00:00:00Z'
                    interacted_at: null
                    link_clicked_at: null
                    metadata:
                      external_id: 123e4567-e89b-12d3-a456-426614174000
                    read_at: null
                    recipient: user_123
                    scheduled_at: null
                    seen_at: null
                    source:
                      __typename: NotificationSource
                      categories:
                        - collaboration
                      key: comment-created
                      version_id: 123e4567-e89b-12d3-a456-426614174000
                    status: sent
                    tenant: tenant_123
                    updated_at: '2021-01-01T00:00:00Z'
                    workflow: comment-created
                items:
                  $ref: '#/components/schemas/Message'
                title: BatchListMessagesResponse
                type: array
          description: OK
      summary: Mark messages as unseen
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const messages = await client.messages.batch.markAsUnseen({
              message_ids: ['182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e'],
            });

            console.log(messages);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          messages = client.messages.batch.mark_as_unseen(
              message_ids=["182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"],
          )
          print(messages)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            messages, err := client.Messages.Batch.MarkAsUnseen(context.TODO(), knock.MessageBatchMarkAsUnseenParams{
              MessageIDs: knock.F([]string{"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"}),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", messages)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.Message;
          import app.knock.api.models.messages.batch.BatchMarkAsUnseenParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  List<Message> messages = client.messages().batch().markAsUnseen();
              }
          }
  /v1/users/{user_id}/merge:
    post:
      callbacks: {}
      description: >-
        Merge two users together, where the user specified with the `from_user_id` param will be merged into
        the user specified by `user_id`.
      operationId: mergeUser
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeUserRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
      summary: Merge users
      tags:
        - Users
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const user = await client.users.merge('user_id', { from_user_id: 'user_1' });

            console.log(user.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          user = client.users.merge(
              user_id="user_id",
              from_user_id="user_1",
          )
          print(user.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            user, err := client.Users.Merge(
              context.TODO(),
              "user_id",
              knock.UserMergeParams{
                FromUserID: knock.F("user_1"),
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", user.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.users.User;
          import app.knock.api.models.users.UserMergeParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  UserMergeParams params = UserMergeParams.builder()
                      .userId("user_id")
                      .fromUserId("user_1")
                      .build();
                  User user = client.users().merge(params);
              }
          }
  /v1/objects/{collection}/{object_id}/preferences:
    get:
      callbacks: {}
      operationId: listObjectPreferenceSets
      parameters:
        - description: Object ID
          in: path
          name: object_id
          required: true
          schema:
            type: string
        - description: Collection
          in: path
          name: collection
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: A list of preference sets for the object
                example:
                  - __typename: PreferenceSet
                    categories:
                      marketing: false
                      transactional:
                        channel_types:
                          email: false
                    channel_types:
                      email: true
                      push: false
                      sms:
                        conditions:
                          - argument: US
                            operator: equal_to
                            variable: recipient.country_code
                    id: default
                    workflows: null
                items:
                  $ref: '#/components/schemas/PreferenceSet'
                title: ListObjectPreferenceSetsResponse
                type: array
          description: OK
      summary: List preference sets
      tags:
        - Objects
        - Preferences
  /v1/messages/{message_id}/read:
    delete:
      callbacks: {}
      operationId: markMessageUnread
      parameters:
        - description: The message ID
          example: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
          in: path
          name: message_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: OK
      summary: Mark message as unread
      tags:
        - Messages
    put:
      callbacks: {}
      operationId: markMessageRead
      parameters:
        - description: The message ID
          example: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
          in: path
          name: message_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: OK
      summary: Mark message as read
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const message = await client.messages.markAsRead('1jNaXzB2RZX3LY8wVQnfCKyPnv7');

            console.log(message.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          message = client.messages.mark_as_read(
              "message_id",
          )
          print(message.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            message, err := client.Messages.MarkAsRead(context.TODO(), "1jNaXzB2RZX3LY8wVQnfCKyPnv7")
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", message.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.Message;
          import app.knock.api.models.messages.MessageMarkAsReadParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MessageMarkAsReadParams params = MessageMarkAsReadParams.builder()
                      .messageId("1jNaXzB2RZX3LY8wVQnfCKyPnv7")
                      .build();
                  Message message = client.messages().markAsRead(params);
              }
          }
  /v1/users/bulk/preferences:
    post:
      callbacks: {}
      operationId: bulkSetUserPreferences
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkSetUserPreferencesRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperation'
          description: OK
      summary: Bulk set preferences
      tags:
        - Users
        - Bulk operations
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const bulkOperation = await client.users.bulk.setPreferences({
              preferences: {},
              user_ids: ['user_1', 'user_2'],
            });

            console.log(bulkOperation.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          bulk_operation = client.users.bulk.set_preferences(
              preferences={},
              user_ids=["user_1", "user_2"],
          )
          print(bulk_operation.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            bulkOperation, err := client.Users.Bulk.SetPreferences(context.TODO(), knock.UserBulkSetPreferencesParams{
              Preferences: knock.F(knock.PreferenceSetRequestParam{

              }),
              UserIDs: knock.F([]string{"user_1", "user_2"}),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", bulkOperation.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.bulkoperations.BulkOperation;
          import app.knock.api.models.recipients.preferences.PreferenceSetRequest;
          import app.knock.api.models.users.bulk.BulkSetPreferencesParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  BulkSetPreferencesParams params = BulkSetPreferencesParams.builder()
                      .preferences(PreferenceSetRequest.builder().build())
                      .addUserId("user_1")
                      .addUserId("user_2")
                      .build();
                  BulkOperation bulkOperation = client.users().bulk().setPreferences(params);
              }
          }
  /v1/schedules:
    delete:
      callbacks: {}
      operationId: deleteSchedules
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSchedulesRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchedulesResponse'
          description: OK
      summary: Delete schedules
      tags:
        - Schedules
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const schedules = await client.schedules.delete({ schedule_ids: ['123e4567-e89b-12d3-a456-426614174000'] });

            console.log(schedules);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          schedules = client.schedules.delete(
              schedule_ids=["123e4567-e89b-12d3-a456-426614174000"],
          )
          print(schedules)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            schedules, err := client.Schedules.Delete(context.TODO(), knock.ScheduleDeleteParams{
              ScheduleIDs: knock.F([]string{"123e4567-e89b-12d3-a456-426614174000"}),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", schedules)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.schedules.Schedule;
          import app.knock.api.models.schedules.ScheduleDeleteParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ScheduleDeleteParams params = ScheduleDeleteParams.builder()
                      .addScheduleId("123e4567-e89b-12d3-a456-426614174000")
                      .build();
                  List<Schedule> schedules = client.schedules().delete(params);
              }
          }
    get:
      callbacks: {}
      operationId: listSchedules
      parameters:
        - description: Filter by workflow
          in: query
          name: workflow
          required: true
          schema:
            type: string
        - description: Filter by recipient
          in: query
          name: recipients[]
          required: false
          schema:
            items:
              $ref: '#/components/schemas/RecipientReference'
            type: array
        - description: Filter by tenant
          in: query
          name: tenant
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries after
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The page size to fetch
          in: query
          name: page_size
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSchedulesResponse'
          description: OK
      summary: List schedules
      tags:
        - Schedules
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const schedule of client.schedules.list({ workflow: 'workflow' })) {
              console.log(schedule.id);
            }
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          page = client.schedules.list(
              workflow="workflow",
          )
          page = page.entries[0]
          print(page.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            page, err := client.Schedules.List(context.TODO(), knock.ScheduleListParams{
              Workflow: knock.F("workflow"),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", page)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.schedules.ScheduleListPage;
          import app.knock.api.models.schedules.ScheduleListParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ScheduleListParams params = ScheduleListParams.builder()
                      .workflow("workflow")
                      .build();
                  ScheduleListPage page = client.schedules().list(params);
              }
          }
    post:
      callbacks: {}
      operationId: createSchedules
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSchedulesRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchedulesResponse'
          description: OK
      summary: Create schedules
      tags:
        - Schedules
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const schedules = await client.schedules.create({
              recipients: ['user_123'],
              repeats: [{ __typename: 'ScheduleRepeat', frequency: 'daily' }],
              workflow: 'comment-created',
            });

            console.log(schedules);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          schedules = client.schedules.create(
              recipients=["user_123"],
              repeats=[{
                  "_typename": "ScheduleRepeat",
                  "frequency": "daily",
              }],
              workflow="comment-created",
          )
          print(schedules)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
            "github.com/stainless-sdks/knock-go/shared"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            schedules, err := client.Schedules.New(context.TODO(), knock.ScheduleNewParams{
              Recipients: knock.F([]knock.ScheduleNewParamsRecipientUnion{shared.UnionString("user_123")}),
              Repeats: knock.F([]knock.ScheduleRepeatRuleParam{knock.ScheduleRepeatRuleParam{
                Typename: knock.F("ScheduleRepeat"),
                Frequency: knock.F(knock.ScheduleRepeatRuleFrequencyDaily),
              }}),
              Workflow: knock.F("comment-created"),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", schedules)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.schedules.Schedule;
          import app.knock.api.models.schedules.ScheduleCreateParams;
          import app.knock.api.models.schedules.ScheduleRepeatRule;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ScheduleCreateParams params = ScheduleCreateParams.builder()
                      .addRecipient("user_123")
                      .addRepeat(ScheduleRepeatRule.builder()
                          ._typename("ScheduleRepeat")
                          .frequency(ScheduleRepeatRule.Frequency.DAILY)
                          .build())
                      .workflow("comment-created")
                      .build();
                  List<Schedule> schedules = client.schedules().create(params);
              }
          }
    put:
      callbacks: {}
      operationId: updateSchedules
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSchedulesRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchedulesResponse'
          description: OK
      summary: Update schedules
      tags:
        - Schedules
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const schedules = await client.schedules.update({ schedule_ids: ['123e4567-e89b-12d3-a456-426614174000'] });

            console.log(schedules);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          schedules = client.schedules.update(
              schedule_ids=["123e4567-e89b-12d3-a456-426614174000"],
          )
          print(schedules)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            schedules, err := client.Schedules.Update(context.TODO(), knock.ScheduleUpdateParams{
              ScheduleIDs: knock.F([]string{"123e4567-e89b-12d3-a456-426614174000"}),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", schedules)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.schedules.Schedule;
          import app.knock.api.models.schedules.ScheduleUpdateParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ScheduleUpdateParams params = ScheduleUpdateParams.builder()
                      .addScheduleId("123e4567-e89b-12d3-a456-426614174000")
                      .build();
                  List<Schedule> schedules = client.schedules().update(params);
              }
          }
  /v1/objects/{collection}/bulk/subscriptions/add:
    post:
      callbacks: {}
      description: >-
        Add subscriptions for a set of objects in a single collection. If a subscription already exists, it
        will be updated.
      operationId: bulkAddSubscriptions
      parameters:
        - description: The collection to add subscriptions for
          example: projects
          in: path
          name: collection
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpsertSubscriptionsRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperation'
          description: OK
      summary: Bulk add subscriptions
      tags:
        - Objects
        - Subscriptions
        - Bulk operations
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const bulkOperation = await client.objects.bulk.addSubscriptions('projects', {
              subscriptions: [{ id: 'project-1', recipients: [{ id: 'user_1' }] }],
            });

            console.log(bulkOperation.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          bulk_operation = client.objects.bulk.add_subscriptions(
              collection="projects",
              subscriptions=[{
                  "id": "project-1",
                  "recipients": [{
                      "id": "user_1"
                  }],
              }],
          )
          print(bulk_operation.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            bulkOperation, err := client.Objects.Bulk.AddSubscriptions(
              context.TODO(),
              "projects",
              knock.ObjectBulkAddSubscriptionsParams{
                Subscriptions: knock.F([]knock.ObjectBulkAddSubscriptionsParamsSubscription{knock.ObjectBulkAddSubscriptionsParamsSubscription{
                  ID: knock.F("project-1"),
                  Recipients: knock.F([]knock.RecipientRequestUnionParam{knock.InlineIdentifyUserRequestParam{
                    ID: knock.F("user_1"),
                  }}),
                }}),
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", bulkOperation.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.bulkoperations.BulkOperation;
          import app.knock.api.models.objects.bulk.BulkAddSubscriptionsParams;
          import app.knock.api.models.users.InlineIdentifyUserRequest;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  BulkAddSubscriptionsParams params = BulkAddSubscriptionsParams.builder()
                      .collection("projects")
                      .addSubscription(BulkAddSubscriptionsParams.Subscription.builder()
                          .id("project-1")
                          .addRecipient(InlineIdentifyUserRequest.builder()
                              .id("user_1")
                              .build())
                          .build())
                      .build();
                  BulkOperation bulkOperation = client.objects().bulk().addSubscriptions(params);
              }
          }
  /v1/messages/batch/content:
    get:
      callbacks: {}
      description: Get the contents of multiple messages in a single request.
      operationId: batchGetMessageContents
      parameters:
        - description: The IDs of the messages to fetch contents of
          in: query
          name: message_ids[]
          required: true
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                description: A list of message contents
                example:
                  - __typename: MessageContent
                    data:
                      __typename: MessageSmsContent
                      body: Hello, world!
                      to: user_123
                    inserted_at: '2021-01-01T00:00:00Z'
                    message_id: 2FVHPWxRqNuXQ9krvNP5A6Z4qXe
                items:
                  $ref: '#/components/schemas/MessageContents'
                title: BatchGetMessageContentsResponse
                type: array
          description: OK
      summary: Batch get message contents
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.messages.batch.getContent({ message_ids: ['string'] });

            console.log(response);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          response = client.messages.batch.get_content(
              message_ids=["string"],
          )
          print(response)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            response, err := client.Messages.Batch.GetContent(context.TODO(), knock.MessageBatchGetContentParams{
              MessageIDs: knock.F([]string{"string"}),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", response)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.batch;
          import app.knock.api.models.messages.batch.BatchGetContentParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  BatchGetContentParams params = BatchGetContentParams.builder()
                      .addMessageId("string")
                      .build();
                  List<MessageContent> response = client.messages().batch().getContent(params);
              }
          }
  /v1/users/{user_id}/preferences/{preference_set_id}/workflows/{key}:
    put:
      callbacks: {}
      deprecated: true
      operationId: updateUserPreferenceWorkflow
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSet'
          description: OK
      summary: Update workflow in preference set
      tags:
        - Users
        - Preferences
  /v1/users/bulk/identify:
    post:
      callbacks: {}
      operationId: bulkIdentifyUsers
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkIdentifyUsersRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperation'
          description: OK
      summary: Bulk identifies users
      tags:
        - Users
        - Bulk operations
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const bulkOperation = await client.users.bulk.identify({ users: [{ id: 'user_1' }] });

            console.log(bulkOperation.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          bulk_operation = client.users.bulk.identify(
              users=[{
                  "id": "user_1"
              }],
          )
          print(bulk_operation.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            bulkOperation, err := client.Users.Bulk.Identify(context.TODO(), knock.UserBulkIdentifyParams{
              Users: knock.F([]knock.InlineIdentifyUserRequestParam{knock.InlineIdentifyUserRequestParam{
                ID: knock.F("user_1"),
              }}),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", bulkOperation.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.bulkoperations.BulkOperation;
          import app.knock.api.models.users.InlineIdentifyUserRequest;
          import app.knock.api.models.users.bulk.BulkIdentifyParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  BulkIdentifyParams params = BulkIdentifyParams.builder()
                      .addUser(InlineIdentifyUserRequest.builder()
                          .id("user_1")
                          .build())
                      .build();
                  BulkOperation bulkOperation = client.users().bulk().identify(params);
              }
          }
  /v1/messages/{message_id}/content:
    get:
      callbacks: {}
      description: >-
        Returns the fully rendered contents of a message, where the response depends on the channel the
        message was sent on.
      operationId: getMessageContents
      parameters:
        - description: The ID of the message to fetch contents of
          in: path
          name: message_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageContents'
          description: OK
      summary: Get message content
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.messages.getContent('message_id');

            console.log(response.message_id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          response = client.messages.get_content(
              "message_id",
          )
          print(response.message_id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            response, err := client.Messages.GetContent(context.TODO(), "message_id")
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", response.MessageID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.MessageGetContentParams;
          import app.knock.api.models.messages.MessageGetContentResponse;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MessageGetContentParams params = MessageGetContentParams.builder()
                      .messageId("message_id")
                      .build();
                  MessageGetContentResponse response = client.messages().getContent(params);
              }
          }
  /v1/users/{user_id}/preferences/{preference_set_id}/categories/{key}:
    put:
      callbacks: {}
      deprecated: true
      operationId: updateUserPreferenceCategory
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSet'
          description: OK
      summary: Update category in preference set
      tags:
        - Users
        - Preferences
  /v1/tenants/bulk/delete:
    post:
      callbacks: {}
      operationId: bulkDeleteTenants
      parameters:
        - description: The IDs of the tenants to delete
          in: query
          name: tenant_ids[]
          required: true
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperation'
          description: OK
      summary: Bulk delete tenants
      tags:
        - Tenants
        - Bulk operations
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const bulkOperation = await client.tenants.bulk.delete({ tenant_ids: ['string'] });

            console.log(bulkOperation.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          bulk_operation = client.tenants.bulk.delete(
              tenant_ids=["string"],
          )
          print(bulk_operation.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            bulkOperation, err := client.Tenants.Bulk.Delete(context.TODO(), knock.TenantBulkDeleteParams{
              TenantIDs: knock.F([]string{"string"}),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", bulkOperation.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.bulkoperations.BulkOperation;
          import app.knock.api.models.tenants.bulk.BulkDeleteParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  BulkDeleteParams params = BulkDeleteParams.builder()
                      .addTenantId("string")
                      .build();
                  BulkOperation bulkOperation = client.tenants().bulk().delete(params);
              }
          }
  /v1/objects/{collection}/{object_id}/preferences/{preference_set_id}/channel_types:
    put:
      callbacks: {}
      deprecated: true
      operationId: updateObjectPreferenceChannelTypes
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSet'
          description: OK
      summary: Update channel types in preference set
      tags:
        - Objects
        - Preferences
  /v1/objects/{collection}/{object_id}/preferences/{preference_set_id}:
    get:
      callbacks: {}
      operationId: getObjectPreferenceSet
      parameters:
        - description: Object ID
          in: path
          name: object_id
          required: true
          schema:
            type: string
        - description: Collection
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: Preference set ID
          in: path
          name: preference_set_id
          required: true
          schema:
            default: default
            example: default
            type: string
        - description: Tenant ID
          in: query
          name: tenant
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSet'
          description: OK
      summary: Get a preference set
      tags:
        - Objects
        - Preferences
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const preferenceSet = await client.objects.getPreferences('collection', 'object_id', 'default');

            console.log(preferenceSet.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          preference_set = client.objects.get_preferences(
              collection="collection",
              object_id="object_id",
              preference_set_id="default",
          )
          print(preference_set.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            preferenceSet, err := client.Objects.GetPreferences(
              context.TODO(),
              "collection",
              "object_id",
              "default",
              knock.ObjectGetPreferencesParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", preferenceSet.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.objects.ObjectGetPreferencesParams;
          import app.knock.api.models.recipients.preferences.PreferenceSet;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ObjectGetPreferencesParams params = ObjectGetPreferencesParams.builder()
                      .collection("collection")
                      .objectId("object_id")
                      .preferenceSetId("default")
                      .build();
                  PreferenceSet preferenceSet = client.objects().getPreferences(params);
              }
          }
    put:
      callbacks: {}
      operationId: updateObjectPreferenceSet
      parameters:
        - description: Object ID
          in: path
          name: object_id
          required: true
          schema:
            type: string
        - description: Collection
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: Preference set ID
          in: path
          name: preference_set_id
          required: true
          schema:
            default: default
            example: default
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreferenceSetRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSet'
          description: OK
      summary: Update a preference set
      tags:
        - Objects
        - Preferences
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const preferenceSet = await client.objects.setPreferences('collection', 'object_id', 'default');

            console.log(preferenceSet.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          preference_set = client.objects.set_preferences(
              collection="collection",
              object_id="object_id",
              preference_set_id="default",
          )
          print(preference_set.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            preferenceSet, err := client.Objects.SetPreferences(
              context.TODO(),
              "collection",
              "object_id",
              "default",
              knock.ObjectSetPreferencesParams{
                PreferenceSetRequest: knock.PreferenceSetRequestParam{

                },
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", preferenceSet.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.objects.ObjectSetPreferencesParams;
          import app.knock.api.models.recipients.preferences.PreferenceSet;
          import app.knock.api.models.recipients.preferences.PreferenceSetRequest;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ObjectSetPreferencesParams params = ObjectSetPreferencesParams.builder()
                      .collection("collection")
                      .objectId("object_id")
                      .preferenceSetId("default")
                      .preferenceSetRequest(PreferenceSetRequest.builder().build())
                      .build();
                  PreferenceSet preferenceSet = client.objects().setPreferences(params);
              }
          }
  /v1/messages/{message_id}/activities:
    get:
      callbacks: {}
      operationId: listMessageActivities
      parameters:
        - description: The ID of the message to fetch activities for
          in: path
          name: message_id
          required: true
          schema:
            type: string
        - description: The trigger data to filter activities by
          in: query
          name: trigger_data
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries after
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The page size to fetch
          in: query
          name: page_size
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListActivitiesResponse'
          description: OK
      summary: List activities
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const activity of client.messages.listActivities('message_id')) {
              console.log(activity.id);
            }
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          page = client.messages.list_activities(
              message_id="message_id",
          )
          page = page.items[0]
          print(page.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            page, err := client.Messages.ListActivities(
              context.TODO(),
              "message_id",
              knock.MessageListActivitiesParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", page)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.MessageListActivitiesPage;
          import app.knock.api.models.messages.MessageListActivitiesParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MessageListActivitiesParams params = MessageListActivitiesParams.builder()
                      .messageId("message_id")
                      .build();
                  MessageListActivitiesPage page = client.messages().listActivities(params);
              }
          }
  /v1/channels/{channel_id}/messages/bulk/{action}:
    post:
      callbacks: {}
      description: >-
        Bulk update messages for a specific channel. The channel is specified by the `channel_id` parameter.
        The action to perform is specified by the `action` parameter, where the action is a status change
        action (e.g. `archive`, `unarchive`).
      operationId: bulkUpdateMessagesForChannel
      parameters:
        - description: The ID of the channel to update messages for
          in: path
          name: channel_id
          required: true
          schema:
            format: uuid
            type: string
        - description: The action to perform on the messages
          in: path
          name: action
          required: true
          schema:
            enum:
              - seen
              - unseen
              - read
              - unread
              - archived
              - unarchived
              - interacted
              - archive
              - unarchive
              - delete
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpdateMessagesForChannelRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperation'
          description: OK
      summary: Bulk update messages
      tags:
        - Messages
        - Bulk operations
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const bulkOperation = await client.channels.bulk.updateMessageStatus(
              '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',
              'seen',
            );

            console.log(bulkOperation.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          bulk_operation = client.channels.bulk.update_message_status(
              channel_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
              action="seen",
          )
          print(bulk_operation.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            bulkOperation, err := client.Channels.Bulk.UpdateMessageStatus(
              context.TODO(),
              "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
              knock.ChannelBulkUpdateMessageStatusParamsActionSeen,
              knock.ChannelBulkUpdateMessageStatusParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", bulkOperation.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.bulkoperations.BulkOperation;
          import app.knock.api.models.channels.bulk.BulkUpdateMessageStatusParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  BulkUpdateMessageStatusParams params = BulkUpdateMessageStatusParams.builder()
                      .channelId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                      .action(BulkUpdateMessageStatusParams.Action.SEEN)
                      .build();
                  BulkOperation bulkOperation = client.channels().bulk().updateMessageStatus(params);
              }
          }
  /v1/users/{user_id}/feeds/{channel_id}:
    get:
      callbacks: {}
      description: Returns a paginated list of feed items for a user, including metadata about the feed.
      operationId: listUserInAppFeedItems
      parameters:
        - description: The user ID
          in: path
          name: user_id
          required: true
          schema:
            type: string
        - description: The channel ID
          in: path
          name: channel_id
          required: true
          schema:
            format: uuid
            type: string
        - description: The status of the feed items to return
          example: unread
          in: query
          name: status
          required: false
          schema:
            enum:
              - unread
              - read
              - unseen
              - seen
              - all
            type: string
        - description: The source of the feed items to return
          example: my_source
          in: query
          name: source
          required: false
          schema:
            type: string
        - description: The tenant of the feed items to return
          example: my_tenant
          in: query
          name: tenant
          required: false
          schema:
            type: string
        - description: Whether the feed items have a tenant
          example: true
          in: query
          name: has_tenant
          required: false
          schema:
            type: boolean
        - description: The workflow categories of the feed items to return
          example:
            - my_workflow_category
          in: query
          name: workflow_categories[]
          required: false
          schema:
            items:
              type: string
            type: array
        - description: The archived status of the feed items to return
          example: exclude
          in: query
          name: archived
          required: false
          schema:
            enum:
              - exclude
              - include
              - only
            type: string
        - description: The trigger data of the feed items to return (as a JSON string)
          example: '{ "key": "value" }'
          in: query
          name: trigger_data
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries after
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The page size to fetch
          in: query
          name: page_size
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInAppFeedResponse'
          description: OK
      summary: List feed items
      tags:
        - Feeds
        - Users
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const feedListItemsResponse of client.users.feeds.listItems(
              'user_id',
              '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',
            )) {
              console.log(feedListItemsResponse.id);
            }
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          page = client.users.feeds.list_items(
              user_id="user_id",
              channel_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
          )
          page = page.entries[0]
          print(page.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            page, err := client.Users.Feeds.ListItems(
              context.TODO(),
              "user_id",
              "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
              knock.UserFeedListItemsParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", page)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.users.feeds.FeedListItemsPage;
          import app.knock.api.models.users.feeds.FeedListItemsParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  FeedListItemsParams params = FeedListItemsParams.builder()
                      .userId("user_id")
                      .channelId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                      .build();
                  FeedListItemsPage page = client.users().feeds().listItems(params);
              }
          }
  /v1/objects/{collection}/{object_id}/channel_data/{channel_id}:
    delete:
      callbacks: {}
      operationId: unsetObjectChannelData
      parameters:
        - description: The object ID
          in: path
          name: object_id
          required: true
          schema:
            type: string
        - description: The collection
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: The channel ID
          in: path
          name: channel_id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyContentResponse'
          description: No Content
      summary: Unset channel data
      tags:
        - Channel data
        - Objects
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.objects.unsetChannelData(
              'collection',
              'object_id',
              '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',
            );

            console.log(response);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          response = client.objects.unset_channel_data(
              collection="collection",
              object_id="object_id",
              channel_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
          )
          print(response)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            response, err := client.Objects.UnsetChannelData(
              context.TODO(),
              "collection",
              "object_id",
              "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", response)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.objects.ObjectUnsetChannelDataParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ObjectUnsetChannelDataParams params = ObjectUnsetChannelDataParams.builder()
                      .collection("collection")
                      .objectId("object_id")
                      .channelId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                      .build();
                  String response = client.objects().unsetChannelData(params);
              }
          }
    get:
      callbacks: {}
      operationId: getObjectChannelData
      parameters:
        - description: The object ID
          in: path
          name: object_id
          required: true
          schema:
            type: string
        - description: The collection
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: The channel ID
          in: path
          name: channel_id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelData'
          description: OK
      summary: Get channel data
      tags:
        - Channel data
        - Objects
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const channelData = await client.objects.getChannelData(
              'collection',
              'object_id',
              '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',
            );

            console.log(channelData.channel_id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          channel_data = client.objects.get_channel_data(
              collection="collection",
              object_id="object_id",
              channel_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
          )
          print(channel_data.channel_id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            channelData, err := client.Objects.GetChannelData(
              context.TODO(),
              "collection",
              "object_id",
              "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", channelData.ChannelID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.objects.ObjectGetChannelDataParams;
          import app.knock.api.models.recipients.channeldata.ChannelData;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ObjectGetChannelDataParams params = ObjectGetChannelDataParams.builder()
                      .collection("collection")
                      .objectId("object_id")
                      .channelId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                      .build();
                  ChannelData channelData = client.objects().getChannelData(params);
              }
          }
    put:
      callbacks: {}
      operationId: setObjectChannelData
      parameters:
        - description: The object ID
          in: path
          name: object_id
          required: true
          schema:
            type: string
        - description: The collection
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: The channel ID
          in: path
          name: channel_id
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelDataRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelData'
          description: OK
      summary: Set channel data
      tags:
        - Channel data
        - Objects
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const channelData = await client.objects.setChannelData(
              'collection',
              'object_id',
              '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e',
              { data: { tokens: ['push_token_1'] } },
            );

            console.log(channelData.channel_id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          channel_data = client.objects.set_channel_data(
              collection="collection",
              object_id="object_id",
              channel_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
              data={
                  "tokens": ["push_token_1"]
              },
          )
          print(channel_data.channel_id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            channelData, err := client.Objects.SetChannelData(
              context.TODO(),
              "collection",
              "object_id",
              "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
              knock.ObjectSetChannelDataParams{
                ChannelDataRequest: knock.ChannelDataRequestParam{
                  Data: knock.F[knock.ChannelDataRequestDataUnionParam](knock.PushChannelDataParam{
                    Tokens: knock.F([]string{"push_token_1"}),
                  }),
                },
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", channelData.ChannelID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.objects.ObjectSetChannelDataParams;
          import app.knock.api.models.recipients.channeldata.ChannelData;
          import app.knock.api.models.recipients.channeldata.ChannelDataRequest;
          import app.knock.api.models.recipients.channeldata.PushChannelData;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ObjectSetChannelDataParams params = ObjectSetChannelDataParams.builder()
                      .collection("collection")
                      .objectId("object_id")
                      .channelId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                      .channelDataRequest(ChannelDataRequest.builder()
                          .data(PushChannelData.builder()
                              .addToken("push_token_1")
                              .build())
                          .build())
                      .build();
                  ChannelData channelData = client.objects().setChannelData(params);
              }
          }
  /v1/audiences/{key}/members:
    delete:
      callbacks: {}
      operationId: removeAudienceMembers
      parameters:
        - description: The key of the audience to remove members from
          in: path
          name: key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveAudienceMembersRequest'
        description: Params
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyContentResponse'
          description: No Content
      summary: Remove members
      tags:
        - Audiences
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.audiences.removeMembers('key', { members: [{ user: { id: 'user_1' } }] });

            console.log(response);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          response = client.audiences.remove_members(
              key="key",
              members=[{
                  "user": {
                      "id": "user_1"
                  }
              }],
          )
          print(response)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            response, err := client.Audiences.RemoveMembers(
              context.TODO(),
              "key",
              knock.AudienceRemoveMembersParams{
                Members: knock.F([]knock.AudienceRemoveMembersParamsMember{knock.AudienceRemoveMembersParamsMember{
                  User: knock.F(knock.InlineIdentifyUserRequestParam{
                    ID: knock.F("user_1"),
                  }),
                }}),
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", response)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.audiences.AudienceRemoveMembersParams;
          import app.knock.api.models.users.InlineIdentifyUserRequest;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  AudienceRemoveMembersParams params = AudienceRemoveMembersParams.builder()
                      .key("key")
                      .addMember(AudienceRemoveMembersParams.Member.builder()
                          .user(InlineIdentifyUserRequest.builder()
                              .id("user_1")
                              .build())
                          .build())
                      .build();
                  String response = client.audiences().removeMembers(params);
              }
          }
    get:
      callbacks: {}
      operationId: listAudienceMembers
      parameters:
        - description: The key of the audience to list members for
          in: path
          name: key
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAudienceMembersResponse'
          description: OK
      summary: List members
      tags:
        - Audiences
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.audiences.listMembers('key');

            console.log(response.entries);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          response = client.audiences.list_members(
              "key",
          )
          print(response.entries)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            response, err := client.Audiences.ListMembers(context.TODO(), "key")
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", response.Entries)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.audiences.AudienceListMembersParams;
          import app.knock.api.models.audiences.AudienceListMembersResponse;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  AudienceListMembersParams params = AudienceListMembersParams.builder()
                      .key("key")
                      .build();
                  AudienceListMembersResponse response = client.audiences().listMembers(params);
              }
          }
    post:
      callbacks: {}
      operationId: addAudienceMembers
      parameters:
        - description: The key of the audience to add members to
          in: path
          name: key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAudienceMembersRequest'
        description: Params
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyContentResponse'
          description: No Content
      summary: Add members
      tags:
        - Audiences
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.audiences.addMembers('key', { members: [{ user: { id: 'user_1' } }] });

            console.log(response);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          response = client.audiences.add_members(
              key="key",
              members=[{
                  "user": {
                      "id": "user_1"
                  }
              }],
          )
          print(response)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            response, err := client.Audiences.AddMembers(
              context.TODO(),
              "key",
              knock.AudienceAddMembersParams{
                Members: knock.F([]knock.AudienceAddMembersParamsMember{knock.AudienceAddMembersParamsMember{
                  User: knock.F(knock.InlineIdentifyUserRequestParam{
                    ID: knock.F("user_1"),
                  }),
                }}),
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", response)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.audiences.AudienceAddMembersParams;
          import app.knock.api.models.users.InlineIdentifyUserRequest;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  AudienceAddMembersParams params = AudienceAddMembersParams.builder()
                      .key("key")
                      .addMember(AudienceAddMembersParams.Member.builder()
                          .user(InlineIdentifyUserRequest.builder()
                              .id("user_1")
                              .build())
                          .build())
                      .build();
                  String response = client.audiences().addMembers(params);
              }
          }
  /v1/providers/ms-teams/{channel_id}/channels:
    get:
      callbacks: {}
      description: >-
        List the Microsoft Teams channels within a team. By default, archived and private channels are
        excluded from the results.
      operationId: listChannelsForMsTeamsProvider
      parameters:
        - description: The ID of the Knock Microsoft Teams channel to get channels for
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: A JSON encoded string containing the Microsoft Teams tenant object reference
          example: '{"collection":"projects","object_id":"project_123"}'
          in: query
          name: ms_teams_tenant_object
          required: true
          schema:
            type: string
        - description: The ID of the Microsoft Teams team to list channels from
          in: query
          name: team_id
          required: true
          schema:
            type: string
        - description: >-
            [OData param](https://learn.microsoft.com/en-us/graph/query-parameters) passed to the Microsoft
            Graph API to filter channels
          example: displayName eq 'General'
          in: query
          name: query_options.$filter
          required: false
          schema:
            type: string
        - description: >-
            [OData param](https://learn.microsoft.com/en-us/graph/query-parameters) passed to the Microsoft
            Graph API to select fields on a channel
          example: id,displayName,description
          in: query
          name: query_options.$select
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelsForMsTeamsProviderResponse'
          description: OK
      summary: List channels
      tags:
        - Providers
        - Microsoft Teams
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.providers.msTeams.listChannels('channel_id', {
              ms_teams_tenant_object: 'ms_teams_tenant_object',
              team_id: 'team_id',
            });

            console.log(response.ms_teams_channels);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          response = client.providers.ms_teams.list_channels(
              channel_id="channel_id",
              ms_teams_tenant_object="ms_teams_tenant_object",
              team_id="team_id",
          )
          print(response.ms_teams_channels)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            response, err := client.Providers.MsTeams.ListChannels(
              context.TODO(),
              "channel_id",
              knock.ProviderMsTeamListChannelsParams{
                MsTeamsTenantObject: knock.F("ms_teams_tenant_object"),
                TeamID: knock.F("team_id"),
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", response.MsTeamsChannels)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.providers.msteams.MsTeamListChannelsParams;
          import app.knock.api.models.providers.msteams.MsTeamListChannelsResponse;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MsTeamListChannelsParams params = MsTeamListChannelsParams.builder()
                      .channelId("channel_id")
                      .msTeamsTenantObject("ms_teams_tenant_object")
                      .teamId("team_id")
                      .build();
                  MsTeamListChannelsResponse response = client.providers().msTeams().listChannels(params);
              }
          }
  /v1/users/bulk/delete:
    post:
      callbacks: {}
      operationId: bulkDeleteUsers
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteUsersRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperation'
          description: OK
      summary: Bulk delete users
      tags:
        - Users
        - Bulk operations
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const bulkOperation = await client.users.bulk.delete({ user_ids: ['user_1', 'user_2'] });

            console.log(bulkOperation.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          bulk_operation = client.users.bulk.delete(
              user_ids=["user_1", "user_2"],
          )
          print(bulk_operation.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            bulkOperation, err := client.Users.Bulk.Delete(context.TODO(), knock.UserBulkDeleteParams{
              UserIDs: knock.F([]string{"user_1", "user_2"}),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", bulkOperation.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.bulkoperations.BulkOperation;
          import app.knock.api.models.users.bulk.BulkDeleteParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  BulkDeleteParams params = BulkDeleteParams.builder()
                      .addUserId("user_1")
                      .addUserId("user_2")
                      .build();
                  BulkOperation bulkOperation = client.users().bulk().delete(params);
              }
          }
  /v1/objects/{collection}/{object_id}/preferences/{preference_set_id}/workflows/{key}:
    put:
      callbacks: {}
      deprecated: true
      operationId: updateObjectPreferenceWorkflow
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSet'
          description: OK
      summary: Update a workflow preference
      tags:
        - Objects
        - Preferences
  /v1/providers/slack/{channel_id}/revoke_access:
    put:
      callbacks: {}
      description: Revoke access for a Slack channel
      operationId: slackProviderRevokeAccess
      parameters:
        - description: The ID of the Knock Slack channel to revoke access for
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: A JSON encoded string containing the access token object reference
          example: '{"collection":"projects","object_id":"project_123"}'
          in: query
          name: access_token_object
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                example: ok
                type: string
          description: OK
      summary: Revoke access
      tags:
        - Providers
        - Slack
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.providers.slack.revokeAccess('channel_id', {
              access_token_object: 'access_token_object',
            });

            console.log(response);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          response = client.providers.slack.revoke_access(
              channel_id="channel_id",
              access_token_object="access_token_object",
          )
          print(response)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            response, err := client.Providers.Slack.RevokeAccess(
              context.TODO(),
              "channel_id",
              knock.ProviderSlackRevokeAccessParams{
                AccessTokenObject: knock.F("access_token_object"),
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", response)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.providers.slack.SlackRevokeAccessParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  SlackRevokeAccessParams params = SlackRevokeAccessParams.builder()
                      .channelId("channel_id")
                      .accessTokenObject("access_token_object")
                      .build();
                  String response = client.providers().slack().revokeAccess(params);
              }
          }
  /v1/messages/batch/unread:
    post:
      callbacks: {}
      operationId: batchMarkMessagesAsUnread
      parameters:
        - description: The message IDs to update
          in: body
          name: message_ids
          required: true
          schema:
            items:
              format: uuid
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The list of messages that were updated
                example:
                  - actors:
                      - user_123
                    archived_at: null
                    channel_id: 123e4567-e89b-12d3-a456-426614174000
                    clicked_at: null
                    data:
                      foo: bar
                    engagement_statuses:
                      - read
                      - seen
                    id: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
                    inserted_at: '2021-01-01T00:00:00Z'
                    interacted_at: null
                    link_clicked_at: null
                    metadata:
                      external_id: 123e4567-e89b-12d3-a456-426614174000
                    read_at: null
                    recipient: user_123
                    scheduled_at: null
                    seen_at: null
                    source:
                      __typename: NotificationSource
                      categories:
                        - collaboration
                      key: comment-created
                      version_id: 123e4567-e89b-12d3-a456-426614174000
                    status: sent
                    tenant: tenant_123
                    updated_at: '2021-01-01T00:00:00Z'
                    workflow: comment-created
                items:
                  $ref: '#/components/schemas/Message'
                title: BatchListMessagesResponse
                type: array
          description: OK
      summary: Mark messages as unread
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const messages = await client.messages.batch.markAsUnread({
              message_ids: ['182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e'],
            });

            console.log(messages);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          messages = client.messages.batch.mark_as_unread(
              message_ids=["182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"],
          )
          print(messages)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            messages, err := client.Messages.Batch.MarkAsUnread(context.TODO(), knock.MessageBatchMarkAsUnreadParams{
              MessageIDs: knock.F([]string{"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"}),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", messages)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.Message;
          import app.knock.api.models.messages.batch.BatchMarkAsUnreadParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  List<Message> messages = client.messages().batch().markAsUnread();
              }
          }
  /v1/objects/{collection}:
    get:
      callbacks: {}
      operationId: listObjects
      parameters:
        - description: The cursor to fetch entries after
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The page size to fetch
          in: query
          name: page_size
          required: false
          schema:
            type: integer
        - description: Collection name
          in: path
          name: collection
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListObjectsResponse'
          description: OK
      summary: List objects in a collection
      tags:
        - Objects
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const object of client.objects.list('collection')) {
              console.log(object.id);
            }
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          page = client.objects.list(
              collection="collection",
          )
          page = page.entries[0]
          print(page.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            page, err := client.Objects.List(
              context.TODO(),
              "collection",
              knock.ObjectListParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", page)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.objects.ObjectListPage;
          import app.knock.api.models.objects.ObjectListParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ObjectListParams params = ObjectListParams.builder()
                      .collection("collection")
                      .build();
                  ObjectListPage page = client.objects().list(params);
              }
          }
  /v1/objects/{collection}/{object_id}/preferences/{preference_set_id}/workflows:
    put:
      callbacks: {}
      deprecated: true
      operationId: updateObjectPreferenceWorkflows
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSet'
          description: OK
      summary: Update workflows in preference set
      tags:
        - Objects
        - Preferences
  /v1/users/{user_id}/preferences:
    get:
      callbacks: {}
      operationId: listUserPreferenceSets
      parameters:
        - description: User ID
          in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: A list of preference sets for the user
                example:
                  - __typename: PreferenceSet
                    categories:
                      marketing: false
                      transactional:
                        channel_types:
                          email: false
                    channel_types:
                      email: true
                      push: false
                      sms:
                        conditions:
                          - argument: US
                            operator: equal_to
                            variable: recipient.country_code
                    id: default
                    workflows: null
                items:
                  $ref: '#/components/schemas/PreferenceSet'
                title: ListUserPreferenceSetsResponse
                type: array
          description: OK
      summary: List preference sets
      tags:
        - Users
        - Preferences
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const preferenceSets = await client.users.listPreferences('user_id');

            console.log(preferenceSets);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          preference_sets = client.users.list_preferences(
              "user_id",
          )
          print(preference_sets)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            preferenceSets, err := client.Users.ListPreferences(context.TODO(), "user_id")
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", preferenceSets)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.recipients.preferences.PreferenceSet;
          import app.knock.api.models.users.UserListPreferencesParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  UserListPreferencesParams params = UserListPreferencesParams.builder()
                      .userId("user_id")
                      .build();
                  List<PreferenceSet> preferenceSets = client.users().listPreferences(params);
              }
          }
  /v1/users/{user_id}/schedules:
    get:
      callbacks: {}
      operationId: listUserSchedules
      parameters:
        - description: The ID of the user to list schedules for
          in: path
          name: user_id
          required: true
          schema:
            type: string
        - description: The ID of the workflow to list schedules for
          in: query
          name: workflow
          required: false
          schema:
            type: string
        - description: The ID of the tenant to list schedules for
          in: query
          name: tenant
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries after
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The page size to fetch
          in: query
          name: page_size
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSchedulesResponse'
          description: OK
      summary: List schedules
      tags:
        - Schedules
        - Users
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const schedule of client.users.listSchedules('user_id')) {
              console.log(schedule.id);
            }
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          page = client.users.list_schedules(
              user_id="user_id",
          )
          page = page.entries[0]
          print(page.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            page, err := client.Users.ListSchedules(
              context.TODO(),
              "user_id",
              knock.UserListSchedulesParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", page)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.users.UserListSchedulesPage;
          import app.knock.api.models.users.UserListSchedulesParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  UserListSchedulesParams params = UserListSchedulesParams.builder()
                      .userId("user_id")
                      .build();
                  UserListSchedulesPage page = client.users().listSchedules(params);
              }
          }
  /v1/messages/{message_id}/archived:
    delete:
      callbacks: {}
      operationId: unarchiveMessage (2)
      parameters:
        - description: The message ID
          example: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
          in: path
          name: message_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: OK
      summary: Unarchive message
      tags:
        - Messages
    put:
      callbacks: {}
      operationId: archiveMessage
      parameters:
        - description: The message ID
          example: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
          in: path
          name: message_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: OK
      summary: Archive message
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const message = await client.messages.archive('1jNaXzB2RZX3LY8wVQnfCKyPnv7');

            console.log(message.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          message = client.messages.archive(
              "message_id",
          )
          print(message.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            message, err := client.Messages.Archive(context.TODO(), "1jNaXzB2RZX3LY8wVQnfCKyPnv7")
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", message.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.Message;
          import app.knock.api.models.messages.MessageArchiveParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MessageArchiveParams params = MessageArchiveParams.builder()
                      .messageId("1jNaXzB2RZX3LY8wVQnfCKyPnv7")
                      .build();
                  Message message = client.messages().archive(params);
              }
          }
  /v1/messages/batch/archived:
    post:
      callbacks: {}
      operationId: batchMarkMessagesAsArchived
      parameters:
        - description: The message IDs to update
          in: body
          name: message_ids
          required: true
          schema:
            items:
              format: uuid
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The list of messages that were updated
                example:
                  - actors:
                      - user_123
                    archived_at: null
                    channel_id: 123e4567-e89b-12d3-a456-426614174000
                    clicked_at: null
                    data:
                      foo: bar
                    engagement_statuses:
                      - read
                      - seen
                    id: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
                    inserted_at: '2021-01-01T00:00:00Z'
                    interacted_at: null
                    link_clicked_at: null
                    metadata:
                      external_id: 123e4567-e89b-12d3-a456-426614174000
                    read_at: null
                    recipient: user_123
                    scheduled_at: null
                    seen_at: null
                    source:
                      __typename: NotificationSource
                      categories:
                        - collaboration
                      key: comment-created
                      version_id: 123e4567-e89b-12d3-a456-426614174000
                    status: sent
                    tenant: tenant_123
                    updated_at: '2021-01-01T00:00:00Z'
                    workflow: comment-created
                items:
                  $ref: '#/components/schemas/Message'
                title: BatchListMessagesResponse
                type: array
          description: OK
      summary: Mark messages as archived
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const messages = await client.messages.batch.archive({
              message_ids: ['182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e'],
            });

            console.log(messages);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          messages = client.messages.batch.archive(
              message_ids=["182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"],
          )
          print(messages)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            messages, err := client.Messages.Batch.Archive(context.TODO(), knock.MessageBatchArchiveParams{
              MessageIDs: knock.F([]string{"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"}),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", messages)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.Message;
          import app.knock.api.models.messages.batch.BatchArchiveParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  List<Message> messages = client.messages().batch().archive();
              }
          }
  /v1/users/{user_id}/feeds/{channel_id}/settings:
    get:
      callbacks: {}
      description: Returns the feed settings for a user.
      operationId: getUserInAppFeedSettings
      parameters:
        - description: The user ID
          in: path
          name: user_id
          required: true
          schema:
            type: string
        - description: The channel ID
          in: path
          name: channel_id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInAppFeedSettingsResponse'
          description: OK
      summary: Get feed settings
      tags:
        - Feeds
        - Users
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.users.feeds.getSettings('user_id', '182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e');

            console.log(response.features);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          response = client.users.feeds.get_settings(
              user_id="user_id",
              channel_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
          )
          print(response.features)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            response, err := client.Users.Feeds.GetSettings(
              context.TODO(),
              "user_id",
              "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", response.Features)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.users.feeds.FeedGetSettingsParams;
          import app.knock.api.models.users.feeds.FeedGetSettingsResponse;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  FeedGetSettingsParams params = FeedGetSettingsParams.builder()
                      .userId("user_id")
                      .channelId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                      .build();
                  FeedGetSettingsResponse response = client.users().feeds().getSettings(params);
              }
          }
  /v1/users/{user_id}/messages:
    get:
      callbacks: {}
      operationId: listMessagesForUser
      parameters:
        - description: The cursor to fetch entries after
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The page size to fetch
          in: query
          name: page_size
          required: false
          schema:
            type: integer
        - description: The tenant ID
          example: tenant_123
          in: query
          name: tenant
          required: false
          schema:
            type: string
        - description: The channel ID
          example: 123e4567-e89b-12d3-a456-426614174000
          in: query
          name: channel_id
          required: false
          schema:
            type: string
        - description: The status of the message
          example:
            - delivered
          in: query
          name: status[]
          required: false
          schema:
            items:
              enum:
                - queued
                - sent
                - delivered
                - delivery_attempted
                - undelivered
                - not_sent
                - bounced
              type: string
            type: array
        - description: The engagement status of the message
          example:
            - unread
          in: query
          name: engagement_status[]
          required: false
          schema:
            items:
              enum:
                - seen
                - read
                - interacted
                - link_clicked
                - archived
              type: string
            type: array
        - description: The message IDs to filter messages by
          example:
            - 1jNaXzB2RZX3LY8wVQnfCKyPnv7
          in: query
          name: message_ids[]
          required: false
          schema:
            items:
              type: string
            type: array
        - description: The workflow categories to filter messages by
          example:
            - workflow_123
          in: query
          name: workflow_categories[]
          required: false
          schema:
            items:
              type: string
            type: array
        - description: The source of the message (workflow key)
          example: comment-created
          in: query
          name: source
          required: false
          schema:
            type: string
        - description: The workflow run ID to filter messages by
          example: 123e4567-e89b-12d3-a456-426614174000
          in: query
          name: workflow_run_id
          required: false
          schema:
            format: uuid
            type: string
        - description: The workflow recipient run ID to filter messages by
          example: 123e4567-e89b-12d3-a456-426614174000
          in: query
          name: workflow_recipient_run_id
          required: false
          schema:
            format: uuid
            type: string
        - description: The trigger data to filter messages by. Must be a valid JSON object.
          example: '{"comment_id": "123"}'
          in: query
          name: trigger_data
          required: false
          schema:
            type: string
        - description: The user ID
          example: user-123
          in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessagesResponse'
          description: OK
      summary: List messages
      tags:
        - Messages
        - Users
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const message of client.users.listMessages('user-123')) {
              console.log(message.id);
            }
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          page = client.users.list_messages(
              user_id="user-123",
          )
          page = page.entries[0]
          print(page.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            page, err := client.Users.ListMessages(
              context.TODO(),
              "user-123",
              knock.UserListMessagesParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", page)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.users.UserListMessagesPage;
          import app.knock.api.models.users.UserListMessagesParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  UserListMessagesParams params = UserListMessagesParams.builder()
                      .userId("user-123")
                      .build();
                  UserListMessagesPage page = client.users().listMessages(params);
              }
          }
  /v1/messages/{message_id}/interacted:
    put:
      callbacks: {}
      operationId: markMessageInteracted
      parameters:
        - description: The message ID
          example: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
          in: path
          name: message_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageInteractedRequest'
        description: Params
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: OK
      summary: Mark message as interacted
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const message = await client.messages.markAsInteracted('1jNaXzB2RZX3LY8wVQnfCKyPnv7');

            console.log(message.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          message = client.messages.mark_as_interacted(
              message_id="1jNaXzB2RZX3LY8wVQnfCKyPnv7",
          )
          print(message.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            message, err := client.Messages.MarkAsInteracted(
              context.TODO(),
              "1jNaXzB2RZX3LY8wVQnfCKyPnv7",
              knock.MessageMarkAsInteractedParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", message.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.Message;
          import app.knock.api.models.messages.MessageMarkAsInteractedParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MessageMarkAsInteractedParams params = MessageMarkAsInteractedParams.builder()
                      .messageId("1jNaXzB2RZX3LY8wVQnfCKyPnv7")
                      .build();
                  Message message = client.messages().markAsInteracted(params);
              }
          }
  /v1/users/{user_id}/preferences/{preference_set_id}/channel_types:
    put:
      callbacks: {}
      deprecated: true
      operationId: updateUserPreferenceChannelTypes
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSet'
          description: OK
      summary: Update channel types in preference set
      tags:
        - Users
        - Preferences
  /v1/objects/{collection}/{object_id}/preferences/{preference_set_id}/categories/{key}:
    put:
      callbacks: {}
      deprecated: true
      operationId: updateObjectPreferenceCategory
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSet'
          description: OK
      summary: Update a category preference
      tags:
        - Objects
        - Preferences
  /v1/messages/{message_id}/unarchived:
    delete:
      callbacks: {}
      operationId: unarchiveMessage
      parameters:
        - description: The message ID
          example: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
          in: path
          name: message_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: OK
      summary: Unarchive message
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const message = await client.messages.unarchive('1jNaXzB2RZX3LY8wVQnfCKyPnv7');

            console.log(message.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          message = client.messages.unarchive(
              "message_id",
          )
          print(message.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            message, err := client.Messages.Unarchive(context.TODO(), "1jNaXzB2RZX3LY8wVQnfCKyPnv7")
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", message.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.Message;
          import app.knock.api.models.messages.MessageUnarchiveParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MessageUnarchiveParams params = MessageUnarchiveParams.builder()
                      .messageId("1jNaXzB2RZX3LY8wVQnfCKyPnv7")
                      .build();
                  Message message = client.messages().unarchive(params);
              }
          }
  /v1/users/{user_id}/preferences/{preference_set_id}/categories:
    put:
      callbacks: {}
      deprecated: true
      operationId: updateUserPreferenceCategories
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSet'
          description: OK
      summary: Update categories in preference set
      tags:
        - Users
        - Preferences
  /v1/users:
    get:
      callbacks: {}
      operationId: listUsers
      parameters:
        - description: The cursor to fetch entries after
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The page size to fetch
          in: query
          name: page_size
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
          description: OK
      summary: List users
      tags:
        - Users
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const user of client.users.list()) {
              console.log(user.id);
            }
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          page = client.users.list()
          page = page.entries[0]
          print(page.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            page, err := client.Users.List(context.TODO(), knock.UserListParams{

            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", page)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.users.UserListPage;
          import app.knock.api.models.users.UserListParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  UserListPage page = client.users().list();
              }
          }
  /v1/providers/ms-teams/{channel_id}/teams:
    get:
      callbacks: {}
      description: >-
        Get a list of teams belonging to the Microsoft Entra tenant. By default, archived and private channels
        are excluded from the results.
      operationId: listTeamsForMsTeamsProvider
      parameters:
        - description: The ID of the Knock Microsoft Teams channel to get teams for
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: A JSON encoded string containing the Microsoft Teams tenant object reference
          example: '{"collection":"projects","object_id":"project_123"}'
          in: query
          name: ms_teams_tenant_object
          required: true
          schema:
            type: string
        - description: >-
            [OData param](https://learn.microsoft.com/en-us/graph/query-parameters) passed to the Microsoft
            Graph API to filter teams
          example: displayName eq 'My Team'
          in: query
          name: query_options.$filter
          required: false
          schema:
            type: string
        - description: >-
            [OData param](https://learn.microsoft.com/en-us/graph/query-parameters) passed to the Microsoft
            Graph API to select fields on a team
          example: id,displayName,description
          in: query
          name: query_options.$select
          required: false
          schema:
            type: string
        - description: >-
            [OData param](https://learn.microsoft.com/en-us/graph/query-parameters) passed to the Microsoft
            Graph API to limit the number of teams returned
          example: 10
          in: query
          name: query_options.$top
          required: false
          schema:
            type: integer
        - description: >-
            [OData param](https://learn.microsoft.com/en-us/graph/query-parameters) passed to the Microsoft
            Graph API to retrieve the next page of results
          in: query
          name: query_options.$skiptoken
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamsForMsTeamsProviderResponse'
          description: OK
      summary: List teams
      tags:
        - Providers
        - Microsoft Teams
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.providers.msTeams.listTeams('channel_id', {
              ms_teams_tenant_object: 'ms_teams_tenant_object',
            });

            console.log(response.ms_teams_teams);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          response = client.providers.ms_teams.list_teams(
              channel_id="channel_id",
              ms_teams_tenant_object="ms_teams_tenant_object",
          )
          print(response.ms_teams_teams)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            response, err := client.Providers.MsTeams.ListTeams(
              context.TODO(),
              "channel_id",
              knock.ProviderMsTeamListTeamsParams{
                MsTeamsTenantObject: knock.F("ms_teams_tenant_object"),
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", response.MsTeamsTeams)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.providers.msteams.MsTeamListTeamsParams;
          import app.knock.api.models.providers.msteams.MsTeamListTeamsResponse;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MsTeamListTeamsParams params = MsTeamListTeamsParams.builder()
                      .channelId("channel_id")
                      .msTeamsTenantObject("ms_teams_tenant_object")
                      .build();
                  MsTeamListTeamsResponse response = client.providers().msTeams().listTeams(params);
              }
          }
  /v1/messages/batch/read:
    post:
      callbacks: {}
      operationId: batchMarkMessagesAsRead
      parameters:
        - description: The message IDs to update
          in: body
          name: message_ids
          required: true
          schema:
            items:
              format: uuid
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The list of messages that were updated
                example:
                  - actors:
                      - user_123
                    archived_at: null
                    channel_id: 123e4567-e89b-12d3-a456-426614174000
                    clicked_at: null
                    data:
                      foo: bar
                    engagement_statuses:
                      - read
                      - seen
                    id: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
                    inserted_at: '2021-01-01T00:00:00Z'
                    interacted_at: null
                    link_clicked_at: null
                    metadata:
                      external_id: 123e4567-e89b-12d3-a456-426614174000
                    read_at: null
                    recipient: user_123
                    scheduled_at: null
                    seen_at: null
                    source:
                      __typename: NotificationSource
                      categories:
                        - collaboration
                      key: comment-created
                      version_id: 123e4567-e89b-12d3-a456-426614174000
                    status: sent
                    tenant: tenant_123
                    updated_at: '2021-01-01T00:00:00Z'
                    workflow: comment-created
                items:
                  $ref: '#/components/schemas/Message'
                title: BatchListMessagesResponse
                type: array
          description: OK
      summary: Mark messages as read
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const messages = await client.messages.batch.markAsRead({
              message_ids: ['182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e'],
            });

            console.log(messages);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          messages = client.messages.batch.mark_as_read(
              message_ids=["182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"],
          )
          print(messages)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            messages, err := client.Messages.Batch.MarkAsRead(context.TODO(), knock.MessageBatchMarkAsReadParams{
              MessageIDs: knock.F([]string{"182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e"}),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", messages)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.Message;
          import app.knock.api.models.messages.batch.BatchMarkAsReadParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  List<Message> messages = client.messages().batch().markAsRead();
              }
          }
  /v1/workflows/{key}/cancel:
    post:
      callbacks: {}
      description: >-
        When invoked for a workflow using a specific workflow key and cancellation key, will cancel any queued
        workflow runs associated with that key/cancellation key pair. Can optionally be provided one or more
        recipients to scope the request to.
      operationId: cancelWorkflow
      parameters:
        - description: Workflow key
          in: path
          name: key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelWorkflowRequest'
        description: Params
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyContentResponse'
          description: No Content
      summary: Cancel workflow
      tags:
        - Workflows
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.workflows.cancel('key', { cancellation_key: 'cancel-workflow-123' });

            console.log(response);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          response = client.workflows.cancel(
              key="key",
              cancellation_key="cancel-workflow-123",
          )
          print(response)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            response, err := client.Workflows.Cancel(
              context.TODO(),
              "key",
              knock.WorkflowCancelParams{
                CancellationKey: knock.F("cancel-workflow-123"),
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", response)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.workflows.WorkflowCancelParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  WorkflowCancelParams params = WorkflowCancelParams.builder()
                      .key("key")
                      .cancellationKey("cancel-workflow-123")
                      .build();
                  String response = client.workflows().cancel(params);
              }
          }
  /v1/users/{user_id}/preferences/{preference_set_id}/workflows:
    put:
      callbacks: {}
      deprecated: true
      operationId: updateUserPreferenceWorkflows
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSet'
          description: OK
      summary: Update workflows in preference set
      tags:
        - Users
        - Preferences
  /v1/tenants/bulk/set:
    post:
      callbacks: {}
      operationId: bulkSetTenants
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkSetTenantsRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperation'
          description: OK
      summary: Bulk set tenants
      tags:
        - Tenants
        - Bulk operations
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const bulkOperation = await client.tenants.bulk.set({ tenants: ['string'] });

            console.log(bulkOperation.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          bulk_operation = client.tenants.bulk.set(
              tenants=["string"],
          )
          print(bulk_operation.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
            "github.com/stainless-sdks/knock-go/shared"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            bulkOperation, err := client.Tenants.Bulk.Set(context.TODO(), knock.TenantBulkSetParams{
              Tenants: knock.F([]knock.InlineTenantRequestUnionParam{shared.UnionString("string")}),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", bulkOperation.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.bulkoperations.BulkOperation;
          import app.knock.api.models.tenants.bulk.BulkSetParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  BulkSetParams params = BulkSetParams.builder()
                      .addTenant("string")
                      .build();
                  BulkOperation bulkOperation = client.tenants().bulk().set(params);
              }
          }
  /v1/tenants/{tenant_id}:
    delete:
      callbacks: {}
      operationId: deleteTenant
      parameters:
        - description: The ID of the tenant
          in: path
          name: tenant_id
          required: true
          schema:
            type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyContentResponse'
          description: No Content
      summary: Delete a tenant
      tags:
        - Tenants
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const tenant = await client.tenants.delete('tenant_id');

            console.log(tenant);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          tenant = client.tenants.delete(
              "tenant_id",
          )
          print(tenant)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            tenant, err := client.Tenants.Delete(context.TODO(), "tenant_id")
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", tenant)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.tenants.TenantDeleteParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  TenantDeleteParams params = TenantDeleteParams.builder()
                      .tenantId("tenant_id")
                      .build();
                  String tenant = client.tenants().delete(params);
              }
          }
    get:
      callbacks: {}
      operationId: getTenant
      parameters:
        - description: The ID of the tenant
          in: path
          name: tenant_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
          description: OK
      summary: Get a tenant
      tags:
        - Tenants
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const tenant = await client.tenants.get('tenant_id');

            console.log(tenant.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          tenant = client.tenants.get(
              "tenant_id",
          )
          print(tenant.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            tenant, err := client.Tenants.Get(context.TODO(), "tenant_id")
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", tenant.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.tenants.Tenant;
          import app.knock.api.models.tenants.TenantGetParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  TenantGetParams params = TenantGetParams.builder()
                      .tenantId("tenant_id")
                      .build();
                  Tenant tenant = client.tenants().get(params);
              }
          }
    put:
      callbacks: {}
      operationId: setTenant
      parameters:
        - description: The ID of the tenant
          in: path
          name: tenant_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetTenantRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
          description: OK
      summary: Set a tenant
      tags:
        - Tenants
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const tenant = await client.tenants.set('tenant_id');

            console.log(tenant.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          tenant = client.tenants.set(
              tenant_id="tenant_id",
          )
          print(tenant.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            tenant, err := client.Tenants.Set(
              context.TODO(),
              "tenant_id",
              knock.TenantSetParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", tenant.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.tenants.Tenant;
          import app.knock.api.models.tenants.TenantSetParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  TenantSetParams params = TenantSetParams.builder()
                      .tenantId("tenant_id")
                      .build();
                  Tenant tenant = client.tenants().set(params);
              }
          }
  /v1/providers/ms-teams/{channel_id}/revoke_access:
    put:
      callbacks: {}
      description: Remove a Microsoft Entra tenant ID from a Microsoft Teams tenant object
      operationId: msTeamsProviderRevokeAccess
      parameters:
        - description: The ID of the Knock Microsoft Teams channel to revoke access for
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: A JSON encoded string containing the Microsoft Teams tenant object reference
          example: '{"collection":"projects","object_id":"project_123"}'
          in: query
          name: ms_teams_tenant_object
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                example: ok
                type: string
          description: OK
      summary: Revoke access
      tags:
        - Providers
        - Microsoft Teams
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.providers.msTeams.revokeAccess('channel_id', {
              ms_teams_tenant_object: 'ms_teams_tenant_object',
            });

            console.log(response);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          response = client.providers.ms_teams.revoke_access(
              channel_id="channel_id",
              ms_teams_tenant_object="ms_teams_tenant_object",
          )
          print(response)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            response, err := client.Providers.MsTeams.RevokeAccess(
              context.TODO(),
              "channel_id",
              knock.ProviderMsTeamRevokeAccessParams{
                MsTeamsTenantObject: knock.F("ms_teams_tenant_object"),
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", response)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.providers.msteams.MsTeamRevokeAccessParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MsTeamRevokeAccessParams params = MsTeamRevokeAccessParams.builder()
                      .channelId("channel_id")
                      .msTeamsTenantObject("ms_teams_tenant_object")
                      .build();
                  String response = client.providers().msTeams().revokeAccess(params);
              }
          }
  /v1/messages/{message_id}:
    get:
      callbacks: {}
      operationId: getMessage
      parameters:
        - description: The message ID
          example: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
          in: path
          name: message_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: OK
      summary: Get message
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const message = await client.messages.get('1jNaXzB2RZX3LY8wVQnfCKyPnv7');

            console.log(message.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          message = client.messages.get(
              "message_id",
          )
          print(message.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            message, err := client.Messages.Get(context.TODO(), "1jNaXzB2RZX3LY8wVQnfCKyPnv7")
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", message.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.Message;
          import app.knock.api.models.messages.MessageGetParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  MessageGetParams params = MessageGetParams.builder()
                      .messageId("1jNaXzB2RZX3LY8wVQnfCKyPnv7")
                      .build();
                  Message message = client.messages().get(params);
              }
          }
  /v1/users/{user_id}/preferences/{preference_set_id}/channel_types/{type}:
    put:
      callbacks: {}
      deprecated: true
      operationId: updateUserPreferenceChannelType
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSet'
          description: OK
      summary: Update channel type in preference set
      tags:
        - Users
        - Preferences
  /v1/objects/{collection}/{object_id}/subscriptions:
    delete:
      callbacks: {}
      operationId: deleteSubscriptionsForObject
      parameters:
        - description: Object ID
          in: path
          name: object_id
          required: true
          schema:
            type: string
        - description: Collection name
          in: path
          name: collection
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSubscriptionsRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionsResponse'
          description: OK
      summary: Delete subscriptions
      tags:
        - Subscriptions
        - Objects
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const subscriptions = await client.objects.deleteSubscriptions('collection', 'object_id', {
              recipients: [{ id: 'user_1' }],
            });

            console.log(subscriptions);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          subscriptions = client.objects.delete_subscriptions(
              collection="collection",
              object_id="object_id",
              recipients=[{
                  "id": "user_1"
              }],
          )
          print(subscriptions)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            subscriptions, err := client.Objects.DeleteSubscriptions(
              context.TODO(),
              "collection",
              "object_id",
              knock.ObjectDeleteSubscriptionsParams{
                Recipients: knock.F([]knock.RecipientRequestUnionParam{knock.InlineIdentifyUserRequestParam{
                  ID: knock.F("user_1"),
                }}),
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", subscriptions)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.objects.ObjectDeleteSubscriptionsParams;
          import app.knock.api.models.recipients.subscriptions.Subscription;
          import app.knock.api.models.users.InlineIdentifyUserRequest;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ObjectDeleteSubscriptionsParams params = ObjectDeleteSubscriptionsParams.builder()
                      .collection("collection")
                      .objectId("object_id")
                      .addRecipient(InlineIdentifyUserRequest.builder()
                          .id("user_1")
                          .build())
                      .build();
                  List<Subscription> subscriptions = client.objects().deleteSubscriptions(params);
              }
          }
    get:
      callbacks: {}
      description: >-
        List subscriptions for an object. Either list all subscriptions that belong to the object, or all
        subscriptions that this object has. Determined by the `mode` query parameter.
      operationId: listSubscriptionsForObject
      parameters:
        - description: Mode of the request
          in: query
          name: mode
          required: false
          schema:
            default: object
            enum:
              - recipient
              - object
            type: string
        - description: Recipients to filter by (only used if mode is `object`)
          in: query
          name: recipients[]
          required: false
          schema:
            items:
              $ref: '#/components/schemas/RecipientReference'
            type: array
        - description: Objects to filter by (only used if mode is `recipient`)
          in: query
          name: objects[]
          required: false
          schema:
            items:
              $ref: '#/components/schemas/RecipientReference'
            type: array
        - description: Object ID
          in: path
          name: object_id
          required: true
          schema:
            type: string
        - description: Collection name
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: The cursor to fetch entries after
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The page size to fetch
          in: query
          name: page_size
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSubscriptionsResponse'
          description: OK
      summary: List subscriptions.
      tags:
        - Subscriptions
        - Objects
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const subscription of client.objects.listSubscriptions('collection', 'object_id')) {
              console.log(subscription.__typename);
            }
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          page = client.objects.list_subscriptions(
              collection="collection",
              object_id="object_id",
          )
          page = page.entries[0]
          print(page._typename)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            page, err := client.Objects.ListSubscriptions(
              context.TODO(),
              "collection",
              "object_id",
              knock.ObjectListSubscriptionsParams{

              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", page)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.objects.ObjectListSubscriptionsPage;
          import app.knock.api.models.objects.ObjectListSubscriptionsParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ObjectListSubscriptionsParams params = ObjectListSubscriptionsParams.builder()
                      .collection("collection")
                      .objectId("object_id")
                      .build();
                  ObjectListSubscriptionsPage page = client.objects().listSubscriptions(params);
              }
          }
    post:
      callbacks: {}
      description: Add subscriptions for an object. If a subscription already exists, it will be updated.
      operationId: addSubscriptionsForObject
      parameters:
        - description: Object ID
          in: path
          name: object_id
          required: true
          schema:
            type: string
        - description: Collection name
          in: path
          name: collection
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertSubscriptionsRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionsResponse'
          description: OK
      summary: Add subscriptions
      tags:
        - Subscriptions
        - Objects
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const subscriptions = await client.objects.addSubscriptions('collection', 'object_id', {
              recipients: ['user_1', 'user_2'],
            });

            console.log(subscriptions);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          subscriptions = client.objects.add_subscriptions(
              collection="collection",
              object_id="object_id",
              recipients=["user_1", "user_2"],
          )
          print(subscriptions)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
            "github.com/stainless-sdks/knock-go/shared"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            subscriptions, err := client.Objects.AddSubscriptions(
              context.TODO(),
              "collection",
              "object_id",
              knock.ObjectAddSubscriptionsParams{
                Recipients: knock.F([]knock.RecipientRequestUnionParam{shared.UnionString("user_1"), shared.UnionString("user_2")}),
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", subscriptions)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.objects.ObjectAddSubscriptionsParams;
          import app.knock.api.models.recipients.subscriptions.Subscription;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  ObjectAddSubscriptionsParams params = ObjectAddSubscriptionsParams.builder()
                      .collection("collection")
                      .objectId("object_id")
                      .addRecipient("user_1")
                      .addRecipient("user_2")
                      .build();
                  List<Subscription> subscriptions = client.objects().addSubscriptions(params);
              }
          }
  /v1/messages/batch/interacted:
    post:
      callbacks: {}
      operationId: batchMarkMessagesAsInteracted
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchMessagesInteractedRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                description: The list of messages that were updated
                example:
                  - actors:
                      - user_123
                    archived_at: null
                    channel_id: 123e4567-e89b-12d3-a456-426614174000
                    clicked_at: null
                    data:
                      foo: bar
                    engagement_statuses:
                      - read
                      - seen
                    id: 1jNaXzB2RZX3LY8wVQnfCKyPnv7
                    inserted_at: '2021-01-01T00:00:00Z'
                    interacted_at: null
                    link_clicked_at: null
                    metadata:
                      external_id: 123e4567-e89b-12d3-a456-426614174000
                    read_at: null
                    recipient: user_123
                    scheduled_at: null
                    seen_at: null
                    source:
                      __typename: NotificationSource
                      categories:
                        - collaboration
                      key: comment-created
                      version_id: 123e4567-e89b-12d3-a456-426614174000
                    status: sent
                    tenant: tenant_123
                    updated_at: '2021-01-01T00:00:00Z'
                    workflow: comment-created
                items:
                  $ref: '#/components/schemas/Message'
                title: BatchListMessagesResponse
                type: array
          description: OK
      summary: Mark messages as interacted
      tags:
        - Messages
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const messages = await client.messages.batch.markAsInteracted({
              message_ids: ['1jNaXzB2RZX3LY8wVQnfCKyPnv7'],
            });

            console.log(messages);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          messages = client.messages.batch.mark_as_interacted(
              message_ids=["1jNaXzB2RZX3LY8wVQnfCKyPnv7"],
          )
          print(messages)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            messages, err := client.Messages.Batch.MarkAsInteracted(context.TODO(), knock.MessageBatchMarkAsInteractedParams{
              MessageIDs: knock.F([]string{"1jNaXzB2RZX3LY8wVQnfCKyPnv7"}),
            })
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", messages)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.messages.Message;
          import app.knock.api.models.messages.batch.BatchMarkAsInteractedParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  BatchMarkAsInteractedParams params = BatchMarkAsInteractedParams.builder()
                      .addMessageId("1jNaXzB2RZX3LY8wVQnfCKyPnv7")
                      .build();
                  List<Message> messages = client.messages().batch().markAsInteracted(params);
              }
          }
  /v1/objects/{collection}/bulk/set:
    post:
      callbacks: {}
      operationId: bulkSetObjects
      parameters:
        - description: The collection to set objects in
          in: path
          name: collection
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkSetObjectsRequest'
        description: Params
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperation'
          description: OK
      summary: Bulk set objects
      tags:
        - Objects
        - Bulk operations
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/node';

          const client = new Knock({
            bearerToken: process.env['KNOCK_API_KEY'], // This is the default and can be omitted
          });

          async function main() {
            const bulkOperation = await client.objects.bulk.set('collection', {
              objects: [{ id: 'project_1', collection: 'projects' }],
            });

            console.log(bulkOperation.id);
          }

          main();
        python: |-
          import os
          from knockapi import Knock

          client = Knock(
              bearer_token=os.environ.get("KNOCK_API_KEY"),  # This is the default and can be omitted
          )
          bulk_operation = client.objects.bulk.set(
              collection="collection",
              objects=[{
                  "id": "project_1",
                  "collection": "projects",
              }],
          )
          print(bulk_operation.id)
        go: |
          package main

          import (
            "context"
            "fmt"

            "github.com/stainless-sdks/knock-go"
            "github.com/stainless-sdks/knock-go/option"
          )

          func main() {
            client := knock.NewClient(
              option.WithBearerToken("My Bearer Token"), // defaults to os.LookupEnv("KNOCK_API_KEY")
            )
            bulkOperation, err := client.Objects.Bulk.Set(
              context.TODO(),
              "collection",
              knock.ObjectBulkSetParams{
                Objects: knock.F([]knock.InlineObjectRequestParam{knock.InlineObjectRequestParam{
                  ID: knock.F("project_1"),
                  Collection: knock.F("projects"),
                }}),
              },
            )
            if err != nil {
              panic(err.Error())
            }
            fmt.Printf("%+v\n", bulkOperation.ID)
          }
        java: |-
          package app.knock.api.example;

          import app.knock.api.client.KnockClient;
          import app.knock.api.client.okhttp.KnockOkHttpClient;
          import app.knock.api.models.bulkoperations.BulkOperation;
          import app.knock.api.models.objects.InlineObjectRequest;
          import app.knock.api.models.objects.bulk.BulkSetParams;

          public final class Main {
              private Main() {}

              public static void main(String[] args) {
                  // Configures using the `KNOCK_API_KEY` environment variable
                  KnockClient client = KnockOkHttpClient.fromEnv();

                  BulkSetParams params = BulkSetParams.builder()
                      .collection("collection")
                      .addObject(InlineObjectRequest.builder()
                          .id("project_1")
                          .collection("projects")
                          .build())
                      .build();
                  BulkOperation bulkOperation = client.objects().bulk().set(params);
              }
          }
security:
  - BearerAuth: []
servers:
  - url: https://api.knock.app
    variables: {}
tags:
  - description: An Audience is a segment of users.
    name: Audiences
  - description: >-
      A bulk operation is a set of changes applied across zero or more records triggered via a call to the
      Knock API and performed asynchronously.
    name: Bulk operations
  - description: >-
      Channel data is data that is specific to a recipient and a channel, like push tokens, or one or more
      Slack connections.
    name: Channel data
  - description: A message sent to a single recipient on a channel.
    name: Messages
  - description: An Object represents a resource in your system that you want to map into Knock.
    name: Objects
  - description: >-
      Preferences are a way to configure how notifications are sent to recipients. They are a set of
      configuration that determines whether a recipient should receive a notification for a given workflow on
      a specific channel.
    name: Preferences
  - description: A provider represents a third-party service that Knock integrates with and is configured via a channel.
    name: Providers
  - description: A schedule is a per-recipient, timezone-aware configuration for when to invoke a workflow.
    name: Schedules
  - description: A subscription represents a connection between a recipient and an object, used to represent a list.
    name: Subscriptions
  - description: >-
      A tenant represents a top-level entity from your system, like a company, organization, account, or
      workspace.
    name: Tenants
  - description: >-
      A user is an individual from your system, represented in Knock. They are most commonly a recipient of a
      notification.
    name: Users
  - description: A workflow is a structured set of steps that is triggered to produce notifications sent over channels.
    name: Workflows