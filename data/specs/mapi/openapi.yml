components:
  responses: {}
  schemas:
    SmsChannelSettings:
      description: SMS channel settings.
      example:
        link_tracking: true
      properties:
        link_tracking:
          description: Whether to track link clicks on SMS notifications.
          example: true
          type: boolean
      title: SmsChannelSettings
      type: object
    WrappedEmailLayoutRequestRequest:
      description: Wraps the EmailLayoutRequest request under the email_layout key.
      example:
        email_layout:
          footer_links:
            - text: Example
              url: http://example.com
          html_layout: <html><body>Hello, world!</body></html>
          name: Transactional
          text_layout: Hello, world!
      properties:
        email_layout:
          $ref: "#/components/schemas/EmailLayoutRequest"
      required:
        - email_layout
      title: WrappedEmailLayoutRequestRequest
      type: object
    WorkflowStep:
      anyOf:
        - $ref: "#/components/schemas/WorkflowChannelStep"
        - $ref: "#/components/schemas/WorkflowDelayStep"
        - $ref: "#/components/schemas/WorkflowBatchStep"
        - $ref: "#/components/schemas/WorkflowFetchStep"
        - $ref: "#/components/schemas/WorkflowThrottleStep"
        - $ref: "#/components/schemas/WorkflowBranchStep"
        - $ref: "#/components/schemas/WorkflowTriggerWorkflowStep"
      description: >-
        A step within a workflow. All workflow steps, regardless of its type, share a common set of core
        attributes (`type`, `ref`, `name`, `description`, `conditions`).
      example:
        channel_group_key: null
        channel_key: postmark
        channel_overrides: null
        conditions: null
        description: This is a description of the channel step
        name: Email channel step
        ref: channel_step
        send_windows: null
        template:
          html_body: <p>Hello, world!</p>
          settings:
            layout_key: default
          subject: Hello, world!
          text_body: Hello, world!
        type: channel
      title: WorkflowStep
      type: object
    PaginatedVariableResponse:
      description: A paginated list of Variable. Contains a list of entries and page information.
      example:
        entries:
          - description: This is a description of my variable.
            inserted_at: "2021-01-01T00:00:00Z"
            key: my_variable
            type: public
            updated_at: "2021-01-01T00:00:00Z"
            value: my_value
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/Variable"
          nullable: false
          type: array
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedVariableResponse
      type: object
    PreviewWorkflowTemplateResponse:
      description: A response to a preview workflow template request.
      example:
        content_type: email
        result: success
        template:
          html_body: <p>Hello, world!</p>
          settings:
            layout_key: default
          subject: Hello, world!
          text_body: Hello, world!
      properties:
        content_type:
          description: The content type of the preview.
          enum:
            - email
            - in_app_feed
            - push
            - chat
            - sms
            - http
          type: string
        result:
          description: The result of the preview.
          enum:
            - success
            - error
          type: string
        template:
          anyOf:
            - $ref: "#/components/schemas/EmailTemplate"
            - $ref: "#/components/schemas/InAppFeedTemplate"
            - $ref: "#/components/schemas/PushTemplate"
            - $ref: "#/components/schemas/ChatTemplate"
            - $ref: "#/components/schemas/SmsTemplate"
            - $ref: "#/components/schemas/RequestTemplate"
          description: The rendered template, ready to be previewed.
          type: object
      required:
        - result
        - content_type
        - template
      title: PreviewWorkflowTemplateResponse
      type: object
    WorkflowDelayStep:
      description: A delay step within a workflow.
      example:
        conditions: {}
        description: Delay for 10 seconds
        name: Delay
        ref: delay_step
        settings:
          delay_for:
            unit: seconds
            value: 10
        type: delay
      properties:
        conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
          description: A set of conditions to be evaluated for this delay step.
          type: object
        description:
          description: >-
            An arbitrary string attached to a workflow step. Useful for adding notes about the workflow for
            internal purposes.
          example: Delay for 10 seconds
          nullable: true
          type: string
        name:
          description: A name for the workflow step.
          example: Delay
          type: string
        ref:
          description: The reference key of the workflow step. Must be unique per workflow.
          example: delay_step
          type: string
        settings:
          description: >-
            The settings for the delay step. Both fields can be set to compute a delay where `delay_for` is an
            offset from the `delay_until_field_path`.
          properties:
            delay_for:
              anyOf:
                - $ref: "#/components/schemas/Duration"
                - nullable: true
              description: A duration object that describes how long to wait before proceeding to the next step.
              type: object
            delay_until_field_path:
              description: When set will use the path to resolve the delay into a timestamp from the property referenced
              example: recipient.delay_until
              type: string
          type: object
        type:
          description: The type of the workflow step.
          enum:
            - delay
          example: delay
          type: string
      required:
        - type
        - ref
        - name
        - description
        - conditions
        - settings
      title: WorkflowDelayStep
      type: object
    RequestTemplate:
      description: A request template.
      example:
        body: null
        headers:
          - key: X-API-Key
            value: "1234567890"
        method: get
        query_params:
          - key: key
            value: value
        url: https://example.com
      properties:
        body:
          description: A body of the request. Only used for POST or PUT requests.
          example: '{"key": "value"}'
          nullable: true
          type: string
        headers:
          description: >-
            A list of key-value pairs for the request headers. Each object should contain key and value fields
            with string values.
          items:
            properties:
              key:
                description: The key of the header.
                example: X-API-Key
                type: string
              value:
                description: The value of the header.
                example: "1234567890"
                type: string
            required:
              - key
              - value
            type: object
          type: array
        method:
          description: The HTTP method of the request.
          enum:
            - get
            - post
            - put
            - delete
            - patch
          example: post
          type: string
        query_params:
          description: >-
            A list of key-value pairs for the request query params. Each object should contain key and value
            fields with string values.
          items:
            properties:
              key:
                description: The key of the query param.
                example: key
                type: string
              value:
                description: The value of the query param.
                example: value
                type: string
            required:
              - key
              - value
            type: object
          type: array
        url:
          description: The URL of the request.
          example: https://example.com
          type: string
      required:
        - url
        - method
      title: RequestTemplate
      type: object
    WrappedPartialResponse:
      description: Wraps the Partial response under the `partial` key.
      example:
        partial:
          content: <p>Hello, world!</p>
          description: This is a test partial
          environment: development
          icon_name: icon-name
          inserted_at: "2021-01-01T00:00:00Z"
          key: my-partial
          name: My Partial
          type: html
          updated_at: "2021-01-01T00:00:00Z"
          valid: true
          visual_block_enabled: true
      properties:
        partial:
          $ref: "#/components/schemas/Partial"
      required:
        - partial
      title: WrappedPartialResponse
      type: object
    WrappedPartialRequestRequest:
      description: Wraps the PartialRequest request under the partial key.
      example:
        partial:
          content: <p>Hello, world!</p>
          name: My Partial
          type: html
      properties:
        partial:
          $ref: "#/components/schemas/PartialRequest"
      required:
        - partial
      title: WrappedPartialRequestRequest
      type: object
    MessageTypeMultiSelectField:
      description: A multi-select field used in a message type.
      example:
        key: multi_select_field
        label: Multi-Select Field
        settings:
          default:
            - option1
            - option3
          description: A description of the multi-select field
          options:
            - label: Option 1
              value: option1
            - label: Option 2
              value: option2
            - label: Option 3
              value: option3
          required: true
        type: multi_select
        value:
          - option1
          - option3
      properties:
        key:
          description: The unique key of the field.
          example: key
          type: string
        label:
          description: The label of the field.
          example: Label
          nullable: true
          type: string
        settings:
          description: Settings for the multi_select field.
          properties:
            default:
              description: The default values for the multi-select field.
              example:
                - option1
                - option3
              items:
                type: string
              nullable: true
              type: array
            description:
              example: A description of the field, used in the UI
              type: string
            options:
              description: The available options for the multi-select field.
              items:
                properties:
                  label:
                    description: The display label for the option.
                    example: Option 1
                    type: string
                  value:
                    description: The value for the option.
                    example: option1
                    type: string
                required:
                  - value
                type: object
              type: array
            required:
              description: Whether the field is required.
              example: true
              type: boolean
          type: object
        type:
          description: The type of the field.
          enum:
            - multi_select
          example: multi_select
          type: string
        value:
          description: The selected values.
          example:
            - option1
            - option3
          items:
            type: string
          nullable: true
          type: array
      required:
        - type
        - key
        - settings
      title: MessageTypeMultiSelectField
      type: object
    MessageTypeBooleanField:
      description: A boolean field used in a message type.
      example:
        key: boolean_field
        label: Boolean Field
        settings:
          default: false
          description: A description of the boolean field
          required: true
        type: boolean
        value: true
      properties:
        key:
          description: The unique key of the field.
          example: key
          type: string
        label:
          description: The label of the field.
          example: Label
          nullable: true
          type: string
        settings:
          description: Settings for the boolean field.
          properties:
            default:
              description: The default value of the boolean field.
              example: true
              type: boolean
            description:
              example: A description of the field, used in the UI
              type: string
            required:
              description: Whether the field is required.
              example: true
              type: boolean
          type: object
        type:
          description: The type of the field.
          enum:
            - boolean
          example: boolean
          type: string
        value:
          description: The value of the boolean field.
          example: true
          type: boolean
      required:
        - type
        - key
        - value
      title: MessageTypeBooleanField
      type: object
    Translation:
      description: A translation object.
      example:
        content: '{"hello":"Hello, world!"}'
        format: json
        inserted_at: "2021-01-01T00:00:00Z"
        locale_code: en
        namespace: my_app
        updated_at: "2021-01-01T00:00:00Z"
      properties:
        content:
          description: >-
            A JSON encoded string containing the key-value pairs of translation references and translation
            strings.
          type: string
        format:
          description: Indicates whether content is a JSON encoded object string or a string in the PO format.
          enum:
            - json
            - po
          type: string
        inserted_at:
          description: The timestamp of when the resource was created.
          format: date-time
          type: string
        locale_code:
          description: The locale code for the translation object.
          type: string
        namespace:
          description: An optional namespace for the translation to help categorize your translations.
          type: string
        updated_at:
          description: The timestamp of when the resource was last updated.
          format: date-time
          type: string
      required:
        - locale_code
        - namespace
        - content
        - format
        - inserted_at
        - updated_at
      title: Translation
      type: object
    Commit:
      description: A commit is a change to a resource within an environment, made by an author.
      example:
        commit_author:
          email: john.doe@example.com
          name: John Doe
        commit_message: This is a commit message
        created_at: "2021-01-01T00:00:00Z"
        environment: development
        id: 123e4567-e89b-12d3-a456-426614174000
        resource:
          identifier: my-email-layout
          type: email_layout
        updated_at: "2021-01-01T00:00:00Z"
      properties:
        commit_author:
          description: The author of the commit.
          example:
            email: john.doe@example.com
            name: John Doe
          properties:
            email:
              description: The email address of the commit author.
              type: string
            name:
              description: The name of the commit author.
              nullable: true
              type: string
          required:
            - email
          title: CommitAuthor
          type: object
        commit_message:
          description: The optional message about the commit.
          type: string
        created_at:
          description: The timestamp of when the resource was created.
          format: date-time
          type: string
        environment:
          description: The environment of the commit.
          example: development
          type: string
        id:
          description: The unique identifier for the commit.
          format: uuid
          type: string
        resource:
          description: The resource object associated with the commit.
          example:
            identifier: my-email-layout
            type: email_layout
          properties:
            identifier:
              description: The unique identifier for the resource.
              type: string
            type:
              description: The type of the resource object.
              enum:
                - email_layout
                - workflow
                - translation
                - partial
                - message_type
              example: workflow
              type: string
          required:
            - identifier
            - type
          title: CommitResource
          type: object
        updated_at:
          description: The timestamp of when the resource was last updated.
          format: date-time
          type: string
      required:
        - id
        - resource
        - commit_author
        - environment
        - commit_message
        - created_at
        - updated_at
      title: Commit
      type: object
    MessageTypeRequest:
      description: A request to create a message type.
      example:
        description: This is a message type
        name: My Message Type
        preview: <div>Hello, world!</div>
        variants:
          - fields:
              - key: text_field
                settings:
                  description: A description of the text field
                  max_length: 100
                  min_length: 10
                  required: true
                type: text
                value: Hello, world!
            key: default
            name: Default
      properties:
        description:
          description: >-
            An arbitrary string attached to a message type object. Useful for adding notes about the message
            type for internal purposes. Maximum of 280 characters allowed.
          nullable: true
          type: string
        icon_name:
          description: The icon name of the message type.
          type: string
        name:
          description: A name for the message type. Must be at maximum 255 characters in length.
          type: string
        preview:
          description: An HTML/liquid template for the message type preview.
          type: string
        semver:
          description: The semantic version of the message type.
          example: 1.0.0
          type: string
        variants:
          description: The variants of the message type.
          items:
            $ref: "#/components/schemas/MessageTypeVariant"
          type: array
      required:
        - name
        - description
        - preview
      title: MessageTypeRequest
      type: object
    MessageTypeButtonField:
      description: A button field used in a message type.
      example:
        action:
          key: button_action
          label: Button Action
          settings:
            description: A description of the text field in the button action
            required: true
          type: text
          value: submit
        key: button_field
        label: Button Field
        settings:
          description: A description of the button field
          required: true
        text:
          key: button_text
          label: Button Text
          settings:
            description: A description of the text field in the button
            required: true
          type: text
          value: Click me
        type: button
      properties:
        action:
          $ref: "#/components/schemas/MessageTypeTextField"
        key:
          description: The unique key of the field.
          example: key
          type: string
        label:
          description: The label of the field.
          example: Label
          nullable: true
          type: string
        settings:
          description: Settings for the button field.
          properties:
            description:
              example: A description of the field, used in the UI
              type: string
            required:
              description: Whether the field is required.
              example: true
              type: boolean
          type: object
        text:
          $ref: "#/components/schemas/MessageTypeTextField"
        type:
          description: The type of the field.
          enum:
            - button
          example: button
          type: string
      required:
        - type
        - key
        - text
        - action
      title: MessageTypeButtonField
      type: object
    EmailButtonSetBlock:
      description: A button set block in an email template.
      example:
        buttons:
          - action: https://example.com/button1
            label: Button 1
            size_attrs:
              is_fullwidth: false
              size: sm
            style_attrs:
              background_color: "#000000"
              border_color: "#000000"
              border_radius: 6
              border_width: 1
              text_color: "#FFFFFF"
            variant: primary
        id: 123e4567-e89b-12d3-a456-426614174000
        layout_attrs:
          column_gap: 8
          horizontal_align: left
          padding_bottom: 8
          padding_left: 4
          padding_right: 4
          padding_top: 8
        type: button_set
        version: 1
      properties:
        buttons:
          description: A list of buttons in the button set.
          items:
            $ref: "#/components/schemas/EmailButtonSetBlockButton"
          type: array
        id:
          description: The ID of the block.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        layout_attrs:
          description: The layout attributes of the block.
          properties:
            column_gap:
              description: The column_gap layout attribute of the block.
              type: integer
            horizontal_align:
              description: The horizontal alignment of the block.
              enum:
                - left
                - center
                - right
              type: string
            padding_bottom:
              description: The padding_bottom layout attribute of the block.
              type: integer
            padding_left:
              description: The padding_left layout attribute of the block.
              type: integer
            padding_right:
              description: The padding_right layout attribute of the block.
              type: integer
            padding_top:
              description: The padding_top layout attribute of the block.
              type: integer
          required:
            - padding_top
            - padding_right
            - padding_bottom
            - padding_left
            - horizontal_align
            - column_gap
          type: object
        type:
          description: The type of the block.
          type: string
        version:
          description: The version of the block.
          example: 1
          type: integer
      required:
        - id
        - type
        - version
        - buttons
      title: EmailButtonSetBlock
      type: object
    InAppFeedTemplate:
      description: An in-app feed template.
      example:
        action_buttons:
          - action: https://example.com
            label: Button 1
        action_url: https://example.com
        markdown_body: Hello, world!
      properties:
        action_buttons:
          description: The action buttons of the in-app feed.
          items:
            description: A single-action button to be rendered in an in-app feed cell.
            properties:
              action:
                description: The action of the action button.
                example: https://example.com
                type: string
              label:
                description: The label of the action button.
                example: Button 1
                type: string
            required:
              - label
              - action
            type: object
          type: array
        action_url:
          description: >-
            The URL to navigate to when the in-app feed is tapped. Can be omitted for multi-action templates,
            where the action buttons will be used instead.
          example: https://example.com
          nullable: true
          type: string
        markdown_body:
          description: The markdown body of the in-app feed.
          example: Hello, world!
          type: string
      required:
        - markdown_body
      title: InAppFeedTemplate
      type: object
    MessageTypeVariant:
      description: A variant of a message type.
      example:
        fields:
          - key: text_field
            settings:
              description: A description of the text field
              max_length: 100
              min_length: 10
              required: true
            type: text
            value: Hello, world!
        key: default
        name: Default
      properties:
        fields:
          description: The field types available for the variant.
          items:
            anyOf:
              - $ref: "#/components/schemas/MessageTypeBooleanField"
              - $ref: "#/components/schemas/MessageTypeButtonField"
              - $ref: "#/components/schemas/MessageTypeMarkdownField"
              - $ref: "#/components/schemas/MessageTypeMultiSelectField"
              - $ref: "#/components/schemas/MessageTypeSelectField"
              - $ref: "#/components/schemas/MessageTypeTextField"
              - $ref: "#/components/schemas/MessageTypeTextareaField"
            type: object
          type: array
        key:
          description: >-
            The unique key string for the variant. Must be at minimum 3 characters and at maximum 255
            characters in length. Must be in the format of ^[a-z0-9_-]+$.
          type: string
        name:
          description: A name for the variant. Must be at maximum 255 characters in length.
          type: string
      required:
        - key
        - name
        - fields
      title: MessageTypeVariant
      type: object
    EmailLayoutRequest:
      description: A request to update or create an email layout.
      example:
        footer_links:
          - text: Example
            url: http://example.com
        html_layout: <html><body>Hello, world!</body></html>
        name: Transactional
        text_layout: Hello, world!
      properties:
        footer_links:
          description: A list of one or more items to show in the footer of the email layout.
          items:
            properties:
              text:
                description: The text to display as the link.
                nullable: false
                type: string
              url:
                description: The URL to link to.
                nullable: false
                type: string
            required:
              - text
              - url
            type: object
          type: array
        html_layout:
          description: The complete HTML content of the email layout.
          nullable: false
          type: string
        name:
          description: The friendly name of this email layout.
          nullable: false
          type: string
        text_layout:
          description: The complete plain text content of the email layout.
          nullable: false
          type: string
      required:
        - name
        - html_layout
        - text_layout
      title: EmailLayoutRequest
      type: object
    PartialRequest:
      description: A partial object with attributes to update or create a partial.
      example:
        content: <p>Hello, world!</p>
        name: My Partial
        type: html
      properties:
        content:
          description: The content of the partial.
          type: string
        description:
          description: The description of the partial.
          nullable: true
          type: string
        icon_name:
          description: >-
            The name of the icon to be used in the visual editor. Only relevant when `visual_block_enabled` is
            `true`.
          nullable: true
          type: string
        name:
          description: The name of the partial.
          type: string
        type:
          description: The type of the partial.
          enum:
            - html
            - text
            - json
            - markdown
          type: string
        visual_block_enabled:
          description: Indicates whether the partial can be used in the visual editor. Only applies to HTML partials.
          example: false
          nullable: true
          type: boolean
      required:
        - type
        - name
        - content
      title: PartialRequest
      type: object
    ConditionGroup:
      anyOf:
        - $ref: "#/components/schemas/ConditionGroupAllMatch"
        - $ref: "#/components/schemas/ConditionGroupAnyMatch"
      description: A group of conditions to be evaluated.
      example:
        all:
          - argument: some_property
            operator: equal_to
            variable: recipient.property
      title: ConditionGroup
      type: object
    WorkflowRequest:
      description: A workflow request for upserting a workflow.
      example:
        name: My Workflow
        steps:
          - channel_key: in-app-feed
            name: Channel 1
            ref: channel_1
            template:
              action_url: "{{ vars.app_url }}"
              markdown_body: Hello **{{ recipient.name }}**
            type: channel
      properties:
        categories:
          description: A list of categories that the workflow belongs to.
          items:
            type: string
          type: array
        conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
          description: >-
            A conditions object that describes one or more conditions to be met for the workflow to be
            executed. (optional).
          type: object
        description:
          description: >-
            An arbitrary string attached to a workflow object. Useful for adding notes about the workflow for
            internal purposes. Maximum of 280 characters allowed.
          type: string
        name:
          description: A name for the workflow. Must be at maximum 255 characters in length.
          type: string
        settings:
          description: A map of workflow settings.
          properties:
            is_commercial:
              description: Whether the workflow is commercial. Defaults to false.
              example: false
              type: boolean
            override_preferences:
              description: >-
                Whether to ignore recipient preferences for a given type of notification. If true, will send
                for every channel in the workflow even if the recipient has opted out of a certain kind.
                Defaults to false.
              example: false
              type: boolean
          type: object
        steps:
          description: >-
            A list of workflow step objects in the workflow, which may contain any of: channel step, delay
            step, batch step, fetch step.
          items:
            $ref: "#/components/schemas/WorkflowStep"
          type: array
        trigger_data_json_schema:
          additionalProperties: true
          description: >-
            A JSON schema for the expected structure of the workflow trigger's data payload. Used to validate
            trigger requests. (optional).
          type: object
        trigger_frequency:
          description: >-
            The frequency at which the workflow should be triggered. One of: `once_per_recipient`,
            `once_per_recipient_per_tenant`, `every_trigger`. Defaults to `every_trigger`.
          enum:
            - every_trigger
            - once_per_recipient
            - once_per_recipient_per_tenant
          example: every_trigger
          type: string
      required:
        - name
        - steps
      title: WorkflowRequest
      type: object
    EmailPartialBlock:
      description: A partial block in an email template, used to render a reusable partial component.
      example:
        attrs:
          foo: bar
        id: 123e4567-e89b-12d3-a456-426614174000
        key: my_partial
        layout_attrs:
          padding_bottom: 8
          padding_left: 4
          padding_right: 4
          padding_top: 8
        name: my_partial
        type: partial
        version: 1
      properties:
        attrs:
          additionalProperties: true
          description: The attributes to pass to the partial block.
          type: object
        id:
          description: The ID of the block.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        key:
          description: The key of the partial block to invoke.
          type: string
        layout_attrs:
          description: The layout attributes of the block.
          properties:
            padding_bottom:
              description: The padding_bottom layout attribute of the block.
              type: integer
            padding_left:
              description: The padding_left layout attribute of the block.
              type: integer
            padding_right:
              description: The padding_right layout attribute of the block.
              type: integer
            padding_top:
              description: The padding_top layout attribute of the block.
              type: integer
          required:
            - padding_top
            - padding_right
            - padding_bottom
            - padding_left
          type: object
        name:
          description: The name of the partial block.
          type: string
        type:
          description: The type of the block.
          type: string
        version:
          description: The version of the block.
          example: 1
          type: integer
      required:
        - id
        - type
        - version
        - name
        - key
        - attrs
      title: EmailPartialBlock
      type: object
    RecipientReference:
      description: >-
        A recipient reference, used when referencing a recipient by either their ID (for a user), or by a
        reference for an object.
      example:
        collection: projects
        id: project_1
      oneOf:
        - description: A user ID.
          nullable: false
          type: string
        - description: An object reference.
          properties:
            collection:
              type: string
            id:
              type: string
          required:
            - id
            - collection
          type: object
      title: RecipientReference
      type: object
    ConditionGroupAnyMatch:
      description: A group of conditions that any must be met. Can contain nested alls.
      example:
        any:
          - all:
              - argument: some_property
                operator: equal_to
                variable: recipient.property
      properties:
        any:
          description: An array of conditions or nested condition groups to evaluate.
          items:
            anyOf:
              - $ref: "#/components/schemas/Condition"
              - $ref: "#/components/schemas/ConditionGroupAllMatch"
            type: object
          type: array
      required:
        - any
      title: ConditionGroupAnyMatch
      type: object
    MessageTypeTextField:
      description: A text field used in a message type.
      example:
        key: text_field
        label: Text Field
        settings:
          description: A description of the text field
          max_length: 100
          min_length: 10
          required: true
        type: text
        value: Hello, world!
      properties:
        key:
          description: The unique key of the field.
          example: key
          type: string
        label:
          description: The label of the field.
          example: Label
          nullable: true
          type: string
        settings:
          description: Settings for the text field.
          properties:
            default:
              description: The default value of the text field.
              example: A placeholder
              nullable: true
              type: string
            description:
              example: A description of the field, used in the UI
              type: string
            max_length:
              example: 100
              type: integer
            min_length:
              example: 10
              type: integer
            required:
              description: Whether the field is required.
              example: true
              type: boolean
          type: object
        type:
          description: The type of the field.
          enum:
            - text
          example: text
          type: string
        value:
          description: The value of the text field.
          example: Hello, world!
          nullable: true
          type: string
      required:
        - type
        - key
      title: MessageTypeTextField
      type: object
    EmailTemplate:
      description: An email message template.
      example:
        html_body: <p>Hello, world!</p>
        settings:
          layout_key: default
        subject: Hello, world!
        text_body: Hello, world!
      properties:
        html_body:
          description: An HTML template for the email body. Either `html_body` or `visual_blocks` must be provided.
          example: <p>Hello, world!</p>
          type: string
        settings:
          anyOf:
            - properties:
                attachment_key:
                  description: The object path in the data payload (of the workflow trigger call) to resolve attachments.
                  example: attachments
                  nullable: true
                  type: string
                layout_key:
                  description: The key of the email layout which the step is using.
                  example: default
                  nullable: true
                  type: string
                pre_content:
                  description: >-
                    A liquid template that will be injected into the layout above the message template
                    content.
                  nullable: true
                  type: string
            - nullable: true
          description: The settings for the email template. Can be omitted.
          type: object
        subject:
          description: The subject of the email.
          example: Hello, world!
          type: string
        text_body:
          description: >-
            A text template for the email body. Only present if opted out from autogenerating it from the HTML
            template.
          example: Hello, world!
          nullable: true
          type: string
        visual_blocks:
          description: The visual blocks of the email. Either `html_body` or `visual_blocks` must be provided.
          items:
            anyOf:
              - $ref: "#/components/schemas/EmailButtonSetBlock"
              - $ref: "#/components/schemas/EmailDividerBlock"
              - $ref: "#/components/schemas/EmailHtmlBlock"
              - $ref: "#/components/schemas/EmailMarkdownBlock"
              - $ref: "#/components/schemas/EmailPartialBlock"
            type: object
          type: array
      required:
        - subject
      title: EmailTemplate
      type: object
    WorkflowChannelStep:
      description: A channel step within a workflow.
      example:
        channel_group_key: null
        channel_key: postmark
        channel_overrides: null
        conditions: null
        description: This is a description of the channel step
        name: Email channel step
        ref: channel_step
        send_windows: null
        template:
          html_body: <p>Hello, world!</p>
          settings:
            layout_key: default
          subject: Hello, world!
          text_body: Hello, world!
        type: channel
      properties:
        channel_group_key:
          description: >-
            The key of the channel group to which the channel step will be sending a notification. A channel
            step can have either a channel key or a channel group key, but not both.
          example: email
          nullable: true
          type: string
        channel_key:
          description: >-
            The key of the channel to which the channel step will be sending a notification. A channel step
            can have either a channel key or a channel group key, but not both.
          example: postmark
          nullable: true
          type: string
        channel_overrides:
          anyOf:
            - $ref: "#/components/schemas/EmailChannelSettings"
            - $ref: "#/components/schemas/InAppFeedChannelSettings"
            - $ref: "#/components/schemas/SmsChannelSettings"
            - $ref: "#/components/schemas/PushChannelSettings"
            - $ref: "#/components/schemas/ChatChannelSettings"
            - nullable: true
          description: A map of channel overrides for the channel step.
          type: object
        conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
          description: A set of conditions to be evaluated for this channel step.
          type: object
        description:
          description: >-
            An arbitrary string attached to a workflow step. Useful for adding notes about the workflow for
            internal purposes.
          example: Delay for 10 seconds
          nullable: true
          type: string
        name:
          description: A name for the workflow step.
          example: Delay
          type: string
        ref:
          description: The reference key of the workflow step. Must be unique per workflow.
          example: delay_step
          type: string
        send_windows:
          description: A list of send window objects. Must include one send window object per day of the week.
          items:
            $ref: "#/components/schemas/SendWindow"
          nullable: true
          type: array
        template:
          anyOf:
            - $ref: "#/components/schemas/EmailTemplate"
            - $ref: "#/components/schemas/InAppFeedTemplate"
            - $ref: "#/components/schemas/SmsTemplate"
            - $ref: "#/components/schemas/PushTemplate"
            - $ref: "#/components/schemas/ChatTemplate"
            - $ref: "#/components/schemas/WebhookTemplate"
          description: >-
            The message template set up with the channel step. The shape of the template depends on the type
            of the channel you'll be sending to. See below for definitions of each channel type template:
            email, in-app, SMS, push, chat, and webhook.
          type: object
        type:
          description: The type of the workflow step.
          enum:
            - channel
          example: channel
          type: string
      required:
        - type
        - ref
        - name
        - template
      title: WorkflowChannelStep
      type: object
    WrappedMessageTypeResponse:
      description: Wraps the MessageType response under the `message_type` key.
      example:
        message_type:
          archived_at: "2021-01-01T00:00:00Z"
          created_at: "2021-01-01T00:00:00Z"
          deleted_at: "2021-01-01T00:00:00Z"
          description: Email message type
          environment: development
          icon_name: email
          key: email
          name: Email
          owner: user
          preview: <div>Hello, world!</div>
          semver: 1.0.0
          sha: "1234567890"
          updated_at: "2021-01-01T00:00:00Z"
          valid: true
          variants:
            - fields:
                - key: text_field
                  settings:
                    description: A description of the text field
                    max_length: 100
                    min_length: 10
                    required: true
                  type: text
                  value: Hello, world!
              key: default
              name: Default
      properties:
        message_type:
          $ref: "#/components/schemas/MessageType"
      required:
        - message_type
      title: WrappedMessageTypeResponse
      type: object
    EmailDividerBlock:
      description: A divider block in an email template.
      example:
        id: 123e4567-e89b-12d3-a456-426614174000
        layout_attrs:
          padding_bottom: 8
          padding_left: 4
          padding_right: 4
          padding_top: 8
        type: divider
        version: 1
      properties:
        id:
          description: The ID of the block.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        layout_attrs:
          description: The layout attributes of the block.
          properties:
            padding_bottom:
              description: The padding_bottom layout attribute of the block.
              type: integer
            padding_left:
              description: The padding_left layout attribute of the block.
              type: integer
            padding_right:
              description: The padding_right layout attribute of the block.
              type: integer
            padding_top:
              description: The padding_top layout attribute of the block.
              type: integer
          required:
            - padding_top
            - padding_right
            - padding_bottom
            - padding_left
          type: object
        type:
          description: The type of the block.
          type: string
        version:
          description: The version of the block.
          example: 1
          type: integer
      required:
        - id
        - type
        - version
      title: EmailDividerBlock
      type: object
    PaginatedWorkflowResponse:
      description: A paginated list of Workflow. Contains a list of entries and page information.
      example:
        entries:
          - active: false
            categories:
              - marketing
              - black-friday
            conditions:
              all:
                - argument: admin
                  operator: equal_to
                  variable: recipient.role
            created_at: "2022-12-16T19:07:50.027113Z"
            description: This is a dummy workflow for demo purposes.
            environment: development
            key: december-16-demo
            name: december-16-demo
            settings:
              override_preferences: true
            sha: f7e9d3b2a1c8e6m4k5j7h9g0i2l3n4p6q8r0t1u3v5w7x9y
            steps:
              - channel_key: in-app-feed
                description: Main in-app feed
                name: In-app step
                ref: in_app_feed_1
                template:
                  action_url: "{{ vars.app_url }}"
                  markdown_body: Hello **{{ recipient.name }}**
                type: channel
            trigger_data_json_schema:
              properties:
                name:
                  type: string
              required:
                - name
              type: object
            trigger_frequency: every_trigger
            updated_at: "2023-02-08T22:15:19.846681Z"
            valid: true
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/Workflow"
          nullable: false
          type: array
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedWorkflowResponse
      type: object
    WorkflowThrottleStep:
      description: A workflow throttle step.
      example:
        name: Throttle step
        ref: throttle_step
        settings:
          throttle_key: data.project_id
          throttle_limit: 1
          throttle_window:
            unit: minutes
            value: 10
        type: throttle
      properties:
        conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
          description: >-
            A conditions object that describes one or more conditions to be met in order for the step to be
            executed.
          type: object
        description:
          description: >-
            An arbitrary string attached to a workflow step. Useful for adding notes about the workflow for
            internal purposes.
          example: Throttle step description
          nullable: true
          type: string
        name:
          description: A name for the workflow step.
          example: Throttle step
          type: string
        ref:
          description: The reference key of the workflow step. Must be unique per workflow.
          example: throttle_step
          type: string
        settings:
          description: The settings for the throttle step.
          properties:
            throttle_key:
              description: The data property to use to throttle notifications per recipient.
              example: data.project_id
              nullable: true
              type: string
            throttle_limit:
              description: The maximum number of workflows to allow within the duration window. Defaults to 1.
              example: 1
              nullable: true
              type: integer
            throttle_window:
              anyOf:
                - $ref: "#/components/schemas/Duration"
                - nullable: true
              description: The duration object of the throttle window.
              nullable: true
              type: object
            throttle_window_field_path:
              description: >-
                The data path to resolve the throttle window. The resolved value must be an ISO-8601
                timestamp.
              example: recipient.throttle_window
              nullable: true
              type: string
          type: object
        type:
          description: The type of the workflow step.
          enum:
            - throttle
          example: throttle
          type: string
      required:
        - type
        - ref
        - name
        - settings
      title: WorkflowThrottleStep
      type: object
    WorkflowBatchStep:
      description: A workflow batch step.
      example:
        description: Batch step description
        name: Batch step
        ref: batch_step
        settings:
          batch_key: data.project_id
          batch_window:
            unit: minutes
            value: 10
        type: batch
      properties:
        description:
          description: >-
            An arbitrary string attached to a workflow step. Useful for adding notes about the workflow for
            internal purposes.
          example: Batch step description
          nullable: true
          type: string
        name:
          description: A name for the workflow step.
          example: Batch step
          type: string
        ref:
          description: The reference key of the workflow step. Must be unique per workflow.
          example: batch_step
          type: string
        settings:
          description: The settings for the batch step.
          properties:
            batch_execution_mode:
              description: >-
                The execution mode of the batch step. One of: `accumulate` or `flush_leading`. When set to
                `flush_leading`, the first item in the batch will be executed immediately, and the rest will
                be batched.
              enum:
                - accumulate
                - flush_leading
              example: accumulate
              nullable: true
              type: string
            batch_items_max_limit:
              description: "The maximum number of batch items allowed in a batch. Between: 2 and 1000."
              example: 1000
              nullable: true
              type: integer
            batch_items_render_limit:
              description: >-
                The maximum number of batch items allowed to be rendered into a template. Between: 1 and 100.
                Defaults to 10.
              example: 10
              nullable: true
              type: integer
            batch_key:
              description: The data property to use to batch notifications per recipient.
              example: data.project_id
              nullable: true
              type: string
            batch_order:
              description: >-
                The order describing whether to return the first or last ten batch items in the activities
                variable. One of: `asc` or `desc`.
              enum:
                - asc
                - desc
              example: asc
              nullable: true
              type: string
            batch_until_field_path:
              description: The data path to resolve the batch window. The resolved value must be an ISO-8601 timestamp.
              example: recipient.batch_until
              nullable: true
              type: string
            batch_window:
              anyOf:
                - $ref: "#/components/schemas/Duration"
                - nullable: true
              description: The window of time to send the batch.
              type: object
            batch_window_extension_limit:
              anyOf:
                - $ref: "#/components/schemas/Duration"
                - nullable: true
              description: >-
                A duration object that describes the maximum duration a batch window can be extended to from
                opening when using a sliding batch window.
              type: object
            batch_window_type:
              description: "The type of the batch window used. One of: `fixed` or `sliding`."
              enum:
                - fixed
                - sliding
              example: fixed
              nullable: true
              type: string
          type: object
        type:
          description: The type of the workflow step.
          enum:
            - batch
          example: batch
          type: string
      required:
        - type
        - ref
        - name
        - description
        - settings
      title: WorkflowBatchStep
      type: object
    Environment:
      description: An environment object.
      example:
        created_at: "2022-10-31T19:59:03Z"
        deleted_at: null
        hide_pii_data: false
        label_color: "#000000"
        last_commit_at: "2022-10-31T19:59:03Z"
        name: Production
        order: 0
        owner: system
        slug: production
        updated_at: "2022-10-31T19:59:03Z"
      properties:
        created_at:
          description: The timestamp of when the resource was created.
          format: date-time
          type: string
        deleted_at:
          description: The timestamp of when the resource was deleted.
          format: date-time
          nullable: true
          type: string
        hide_pii_data:
          default: false
          description: Whether PII data is hidden from the environment.
          type: boolean
        label_color:
          description: The color of the environment label to display in the dashboard.
          nullable: true
          type: string
        last_commit_at:
          description: The last time the environment was committed to.
          format: date-time
          nullable: true
          type: string
        name:
          description: A friendly name for the environment. Cannot exceed 255 characters.
          type: string
        order:
          description: The order of the environment. 0 is the first environment, 1 is the second, etc.
          type: integer
        owner:
          description: The owner of the environment.
          enum:
            - system
            - user
          example: user
          type: string
        slug:
          description: A unique slug for the environment. Cannot exceed 255 characters.
          type: string
        updated_at:
          description: The timestamp of when the resource was last updated.
          format: date-time
          type: string
      required:
        - name
        - slug
        - order
        - created_at
        - updated_at
        - owner
      title: Environment
      type: object
    PushChannelSettings:
      description: Push channel settings.
      example:
        token_deregistration: true
      properties:
        token_deregistration:
          description: >-
            Whether to deregister a push-token when a push send hard bounces. This is to prevent the same
            token from being used for future pushes.
          example: true
          type: boolean
      title: PushChannelSettings
      type: object
    WrappedCommitResponse:
      description: Wraps the Commit response under the `commit` key.
      example:
        commit:
          commit_author:
            email: john.doe@example.com
            name: John Doe
          commit_message: This is a commit message
          created_at: "2021-01-01T00:00:00Z"
          environment: development
          id: 123e4567-e89b-12d3-a456-426614174000
          resource:
            identifier: my-email-layout
            type: email_layout
          updated_at: "2021-01-01T00:00:00Z"
      properties:
        commit:
          $ref: "#/components/schemas/Commit"
      required:
        - commit
      title: WrappedCommitResponse
      type: object
    WrappedEmailLayoutResponse:
      description: Wraps the EmailLayout response under the `email_layout` key.
      example:
        email_layout:
          created_at: "2021-01-01T00:00:00Z"
          footer_links:
            - text: Example
              url: http://example.com
          html_layout: <html><body>Hello, world!</body></html>
          key: transactional
          name: Transactional
          sha: "1234567890"
          text_layout: Hello, world!
          updated_at: "2021-01-01T00:00:00Z"
      properties:
        email_layout:
          $ref: "#/components/schemas/EmailLayout"
      required:
        - email_layout
      title: WrappedEmailLayoutResponse
      type: object
    WrappedTranslationRequestRequest:
      description: Wraps the TranslationRequest request under the translation key.
      example:
        translation:
          content: '{"hello":"Hello, world!"}'
          format: json
      properties:
        translation:
          $ref: "#/components/schemas/TranslationRequest"
      required:
        - translation
      title: WrappedTranslationRequestRequest
      type: object
    InAppFeedChannelSettings:
      description: In-app feed channel settings.
      example:
        link_tracking: true
      properties:
        link_tracking:
          description: Whether to track link clicks on in-app feed notifications.
          example: true
          type: boolean
      title: InAppFeedChannelSettings
      type: object
    Duration:
      description: A duration of time, represented as a unit and a value.
      example:
        unit: minutes
        value: 10
      properties:
        unit:
          description: The unit of time.
          enum:
            - minutes
            - hours
            - days
            - weeks
            - months
          example: minutes
          type: string
        value:
          description: The value of the duration.
          example: 10
          type: integer
      required:
        - unit
        - value
      title: Duration
      type: object
    Channel:
      description: A configured channel, which is a way to route messages to a provider.
      example:
        archived_at: "2021-01-01T00:00:00Z"
        created_at: "2021-01-01T00:00:00Z"
        custom_icon_url: https://example.com/icon.png
        key: email_channel
        name: My Email Channel
        provider: sendgrid
        type: email
        updated_at: "2021-01-01T00:00:00Z"
        visibility: user
      properties:
        archived_at:
          description: The timestamp of when the resource was deleted.
          format: date-time
          nullable: true
          type: string
        created_at:
          description: The timestamp of when the resource was created.
          format: date-time
          type: string
        custom_icon_url:
          description: Optional URL to a custom icon for the channel.
          nullable: true
          type: string
        description:
          description: Optional description of the channel's purpose or usage.
          nullable: true
          type: string
        key:
          description: Unique identifier for the channel within a project (immutable once created).
          type: string
        name:
          description: The human-readable name of the channel.
          type: string
        provider:
          description: The ID of the provider that this channel uses to deliver messages.
          type: string
        type:
          description: The type of channel, determining what kind of messages it can send.
          enum:
            - email
            - in_app
            - in_app_feed
            - in_app_guide
            - sms
            - push
            - chat
            - http
          type: string
        updated_at:
          description: The timestamp of when the resource was last updated.
          format: date-time
          type: string
        visibility:
          description: Controls whether the channel is visible as system-level or user-level.
          enum:
            - system
            - user
          example: user
          type: string
      required:
        - name
        - key
        - type
        - provider
        - visibility
        - created_at
        - updated_at
      title: Channel
      type: object
    RunWorkflowRequest:
      description: A request to run (test) a workflow.
      example:
        data:
          park_id: 1
        recipients:
          - dnedry
      properties:
        actor:
          anyOf:
            - $ref: "#/components/schemas/RecipientReference"
            - nullable: true
          description: The actor to reference in the the workflow run.
          type: object
        cancellation_key:
          description: A key to cancel the workflow run.
          nullable: true
          type: string
        data:
          additionalProperties: true
          description: A map of data to be used in the workflow run.
          type: object
        recipients:
          description: A list of recipients to run the workflow for.
          items:
            $ref: "#/components/schemas/RecipientReference"
          type: array
        tenant:
          description: The tenant to associate the workflow run with.
          type: string
      required:
        - recipients
      title: RunWorkflowRequest
      type: object
    PaginatedChannelGroupResponse:
      description: A paginated list of ChannelGroup. Contains a list of entries and page information.
      example:
        entries:
          - channel_rules:
              - channel:
                  archived_at: "2021-01-01T00:00:00Z"
                  created_at: "2021-01-01T00:00:00Z"
                  custom_icon_url: https://example.com/icon.png
                  key: email_channel
                  name: My Email Channel
                  provider: sendgrid
                  type: email
                  updated_at: "2021-01-01T00:00:00Z"
                  visibility: user
                created_at: "2021-01-01T00:00:00Z"
                index: 0
                rule_type: always
                updated_at: "2021-01-01T00:00:00Z"
            channel_type: push
            created_at: "2021-01-01T00:00:00Z"
            key: push-group
            name: Push Notification Group
            operator: any
            source: user
            updated_at: "2021-01-01T00:00:00Z"
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/ChannelGroup"
          nullable: false
          type: array
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedChannelGroupResponse
      type: object
    PageInfo:
      description: The information about a paginated result.
      example:
        after: null
        before: null
        page_size: 25
      properties:
        after:
          description: The cursor to fetch entries after. Will only be present if there are more entries to fetch.
          nullable: true
          type: string
        before:
          description: >-
            The cursor to fetch entries before. Will only be present if there are more entries to fetch before
            the current page.
          nullable: true
          type: string
        page_size:
          description: The number of entries to fetch per-page.
          type: integer
      required:
        - page_size
      title: PageInfo
      type: object
    Variable:
      description: An environment variable object.
      example:
        description: This is a description of my variable.
        inserted_at: "2021-01-01T00:00:00Z"
        key: my_variable
        type: public
        updated_at: "2021-01-01T00:00:00Z"
        value: my_value
      properties:
        description:
          description: The description of the variable.
          nullable: true
          type: string
        inserted_at:
          description: The timestamp of when the resource was created.
          format: date-time
          type: string
        key:
          description: The key of the variable.
          type: string
        type:
          default: public
          description: The type of the variable.
          enum:
            - public
            - secret
          type: string
        updated_at:
          description: The timestamp of when the resource was last updated.
          format: date-time
          type: string
        value:
          description: The value of the variable.
          type: string
      required:
        - key
        - value
        - type
        - inserted_at
        - updated_at
      title: Variable
      type: object
    PaginatedTranslationResponse:
      description: A paginated list of Translation. Contains a list of entries and page information.
      example:
        entries:
          - content: '{"hello":"Hello, world!"}'
            format: json
            inserted_at: "2021-01-01T00:00:00Z"
            locale_code: en
            namespace: my_app
            updated_at: "2021-01-01T00:00:00Z"
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/Translation"
          nullable: false
          type: array
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedTranslationResponse
      type: object
    PaginatedCommitResponse:
      description: A paginated list of Commit. Contains a list of entries and page information.
      example:
        entries:
          - commit_author:
              email: john.doe@example.com
              name: John Doe
            commit_message: This is a commit message
            created_at: "2021-01-01T00:00:00Z"
            environment: development
            id: 123e4567-e89b-12d3-a456-426614174000
            resource:
              identifier: my-email-layout
              type: email_layout
            updated_at: "2021-01-01T00:00:00Z"
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/Commit"
          nullable: false
          type: array
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedCommitResponse
      type: object
    Workflow:
      description: A workflow object.
      example:
        active: false
        categories:
          - marketing
          - black-friday
        conditions:
          all:
            - argument: admin
              operator: equal_to
              variable: recipient.role
        created_at: "2022-12-16T19:07:50.027113Z"
        description: This is a dummy workflow for demo purposes.
        environment: development
        key: december-16-demo
        name: december-16-demo
        settings:
          override_preferences: true
        sha: f7e9d3b2a1c8e6m4k5j7h9g0i2l3n4p6q8r0t1u3v5w7x9y
        steps:
          - channel_key: in-app-feed
            description: Main in-app feed
            name: In-app step
            ref: in_app_feed_1
            template:
              action_url: "{{ vars.app_url }}"
              markdown_body: Hello **{{ recipient.name }}**
            type: channel
        trigger_data_json_schema:
          properties:
            name:
              type: string
          required:
            - name
          type: object
        trigger_frequency: every_trigger
        updated_at: "2023-02-08T22:15:19.846681Z"
        valid: true
      properties:
        active:
          description: Whether the workflow is active in the current environment. (read-only).
          type: boolean
        categories:
          description: A list of categories that the workflow belongs to.
          items:
            type: string
          type: array
        conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
          description: >-
            A conditions object that describes one or more conditions to be met for the workflow to be
            executed. (optional).
          type: object
        created_at:
          description: The timestamp of when the resource was created. (read-only).
          format: date-time
          type: string
        deleted_at:
          description: The timestamp of when the resource was deleted. (read-only).
          format: date-time
          type: string
        description:
          description: >-
            An arbitrary string attached to a workflow object. Useful for adding notes about the workflow for
            internal purposes. Maximum of 280 characters allowed.
          type: string
        environment:
          description: The slug of the environment in which the workflow exists. (read-only).
          type: string
        key:
          description: >-
            The unique key string for the workflow object. Must be at minimum 3 characters and at maximum 255
            characters in length. Must be in the format of ^[a-z0-9_-]+$.
          type: string
        name:
          description: A name for the workflow. Must be at maximum 255 characters in length.
          type: string
        settings:
          description: A map of workflow settings.
          properties:
            is_commercial:
              description: Whether the workflow is commercial. Defaults to false.
              example: false
              type: boolean
            override_preferences:
              description: >-
                Whether to ignore recipient preferences for a given type of notification. If true, will send
                for every channel in the workflow even if the recipient has opted out of a certain kind.
                Defaults to false.
              example: false
              type: boolean
          type: object
        sha:
          description: The SHA hash of the workflow data. (read-only).
          type: string
        steps:
          description: >-
            A list of workflow step objects in the workflow, which may contain any of: channel step, delay
            step, batch step, fetch step.
          items:
            $ref: "#/components/schemas/WorkflowStep"
          type: array
        trigger_data_json_schema:
          additionalProperties: true
          description: >-
            A JSON schema for the expected structure of the workflow trigger's data payload. Used to validate
            trigger requests. (optional).
          type: object
        trigger_frequency:
          description: >-
            The frequency at which the workflow should be triggered. One of: `once_per_recipient`,
            `once_per_recipient_per_tenant`, `every_trigger`. Defaults to `every_trigger`.
          enum:
            - every_trigger
            - once_per_recipient
            - once_per_recipient_per_tenant
          example: every_trigger
          type: string
        updated_at:
          description: The timestamp of when the resource was last updated. (read-only).
          format: date-time
          type: string
        valid:
          description: Whether the workflow and its steps are in a valid state. (read-only).
          type: boolean
      required:
        - key
        - name
        - steps
        - active
        - valid
        - environment
        - created_at
        - updated_at
        - sha
      title: Workflow
      type: object
    ChannelGroup:
      description: A group of channels with rules for when they are applicable.
      example:
        channel_rules:
          - channel:
              archived_at: "2021-01-01T00:00:00Z"
              created_at: "2021-01-01T00:00:00Z"
              custom_icon_url: https://example.com/icon.png
              key: email_channel
              name: My Email Channel
              provider: sendgrid
              type: email
              updated_at: "2021-01-01T00:00:00Z"
              visibility: user
            created_at: "2021-01-01T00:00:00Z"
            index: 0
            rule_type: always
            updated_at: "2021-01-01T00:00:00Z"
        channel_type: push
        created_at: "2021-01-01T00:00:00Z"
        key: push-group
        name: Push Notification Group
        operator: any
        source: user
        updated_at: "2021-01-01T00:00:00Z"
      properties:
        channel_rules:
          description: Rules for determining which channels should be used.
          items:
            $ref: "#/components/schemas/ChannelGroupRule"
          type: array
        channel_type:
          description: The type of channels contained in this group.
          enum:
            - email
            - in_app
            - in_app_feed
            - in_app_guide
            - sms
            - push
            - chat
            - http
          type: string
        created_at:
          description: The timestamp of when the resource was created.
          format: date-time
          type: string
        key:
          description: Unique identifier for the channel group within a project.
          type: string
        name:
          description: The human-readable name of the channel group.
          type: string
        operator:
          description: >-
            Determines how the channel rules are applied ('any' means any rule can match, 'all' means all
            rules must match).
          enum:
            - any
            - all
          type: string
        source:
          description: Whether this channel group was created by the system or a user.
          enum:
            - system
            - user
          type: string
        updated_at:
          description: The timestamp of when the resource was last updated.
          format: date-time
          type: string
      required:
        - name
        - key
        - channel_type
        - operator
        - source
        - channel_rules
        - created_at
        - updated_at
      title: ChannelGroup
      type: object
    ChannelGroupRule:
      description: A rule that determines if a channel should be executed as part of a channel group.
      example:
        channel:
          archived_at: "2021-01-01T00:00:00Z"
          created_at: "2021-01-01T00:00:00Z"
          custom_icon_url: https://example.com/icon.png
          key: email_channel
          name: My Email Channel
          provider: sendgrid
          type: email
          updated_at: "2021-01-01T00:00:00Z"
          visibility: user
        created_at: "2021-01-01T00:00:00Z"
        index: 0
        rule_type: always
        updated_at: "2021-01-01T00:00:00Z"
      properties:
        argument:
          description: For conditional rules, the argument to compare against.
          nullable: true
          type: string
        channel:
          $ref: "#/components/schemas/Channel"
        created_at:
          description: The timestamp of when the resource was created.
          format: date-time
          type: string
        index:
          description: The order index of this rule within the channel group.
          type: integer
        operator:
          description: For conditional rules, the operator to apply.
          enum:
            - equal_to
            - not_equal_to
            - greater_than
            - less_than
            - greater_than_or_equal_to
            - less_than_or_equal_to
            - contains
            - not_contains
            - contains_all
            - empty
            - not_empty
            - is_audience_member
            - is_not_audience_member
          example: equal_to
          nullable: true
          type: string
        rule_type:
          description: The type of rule (if = conditional, unless = negative conditional, always = always apply).
          enum:
            - if
            - unless
            - always
          type: string
        updated_at:
          description: The timestamp of when the resource was last updated.
          format: date-time
          type: string
        variable:
          description: For conditional rules, the variable to evaluate.
          nullable: true
          type: string
      required:
        - index
        - rule_type
        - channel
        - created_at
        - updated_at
      title: ChannelGroupRule
      type: object
    WrappedWorkflowResponse:
      description: Wraps the Workflow response under the `workflow` key.
      example:
        workflow:
          active: false
          categories:
            - marketing
            - black-friday
          conditions:
            all:
              - argument: admin
                operator: equal_to
                variable: recipient.role
          created_at: "2022-12-16T19:07:50.027113Z"
          description: This is a dummy workflow for demo purposes.
          environment: development
          key: december-16-demo
          name: december-16-demo
          settings:
            override_preferences: true
          sha: f7e9d3b2a1c8e6m4k5j7h9g0i2l3n4p6q8r0t1u3v5w7x9y
          steps:
            - channel_key: in-app-feed
              description: Main in-app feed
              name: In-app step
              ref: in_app_feed_1
              template:
                action_url: "{{ vars.app_url }}"
                markdown_body: Hello **{{ recipient.name }}**
              type: channel
          trigger_data_json_schema:
            properties:
              name:
                type: string
            required:
              - name
            type: object
          trigger_frequency: every_trigger
          updated_at: "2023-02-08T22:15:19.846681Z"
          valid: true
      properties:
        workflow:
          $ref: "#/components/schemas/Workflow"
      required:
        - workflow
      title: WrappedWorkflowResponse
      type: object
    WrappedWorkflowRequestRequest:
      description: Wraps the WorkflowRequest request under the workflow key.
      example:
        workflow:
          name: My Workflow
          steps:
            - channel_key: in-app-feed
              name: Channel 1
              ref: channel_1
              template:
                action_url: "{{ vars.app_url }}"
                markdown_body: Hello **{{ recipient.name }}**
              type: channel
      properties:
        workflow:
          $ref: "#/components/schemas/WorkflowRequest"
      required:
        - workflow
      title: WrappedWorkflowRequestRequest
      type: object
    EmailLayout:
      description: A versioned email layout used within an environment.
      example:
        created_at: "2021-01-01T00:00:00Z"
        footer_links:
          - text: Example
            url: http://example.com
        html_layout: <html><body>Hello, world!</body></html>
        key: transactional
        name: Transactional
        sha: "1234567890"
        text_layout: Hello, world!
        updated_at: "2021-01-01T00:00:00Z"
      properties:
        created_at:
          description: The timestamp of when the resource was created.
          format: date-time
          type: string
        environment:
          description: The environment of the email layout.
          type: string
        footer_links:
          description: A list of one or more items to show in the footer of the email layout.
          items:
            properties:
              text:
                description: The text to display as the link.
                type: string
              url:
                description: The URL to link to.
                type: string
            required:
              - text
              - url
            type: object
          type: array
        html_layout:
          description: The complete HTML content of the email layout.
          type: string
        key:
          description: The unique key for this email layout.
          type: string
        name:
          description: The friendly name of this email layout.
          type: string
        sha:
          description: The SHA of the email layout.
          type: string
        text_layout:
          description: The complete plain text content of the email layout.
          type: string
        updated_at:
          description: The timestamp of when the resource was last updated.
          format: date-time
          type: string
      required:
        - key
        - name
        - html_layout
        - text_layout
        - sha
        - created_at
      title: EmailLayout
      type: object
    ChatChannelSettings:
      description: Chat channel settings.
      example:
        email_based_user_id_resolution: true
        link_tracking: true
      properties:
        email_based_user_id_resolution:
          description: >-
            Whether to resolve chat provider user IDs using a Knock user's email address. Only relevant for
            Slack channels for the time being.
          example: true
          type: boolean
        link_tracking:
          description: Whether to track link clicks on chat notifications.
          example: true
          type: boolean
      title: ChatChannelSettings
      type: object
    EmailButtonSetBlockButton:
      description: A button in a button set block.
      example:
        action: https://example.com/button1
        label: Button 1
        size_attrs:
          is_fullwidth: false
          size: sm
        style_attrs:
          background_color: "#000000"
          border_color: "#000000"
          border_radius: 6
          border_width: 1
          text_color: "#FFFFFF"
        variant: primary
      properties:
        action:
          description: The action of the button.
          type: string
        label:
          description: The label of the button.
          type: string
        size_attrs:
          description: The size attributes of the button.
          properties:
            is_fullwidth:
              description: Whether the button is full width.
              type: boolean
            size:
              description: The size of the button.
              enum:
                - sm
                - md
                - lg
              type: string
          type: object
        style_attrs:
          description: The style attributes of the button.
          properties:
            background_color:
              description: The background color of the button.
              type: string
            border_color:
              description: The border color of the button.
              type: string
            border_radius:
              description: The border radius of the button.
              type: integer
            border_width:
              description: The border width of the button.
              type: integer
            text_color:
              description: The text color of the button.
              type: string
          type: object
        variant:
          description: The variant of the button.
          type: string
      required:
        - label
        - action
        - variant
      title: EmailButtonSetBlockButton
      type: object
    ChatTemplate:
      description: A chat template.
      example:
        json_body: null
        markdown_body: "**Hello**, world!"
        summary: Hello, world!
      properties:
        json_body:
          description: >-
            A JSON template for the chat notification message payload. Only present if not using the markdown
            body.
          example: '{"type": "text", "text": "Hello, world!"}'
          nullable: true
          type: string
        markdown_body:
          description: The markdown body of the chat template.
          example: Hello, world!
          type: string
        summary:
          description: The summary of the chat template.
          example: Hello, world!
          type: string
      required:
        - markdown_body
      title: ChatTemplate
      type: object
    WrappedMessageTypeRequestRequest:
      description: Wraps the MessageTypeRequest request under the message_type key.
      example:
        message_type:
          description: This is a message type
          name: My Message Type
          preview: <div>Hello, world!</div>
          variants:
            - fields:
                - key: text_field
                  settings:
                    description: A description of the text field
                    max_length: 100
                    min_length: 10
                    required: true
                  type: text
                  value: Hello, world!
              key: default
              name: Default
      properties:
        message_type:
          $ref: "#/components/schemas/MessageTypeRequest"
      required:
        - message_type
      title: WrappedMessageTypeRequestRequest
      type: object
    WorkflowBranchStep:
      description: A branch step within a workflow.
      example:
        branches:
          - conditions:
              all:
                - argument: pro
                  operator: equal_to
                  variable: recipient.plan_type
            name: Pro plan
            steps: []
            terminates: false
          - conditions: null
            name: Default
            steps: []
            terminates: false
        description: Branch description
        name: Branch 1
        ref: branch_1
        type: branch
      properties:
        branches:
          description: A list of workflow branches to be evaluated.
          items:
            properties:
              conditions:
                anyOf:
                  - $ref: "#/components/schemas/ConditionGroup"
                  - nullable: true
                description: A set of conditions to be evaluated for this branch.
                type: object
              name:
                description: The name of the branch.
                example: The name of the branch.
                type: string
              steps:
                description: A list of steps that will be executed if the branch is chosen.
                items:
                  $ref: "#/components/schemas/WorkflowStep"
                type: array
              terminates:
                description: If the workflow should halt at the end of the branch.
                example: true
                type: boolean
            type: object
          type: array
        description:
          description: >-
            An arbitrary string attached to a workflow step. Useful for adding notes about the workflow for
            internal purposes.
          example: Branch description
          type: string
        name:
          description: A name for the workflow step.
          example: Branch
          type: string
        ref:
          description: The reference key of the workflow step. Must be unique per workflow.
          example: branch_step
          type: string
        type:
          description: The type of step.
          enum:
            - branch
          example: branch
          type: string
      required:
        - type
        - ref
        - name
        - description
        - branches
      title: WorkflowBranchStep
      type: object
    WebhookTemplate:
      description: >-
        A webhook template. By default, a webhook step will use the request settings you configured in your
        webhook channel. You can override this as you see fit on a per-step basis.
      example:
        body: null
        headers:
          - key: X-API-Key
            value: "1234567890"
        method: get
        query_params:
          - key: key
            value: value
        url: https://example.com
      properties:
        body:
          description: A body of the request. Only used for POST or PUT requests.
          example: '{"key": "value"}'
          nullable: true
          type: string
        headers:
          description: >-
            A list of key-value pairs for the request headers. Each object should contain key and value fields
            with string values.
          items:
            properties:
              key:
                description: The key of the header.
                example: X-API-Key
                type: string
              value:
                description: The value of the header.
                example: "1234567890"
                type: string
            required:
              - key
              - value
            type: object
          type: array
        method:
          description: The HTTP method of the webhook.
          enum:
            - get
            - post
            - put
            - delete
            - patch
          example: post
          type: string
        query_params:
          description: >-
            A list of key-value pairs for the request query params. Each object should contain key and value
            fields with string values.
          items:
            properties:
              key:
                description: The key of the query param.
                example: key
                type: string
              value:
                description: The value of the query param.
                example: value
                type: string
            required:
              - key
              - value
            type: object
          type: array
        url:
          description: The URL of the webhook.
          example: https://example.com
          type: string
      required:
        - url
        - method
      title: WebhookTemplate
      type: object
    PaginatedChannelResponse:
      description: A paginated list of Channel. Contains a list of entries and page information.
      example:
        entries:
          - archived_at: "2021-01-01T00:00:00Z"
            created_at: "2021-01-01T00:00:00Z"
            custom_icon_url: https://example.com/icon.png
            key: email_channel
            name: My Email Channel
            provider: sendgrid
            type: email
            updated_at: "2021-01-01T00:00:00Z"
            visibility: user
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/Channel"
          nullable: false
          type: array
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedChannelResponse
      type: object
    EmailMarkdownBlock:
      description: A markdown block in an email template.
      example:
        content: "# Hello, world!"
        id: 123e4567-e89b-12d3-a456-426614174000
        layout_attrs:
          padding_bottom: 8
          padding_left: 4
          padding_right: 4
          padding_top: 8
        type: markdown
        variant: default
        version: 1
      properties:
        content:
          description: The markdown content of the block.
          type: string
        id:
          description: The ID of the block.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        layout_attrs:
          description: The layout attributes of the block.
          properties:
            padding_bottom:
              description: The padding_bottom layout attribute of the block.
              type: integer
            padding_left:
              description: The padding_left layout attribute of the block.
              type: integer
            padding_right:
              description: The padding_right layout attribute of the block.
              type: integer
            padding_top:
              description: The padding_top layout attribute of the block.
              type: integer
          required:
            - padding_top
            - padding_right
            - padding_bottom
            - padding_left
          type: object
        type:
          description: The type of the block.
          type: string
        variant:
          description: The flavor of markdown to use for the block.
          example: default
          type: string
        version:
          description: The version of the block.
          example: 1
          type: integer
      required:
        - id
        - type
        - version
        - content
        - variant
      title: EmailMarkdownBlock
      type: object
    ConditionGroupAllMatch:
      description: A group of conditions that must all be met.
      example:
        all:
          - argument: some_property
            operator: equal_to
            variable: recipient.property
      properties:
        all:
          description: A list of conditions.
          items:
            $ref: "#/components/schemas/Condition"
          type: array
      required:
        - all
      title: ConditionGroupAllMatch
      type: object
    ExchangeForApiKeyResponse:
      description: Returns an API key that can be used to make requests to the public API.
      example:
        api_key: sk_1234567890
      properties:
        api_key:
          description: The secret API key exchanged from the service token.
          type: string
      required:
        - api_key
      title: ExchangeForApiKeyResponse
      type: object
    MessageTypeMarkdownField:
      description: A markdown field used in a message type.
      example:
        key: markdown_field
        label: Markdown Field
        settings:
          default: |-
            # Heading

            This is **bold** and this is *italic*.
          description: A description of the markdown field
          required: true
        type: markdown
        value: |-
          # Heading

          This is **bold** and this is *italic*.
      properties:
        key:
          description: The unique key of the field.
          example: key
          type: string
        label:
          description: The label of the field.
          example: Label
          nullable: true
          type: string
        settings:
          description: Settings for the markdown field.
          properties:
            default:
              description: The default value of the markdown field.
              example: |-
                # Heading

                This is **bold** and this is *italic*.
              type: string
            description:
              example: A description of the field, used in the UI
              type: string
            required:
              description: Whether the field is required.
              example: true
              type: boolean
          type: object
        type:
          description: The type of the field.
          enum:
            - markdown
          example: markdown
          type: string
        value:
          description: The value of the markdown field.
          example: |-
            # Heading

            This is **bold** and this is *italic*.
          type: string
      required:
        - type
        - key
        - value
      title: MessageTypeMarkdownField
      type: object
    MessageTypeTextareaField:
      description: A textarea field used in a message type.
      example:
        key: textarea_field
        label: Textarea Field
        settings:
          description: A description of the textarea field
          max_length: 1000
          min_length: 10
          required: true
        type: textarea
        value: This is a longer text that can span multiple lines.
      properties:
        key:
          description: The unique key of the field.
          example: key
          type: string
        label:
          description: The label of the field.
          example: Label
          nullable: true
          type: string
        settings:
          description: Settings for the textarea field.
          properties:
            default:
              description: The default value of the textarea field.
              example: A placeholder
              nullable: true
              type: string
            description:
              example: A description of the field, used in the UI
              type: string
            max_length:
              example: 1000
              type: integer
            min_length:
              example: 10
              type: integer
            required:
              description: Whether the field is required.
              example: true
              type: boolean
          type: object
        type:
          description: The type of the field.
          enum:
            - textarea
          example: textarea
          type: string
        value:
          description: The value of the textarea field.
          example: This is a longer text that can span multiple lines.
          nullable: true
          type: string
      required:
        - type
        - key
      title: MessageTypeTextareaField
      type: object
    TranslationRequest:
      description: A translation object with a content attribute used to update or create a translation.
      example:
        content: '{"hello":"Hello, world!"}'
        format: json
      properties:
        content:
          description: >-
            A JSON encoded string containing the key-value pairs of translation references and translation
            strings.
          type: string
        format:
          description: Indicates whether content is a JSON encoded object string or a string in the PO format.
          enum:
            - json
            - po
          example: json
          type: string
      required:
        - content
        - format
      title: TranslationRequest
      type: object
    PaginatedMessageTypeResponse:
      description: A paginated list of MessageType. Contains a list of entries and page information.
      example:
        entries:
          - archived_at: "2021-01-01T00:00:00Z"
            created_at: "2021-01-01T00:00:00Z"
            deleted_at: "2021-01-01T00:00:00Z"
            description: Email message type
            environment: development
            icon_name: email
            key: email
            name: Email
            owner: user
            preview: <div>Hello, world!</div>
            semver: 1.0.0
            sha: "1234567890"
            updated_at: "2021-01-01T00:00:00Z"
            valid: true
            variants:
              - fields:
                  - key: text_field
                    settings:
                      description: A description of the text field
                      max_length: 100
                      min_length: 10
                      required: true
                    type: text
                    value: Hello, world!
                key: default
                name: Default
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/MessageType"
          nullable: false
          type: array
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedMessageTypeResponse
      type: object
    SmsTemplate:
      description: An SMS template.
      example:
        settings:
          payload_overrides: '{"name": "John"}'
          to_number: "+1234567890"
        text_body: Hello, world!
      properties:
        settings:
          anyOf:
            - description: The settings for the SMS template.
              properties:
                payload_overrides:
                  description: A JSON object overrides the payload sent to the SMS provider.
                  example: '{"name": "John"}'
                  nullable: true
                  type: string
                to_number:
                  description: >-
                    An override for the phone number to send the SMS to. When not set, defaults to
                    `recipient.phone_number`.
                  example: "+1234567890"
                  nullable: true
                  type: string
              type: object
            - nullable: true
          description: The settings for the SMS template. Can be omitted.
          type: object
        text_body:
          description: The message of the SMS.
          example: Hello, world!
          type: string
      required:
        - text_body
      title: SmsTemplate
      type: object
    EmailChannelSettings:
      description: Email channel settings.
      example:
        bcc_address: bcc@example.com
        cc_address: cc@example.com
        from_email: hello@example.com
        from_name: John Doe
        json_overrides: '{"subject": "Hello, world!"}'
        link_tracking: true
        open_tracking: true
        reply_to_address: reply@example.com
        to_address: hello@example.com
      properties:
        bcc_address:
          description: The BCC address on email notifications. Supports liquid. Defaults to `from_address`.
          example: hello@example.com
          nullable: true
          type: string
        cc_address:
          description: The CC address on email notifications. Supports liquid. Defaults to `from_address`.
          example: hello@example.com
          nullable: true
          type: string
        from_email:
          description: The email address from which this channel will send. Supports liquid.
          example: hello@example.com
          nullable: true
          type: string
        from_name:
          description: The name from which this channel will send. Supports liquid.
          example: John Doe
          nullable: true
          type: string
        json_overrides:
          description: >-
            A JSON template for any custom overrides to merge into the API payload that is sent to the email
            provider. Supports liquid.
          example: '{"subject": "Hello, world!"}'
          nullable: true
          type: string
        link_tracking:
          description: Whether to track link clicks on email notifications.
          example: true
          type: boolean
        open_tracking:
          description: Whether to track opens on email notifications.
          example: true
          type: boolean
        reply_to_address:
          description: The Reply-to address on email notifications. Supports liquid. Defaults to `from_address`.
          example: hello@example.com
          nullable: true
          type: string
        to_address:
          description: The email address to which this channel will send. Defaults to `recipient.email`. Supports liquid.
          example: hello@example.com
          type: string
      title: EmailChannelSettings
      type: object
    SendWindow:
      description: A send window time for a notification. Describes a single day.
      example:
        day: monday
        from: "09:00"
        type: send
        until: "17:00"
      properties:
        day:
          description: The day of the week.
          enum:
            - monday
            - tuesday
            - wednesday
            - thursday
            - friday
            - saturday
            - sunday
          type: string
        from:
          description: The start time of the send window.
          example: "09:00"
          format: time
          nullable: true
          type: string
        type:
          description: The type of send window.
          enum:
            - send
            - do_not_send
          example: send
          type: string
        until:
          description: The end time of the send window.
          example: "17:00"
          format: time
          nullable: true
          type: string
      required:
        - day
        - type
      title: SendWindow
      type: object
    PaginatedEnvironmentResponse:
      description: A paginated list of Environment. Contains a list of entries and page information.
      example:
        entries:
          - created_at: "2022-10-31T19:59:03Z"
            deleted_at: null
            hide_pii_data: false
            label_color: "#000000"
            last_commit_at: "2022-10-31T19:59:03Z"
            name: Production
            order: 0
            owner: system
            slug: production
            updated_at: "2022-10-31T19:59:03Z"
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/Environment"
          nullable: false
          type: array
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedEnvironmentResponse
      type: object
    PreviewWorkflowTemplateRequest:
      description: A request to preview a workflow template.
      example:
        actor: dnedry
        data:
          park_id: 1
        recipient: dnedry
        tenant: acme-corp
      properties:
        actor:
          anyOf:
            - $ref: "#/components/schemas/RecipientReference"
            - nullable: true
          description: The actor to reference in the the workflow run.
          type: object
        data:
          additionalProperties: true
          description: The data to pass to the workflow template for rendering.
          type: object
        recipient:
          $ref: "#/components/schemas/RecipientReference"
        tenant:
          description: The tenant to associate the workflow with.
          nullable: true
          type: string
      required:
        - recipient
      title: PreviewWorkflowTemplateRequest
      type: object
    EmailHtmlBlock:
      description: An HTML block in an email template.
      example:
        content: <p>Hello, world!</p>
        id: 123e4567-e89b-12d3-a456-426614174000
        type: html
        version: 1
      properties:
        content:
          description: The HTML content of the block.
          type: string
        id:
          description: The ID of the block.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        type:
          description: The type of the block.
          type: string
        version:
          description: The version of the block.
          example: 1
          type: integer
      required:
        - id
        - type
        - version
        - content
      title: EmailHtmlBlock
      type: object
    PaginatedEmailLayoutResponse:
      description: A paginated list of EmailLayout. Contains a list of entries and page information.
      example:
        entries:
          - created_at: "2021-01-01T00:00:00Z"
            footer_links:
              - text: Example
                url: http://example.com
            html_layout: <html><body>Hello, world!</body></html>
            key: transactional
            name: Transactional
            sha: "1234567890"
            text_layout: Hello, world!
            updated_at: "2021-01-01T00:00:00Z"
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/EmailLayout"
          nullable: false
          type: array
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedEmailLayoutResponse
      type: object
    RunWorkflowResponse:
      description: A response to a run workflow request.
      example:
        workflow_run_id: 123e4567-e89b-12d3-a456-426614174000
      properties:
        workflow_run_id:
          description: The ID of the workflow run.
          format: uuid
          type: string
      required:
        - workflow_run_id
      title: RunWorkflowResponse
      type: object
    Partial:
      description: A partial is a reusable piece of content that can be used in a template.
      example:
        content: <p>Hello, world!</p>
        description: This is a test partial
        environment: development
        icon_name: icon-name
        inserted_at: "2021-01-01T00:00:00Z"
        key: my-partial
        name: My Partial
        type: html
        updated_at: "2021-01-01T00:00:00Z"
        valid: true
        visual_block_enabled: true
      properties:
        content:
          description: The partial content.
          type: string
        description:
          description: >-
            An arbitrary string attached to a partial object. Useful for adding notes about the partial for
            internal purposes. Maximum of 280 characters allowed.
          type: string
        environment:
          description: The slug of the environment in which the partial exists.
          type: string
        icon_name:
          description: The name of the icon to be used in the visual editor.
          type: string
        inserted_at:
          description: The timestamp of when the resource was created.
          format: date-time
          type: string
        key:
          description: >-
            The unique key string for the partial object. Must be at minimum 3 characters and at maximum 255
            characters in length. Must be in the format of ^[a-z0-9_-]+$.
          type: string
        name:
          description: A name for the partial. Must be at maximum 255 characters in length.
          type: string
        type:
          description: The partial type. One of 'html', 'json', 'markdown', 'text'.
          enum:
            - html
            - text
            - json
            - markdown
          type: string
        updated_at:
          description: The timestamp of when the resource was last updated.
          format: date-time
          type: string
        valid:
          description: Whether the partial and its content are in a valid state.
          type: boolean
        visual_block_enabled:
          description: Indicates whether the partial can be used in the visual editor. Only applies to HTML partials.
          type: boolean
      required:
        - key
        - type
        - name
        - content
        - inserted_at
        - updated_at
        - valid
      title: Partial
      type: object
    MessageType:
      description: A message type object.
      example:
        archived_at: "2021-01-01T00:00:00Z"
        created_at: "2021-01-01T00:00:00Z"
        deleted_at: "2021-01-01T00:00:00Z"
        description: Email message type
        environment: development
        icon_name: email
        key: email
        name: Email
        owner: user
        preview: <div>Hello, world!</div>
        semver: 1.0.0
        sha: "1234567890"
        updated_at: "2021-01-01T00:00:00Z"
        valid: true
        variants:
          - fields:
              - key: text_field
                settings:
                  description: A description of the text field
                  max_length: 100
                  min_length: 10
                  required: true
                type: text
                value: Hello, world!
            key: default
            name: Default
      properties:
        archived_at:
          description: The timestamp of when the resource was deleted.
          format: date-time
          type: string
        created_at:
          description: The timestamp of when the resource was created.
          format: date-time
          type: string
        deleted_at:
          description: The timestamp of when the resource was deleted.
          format: date-time
          nullable: true
          type: string
        description:
          description: >-
            An arbitrary string attached to a message type object. Useful for adding notes about the message
            type for internal purposes. Maximum of 280 characters allowed.
          nullable: true
          type: string
        environment:
          description: The environment of the message type.
          type: string
        icon_name:
          description: The icon name of the message type.
          type: string
        key:
          description: >-
            The unique key string for the message type object. Must be at minimum 3 characters and at maximum
            255 characters in length. Must be in the format of ^[a-z0-9_-]+$.
          type: string
        name:
          description: A name for the message type. Must be at maximum 255 characters in length.
          type: string
        owner:
          description: The owner of the message type.
          enum:
            - system
            - user
          type: string
        preview:
          description: An HTML/liquid template for the message type preview.
          type: string
        semver:
          description: The semantic version of the message type.
          example: 1.0.0
          type: string
        sha:
          description: The SHA hash of the message type.
          type: string
        updated_at:
          description: The timestamp of when the resource was last updated.
          format: date-time
          type: string
        valid:
          description: Whether the message type is valid.
          type: boolean
        variants:
          description: The variants of the message type.
          items:
            $ref: "#/components/schemas/MessageTypeVariant"
          type: array
      required:
        - key
        - valid
        - owner
        - environment
        - created_at
        - name
        - variants
        - preview
        - semver
        - updated_at
        - sha
      title: MessageType
      type: object
    WorkflowFetchStep:
      description: A workflow fetch step.
      example:
        name: Fetch step
        ref: fetch_1
        settings:
          body: null
          headers:
            - key: X-API-Key
              value: "1234567890"
          method: get
          query_params:
            - key: key
              value: value
          url: https://example.com
        type: fetch
      properties:
        conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
          description: >-
            A conditions object that describes one or more conditions to be met in order for the step to be
            executed.
          type: object
        description:
          description: >-
            An arbitrary string attached to a workflow step. Useful for adding notes about the workflow for
            internal purposes.
          example: Fetch step description
          nullable: true
          type: string
        name:
          description: A name for the workflow step.
          example: Fetch step
          type: string
        ref:
          description: The reference key of the workflow step. Must be unique per workflow.
          example: fetch_step
          type: string
        settings:
          $ref: "#/components/schemas/RequestTemplate"
        type:
          description: The type of the workflow step.
          enum:
            - fetch
          example: fetch
          type: string
      required:
        - type
        - ref
        - name
        - settings
      title: WorkflowFetchStep
      type: object
    PaginatedPartialResponse:
      description: A paginated list of Partial. Contains a list of entries and page information.
      example:
        entries:
          - content: <p>Hello, world!</p>
            description: This is a test partial
            environment: development
            icon_name: icon-name
            inserted_at: "2021-01-01T00:00:00Z"
            key: my-partial
            name: My Partial
            type: html
            updated_at: "2021-01-01T00:00:00Z"
            valid: true
            visual_block_enabled: true
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/Partial"
          nullable: false
          type: array
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedPartialResponse
      type: object
    WrappedTranslationResponse:
      description: Wraps the Translation response under the `translation` key.
      example:
        translation:
          content: '{"hello":"Hello, world!"}'
          format: json
          inserted_at: "2021-01-01T00:00:00Z"
          locale_code: en
          namespace: my_app
          updated_at: "2021-01-01T00:00:00Z"
      properties:
        translation:
          $ref: "#/components/schemas/Translation"
      required:
        - translation
      title: WrappedTranslationResponse
      type: object
    MessageTypeSelectField:
      description: A select field used in a message type.
      example:
        key: select_field
        label: Select Field
        settings:
          default: option1
          description: A description of the select field
          options:
            - label: Option 1
              value: option1
            - label: Option 2
              value: option2
            - label: Option 3
              value: option3
          required: true
        type: select
        value: option1
      properties:
        key:
          description: The unique key of the field.
          example: key
          type: string
        label:
          description: The label of the field.
          example: Label
          nullable: true
          type: string
        settings:
          description: Settings for the select field.
          properties:
            default:
              description: The default value for the select field.
              example: option1
              nullable: true
              type: string
            description:
              example: A description of the field, used in the UI
              type: string
            options:
              description: The available options for the select field.
              items:
                properties:
                  label:
                    description: The display label for the option.
                    example: Option 1
                    type: string
                  value:
                    description: The value for the option.
                    example: option1
                    type: string
                required:
                  - value
                type: object
              type: array
            required:
              description: Whether the field is required.
              example: true
              type: boolean
          type: object
        type:
          description: The type of the field.
          enum:
            - select
          example: select
          type: string
        value:
          description: The selected value.
          example: option1
          nullable: true
          type: string
      required:
        - type
        - key
        - settings
      title: MessageTypeSelectField
      type: object
    WorkflowTriggerWorkflowStep:
      description: A workflow trigger workflow step.
      example:
        name: Trigger workflow step
        ref: trigger_workflow_step
        settings:
          actor: "{{ actor.id }}"
          cancellation_key: "{{ workflow.cancellation_key }}"
          data: "{{ data | json }}"
          recipients: "{{ recipient.id }}"
          tenant: "{{ tenant.id }}"
          workflow_key: dinosaurs-loose
        type: trigger_workflow
      properties:
        conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
          description: A set of conditions to be evaluated for this trigger workflow step.
          type: object
        description:
          description: A description for the workflow step.
          example: Trigger workflow step description
          type: string
        name:
          description: A name for the workflow step.
          example: Trigger workflow step
          type: string
        ref:
          description: The reference key of the workflow step. Must be unique per workflow.
          example: trigger_workflow_step
          type: string
        settings:
          description: The settings for the workflow trigger workflow step.
          properties:
            actor:
              description: The actor to trigger the workflow with. Supports liquid.
              example: "{{ actor.id }}"
              type: string
            cancellation_key:
              description: The cancellation key to trigger the workflow with. Supports liquid.
              example: "{{ workflow.cancellation_key }}"
              type: string
            data:
              description: The data to be supplied to the workflow. Supports liquid.
              example: "{{ data | json }}"
              type: string
            recipients:
              description: The recipients or recipient to trigger the workflow for. Supports liquid.
              example: "{{ recipient.id }}"
              type: string
            tenant:
              description: The tenant to trigger the workflow with. Supports liquid.
              example: "{{ tenant.id }}"
              type: string
            workflow_key:
              description: The key of the workflow to trigger. Supports liquid.
              example: dinosaurs-loose
              type: string
          type: object
        type:
          description: The type of the workflow step.
          enum:
            - trigger_workflow
          example: trigger_workflow
          type: string
      required:
        - type
        - ref
        - name
        - settings
      title: WorkflowTriggerWorkflowStep
      type: object
    Condition:
      description: A condition to be evaluated.
      example:
        argument: some_property
        operator: equal_to
        variable: recipient.property
      properties:
        argument:
          description: >-
            The argument to be evaluated. Arguments can be either static values or dynamic properties. Static
            values will always be JSON decoded so will support strings, lists, objects, numbers, and booleans.
            Dynamic values should be path expressions.
          example: some_property
          nullable: true
          type: string
        operator:
          description: The operator to use in the evaluation of the condition.
          enum:
            - equal_to
            - not_equal_to
            - greater_than
            - less_than
            - greater_than_or_equal_to
            - less_than_or_equal_to
            - contains
            - not_contains
            - contains_all
            - empty
            - not_empty
            - is_audience_member
            - is_not_audience_member
          example: equal_to
          type: string
        variable:
          description: >-
            The variable to be evaluated. Variables can be either static values or dynamic properties. Static
            values will always be JSON decoded so will support strings, lists, objects, numbers, and booleans.
            Dynamic values should be path expressions.
          example: recipient.property
          type: string
      required:
        - variable
        - operator
      title: Condition
      type: object
    PushTemplate:
      description: A push notification template.
      example:
        settings:
          payload_overrides: '{"name": "John"}'
        text_body: Hello, world!
        title: Hello, world!
      properties:
        settings:
          anyOf:
            - properties:
                delivery_type:
                  description: >-
                    The delivery type of the push notification. Defaults to `content`. Set as silent to send a
                    data-only notification. When set to `data`, no body will be sent.
                  enum:
                    - silent
                    - content
                  example: content
                  type: string
                payload_overrides:
                  description: A JSON object overrides the payload sent to the push provider.
                  example: '{"name": "John"}'
                  type: string
              type: object
            - nullable: true
          description: The settings for the push template. Can be omitted.
          type: object
        text_body:
          description: The body of the push notification.
          example: Hello, world!
          type: string
        title:
          description: The title of the push notification.
          example: Hello, world!
          type: string
      required:
        - title
        - text_body
      title: PushTemplate
      type: object
    CommitAuthor:
      description: The author of the commit.
      example:
        email: john.doe@example.com
        name: John Doe
      properties:
        email:
          description: The email address of the commit author.
          type: string
        name:
          description: The name of the commit author.
          nullable: true
          type: string
      required:
        - email
      title: CommitAuthor
      type: object
    CommitResource:
      description: The resource object associated with the commit.
      example:
        identifier: my-email-layout
        type: email_layout
      properties:
        identifier:
          description: The unique identifier for the resource.
          type: string
        type:
          description: The type of the resource object.
          enum:
            - email_layout
            - workflow
            - translation
            - partial
            - message_type
          example: workflow
          type: string
      required:
        - identifier
        - type
      title: CommitResource
      type: object
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
info:
  title: Knock Management API (mAPI)
  version: "1.0"
openapi: 3.0.0
paths:
  /v1/api_keys/exchange:
    post:
      callbacks: {}
      description: >-
        Given an authenticated service token and an environment, will exchange the service token for a secret
        API key that can be used to make requests to the public API.
      operationId: exchangeForApiKey
      parameters:
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: false
          schema:
            example: development
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Returns an API key that can be used to make requests to the public API.
                example:
                  api_key: sk_1234567890
                properties:
                  api_key:
                    description: The secret API key exchanged from the service token.
                    type: string
                required:
                  - api_key
                title: ExchangeForApiKeyResponse
                type: object
          description: OK
      summary: Exchange for API key
      tags:
        - API keys
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.apiKeys.exchange();

            console.log(response.api_key);
          }

          main();
  /v1/channel_groups:
    get:
      callbacks: {}
      description: >-
        Returns a paginated list of channel groups. Note: the list of channel groups is across the entire
        account, not scoped to an environment.
      operationId: listChannelGroups
      parameters:
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of ChannelGroup. Contains a list of entries and page information.
                example:
                  entries:
                    - channel_rules:
                        - channel:
                            archived_at: "2021-01-01T00:00:00Z"
                            created_at: "2021-01-01T00:00:00Z"
                            custom_icon_url: https://example.com/icon.png
                            key: email_channel
                            name: My Email Channel
                            provider: sendgrid
                            type: email
                            updated_at: "2021-01-01T00:00:00Z"
                            visibility: user
                          created_at: "2021-01-01T00:00:00Z"
                          index: 0
                          rule_type: always
                          updated_at: "2021-01-01T00:00:00Z"
                      channel_type: push
                      created_at: "2021-01-01T00:00:00Z"
                      key: push-group
                      name: Push Notification Group
                      operator: any
                      source: user
                      updated_at: "2021-01-01T00:00:00Z"
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/ChannelGroup"
                    nullable: false
                    type: array
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedChannelGroupResponse
                type: object
          description: OK
      summary: List channel groups
      tags:
        - Channel Groups
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const channelGroup of client.channelGroups.list()) {
              console.log(channelGroup.channel_rules);
            }
          }

          main();
  /v1/channels:
    get:
      callbacks: {}
      description: >-
        Returns a paginated list of channels. Note: the list of channels is across the entire account, not
        scoped to an environment.
      operationId: listChannels
      parameters:
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of Channel. Contains a list of entries and page information.
                example:
                  entries:
                    - archived_at: "2021-01-01T00:00:00Z"
                      created_at: "2021-01-01T00:00:00Z"
                      custom_icon_url: https://example.com/icon.png
                      key: email_channel
                      name: My Email Channel
                      provider: sendgrid
                      type: email
                      updated_at: "2021-01-01T00:00:00Z"
                      visibility: user
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/Channel"
                    nullable: false
                    type: array
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedChannelResponse
                type: object
          description: OK
      summary: List channels
      tags:
        - Channels
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const channel of client.channels.list()) {
              console.log(channel.provider);
            }
          }

          main();
  /v1/commits:
    get:
      callbacks: {}
      description: >-
        Returns a paginated list of commits in a given environment. The commits are ordered from most recent
        first.
      operationId: listCommits
      parameters:
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: false
          schema:
            example: development
            type: string
        - description: >-
            Whether to show only promoted or unpromoted changes between the given environment and the
            subsequent environment.
          in: query
          name: promoted
          required: false
          schema:
            type: boolean
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of Commit. Contains a list of entries and page information.
                example:
                  entries:
                    - commit_author:
                        email: john.doe@example.com
                        name: John Doe
                      commit_message: This is a commit message
                      created_at: "2021-01-01T00:00:00Z"
                      environment: development
                      id: 123e4567-e89b-12d3-a456-426614174000
                      resource:
                        identifier: my-email-layout
                        type: email_layout
                      updated_at: "2021-01-01T00:00:00Z"
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/Commit"
                    nullable: false
                    type: array
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedCommitResponse
                type: object
          description: OK
      summary: List commits
      tags:
        - Commits
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const commit of client.commits.list()) {
              console.log(commit.id);
            }
          }

          main();
    put:
      callbacks: {}
      description: Commit all changes across all resources in the development environment.
      operationId: commitAllChanges
      parameters:
        - description: A slug of the environment in which to commit all changes.
          in: query
          name: environment
          required: false
          schema:
            example: development
            type: string
        - description: An optional message to include in a commit.
          in: query
          name: commit_message
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The result of the commit operation.
                properties:
                  result:
                    example: success
                    type: string
                required:
                  - result
                type: object
          description: OK
      summary: Commit all changes
      tags:
        - Commits
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.commits.commitAll();

            console.log(response.result);
          }

          main();
  /v1/commits/promote:
    put:
      callbacks: {}
      description: Promote all changes across all resources to the target environment from its preceding environment.
      operationId: promoteAllCommits
      parameters:
        - description: >
            A slug of the target environment to which you want to promote all changes from its directly
            preceding environment.


            For example, if you have three environments “development”, “staging”, and “production” (in that
            order), setting this param to “production” will promote all commits not currently in production
            from staging.


            Note: This must be a non-development environment.
          in: query
          name: to_environment
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The result of the commit operation.
                properties:
                  result:
                    example: success
                    type: string
                required:
                  - result
                type: object
          description: OK
      summary: Promote all changes
      tags:
        - Commits
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.commits.promoteAll({ to_environment: 'to_environment' });

            console.log(response.result);
          }

          main();
  /v1/commits/{id}:
    get:
      callbacks: {}
      description: Retrieve a single commit by its ID.
      operationId: getCommit
      parameters:
        - description: The id of the commit to retrieve.
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Commit"
          description: OK
      summary: Get a commit
      tags:
        - Commits
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const commit = await client.commits.retrieve('182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e');

            console.log(commit.id);
          }

          main();
  /v1/commits/{id}/promote:
    put:
      callbacks: {}
      description: Promotes one change to the subsequent environment.
      operationId: promoteOneCommit
      parameters:
        - description: The target commit ID to promote to the subsequent environment.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Commit response under the `commit` key.
                example:
                  commit:
                    commit_author:
                      email: john.doe@example.com
                      name: John Doe
                    commit_message: This is a commit message
                    created_at: "2021-01-01T00:00:00Z"
                    environment: development
                    id: 123e4567-e89b-12d3-a456-426614174000
                    resource:
                      identifier: my-email-layout
                      type: email_layout
                    updated_at: "2021-01-01T00:00:00Z"
                properties:
                  commit:
                    $ref: "#/components/schemas/Commit"
                required:
                  - commit
                title: WrappedCommitResponse
                type: object
          description: OK
      summary: Promote one commit
      tags:
        - Commits
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.commits.promoteOne('id');

            console.log(response.commit);
          }

          main();
  /v1/email_layouts:
    get:
      callbacks: {}
      description: Returns a paginated list of email layouts available in a given environment.
      operationId: listEmailLayouts
      parameters:
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: false
          schema:
            example: development
            type: string
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of EmailLayout. Contains a list of entries and page information.
                example:
                  entries:
                    - created_at: "2021-01-01T00:00:00Z"
                      footer_links:
                        - text: Example
                          url: http://example.com
                      html_layout: <html><body>Hello, world!</body></html>
                      key: transactional
                      name: Transactional
                      sha: "1234567890"
                      text_layout: Hello, world!
                      updated_at: "2021-01-01T00:00:00Z"
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/EmailLayout"
                    nullable: false
                    type: array
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedEmailLayoutResponse
                type: object
          description: OK
      summary: List email layouts
      tags:
        - Email layouts
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const emailLayout of client.emailLayouts.list()) {
              console.log(emailLayout.created_at);
            }
          }

          main();
  /v1/email_layouts/{email_layout_key}:
    get:
      callbacks: {}
      description: Retrieve an email layout by its key, in a given environment.
      operationId: getEmailLayout
      parameters:
        - description: The key of the email layout to show.
          in: path
          name: email_layout_key
          required: true
          schema:
            type: string
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: false
          schema:
            example: development
            type: string
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailLayout"
          description: OK
      summary: Get email layout
      tags:
        - Email layouts
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const emailLayout = await client.emailLayouts.retrieve('email_layout_key');

            console.log(emailLayout.created_at);
          }

          main();
    put:
      callbacks: {}
      description: |
        Updates an email layout, or creates a new one if it does not yet exist.

        Note: this endpoint only operates in the "development" environment.
      operationId: upsertEmailLayout
      parameters:
        - description: The key of the email layout to upsert.
          in: path
          name: email_layout_key
          required: true
          schema:
            type: string
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: false
          schema:
            example: development
            type: string
        - description: Whether to commit the resource at the same time as modifying it.
          in: query
          name: commit
          required: false
          schema:
            type: boolean
        - description: The message to commit the resource with, only used if `commit` is `true`.
          in: query
          name: commit_message
          required: false
          schema:
            type: string
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the EmailLayoutRequest request under the email_layout key.
              example:
                email_layout:
                  footer_links:
                    - text: Example
                      url: http://example.com
                  html_layout: <html><body>Hello, world!</body></html>
                  name: Transactional
                  text_layout: Hello, world!
              properties:
                email_layout:
                  $ref: "#/components/schemas/EmailLayoutRequest"
              required:
                - email_layout
              title: WrappedEmailLayoutRequestRequest
              type: object
        description: Email layout
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the EmailLayout response under the `email_layout` key.
                example:
                  email_layout:
                    created_at: "2021-01-01T00:00:00Z"
                    footer_links:
                      - text: Example
                        url: http://example.com
                    html_layout: <html><body>Hello, world!</body></html>
                    key: transactional
                    name: Transactional
                    sha: "1234567890"
                    text_layout: Hello, world!
                    updated_at: "2021-01-01T00:00:00Z"
                properties:
                  email_layout:
                    $ref: "#/components/schemas/EmailLayout"
                required:
                  - email_layout
                title: WrappedEmailLayoutResponse
                type: object
          description: OK
      summary: Upsert email layout
      tags:
        - Email layouts
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.emailLayouts.upsert('email_layout_key', {
              email_layout: {
                html_layout: '<html><body>Hello, world!</body></html>',
                name: 'Transactional',
                text_layout: 'Hello, world!',
              },
            });

            console.log(response.email_layout);
          }

          main();
  /v1/email_layouts/{email_layout_key}/validate:
    put:
      callbacks: {}
      description: |
        Validates an email layout payload without persisting it.

        Note: this endpoint only operates in the "development" environment.
      operationId: validateEmailLayout
      parameters:
        - description: The key of the email layout to validate.
          in: path
          name: email_layout_key
          required: true
          schema:
            type: string
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: false
          schema:
            example: development
            type: string
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the EmailLayoutRequest request under the email_layout key.
              example:
                email_layout:
                  footer_links:
                    - text: Example
                      url: http://example.com
                  html_layout: <html><body>Hello, world!</body></html>
                  name: Transactional
                  text_layout: Hello, world!
              properties:
                email_layout:
                  $ref: "#/components/schemas/EmailLayoutRequest"
              required:
                - email_layout
              title: WrappedEmailLayoutRequestRequest
              type: object
        description: Email layout
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the EmailLayout response under the `email_layout` key.
                example:
                  email_layout:
                    created_at: "2021-01-01T00:00:00Z"
                    footer_links:
                      - text: Example
                        url: http://example.com
                    html_layout: <html><body>Hello, world!</body></html>
                    key: transactional
                    name: Transactional
                    sha: "1234567890"
                    text_layout: Hello, world!
                    updated_at: "2021-01-01T00:00:00Z"
                properties:
                  email_layout:
                    $ref: "#/components/schemas/EmailLayout"
                required:
                  - email_layout
                title: WrappedEmailLayoutResponse
                type: object
          description: OK
      summary: Validate email layout
      tags:
        - Email layouts
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.emailLayouts.validate('email_layout_key', {
              email_layout: {
                html_layout: '<html><body>Hello, world!</body></html>',
                name: 'Transactional',
                text_layout: 'Hello, world!',
              },
            });

            console.log(response.email_layout);
          }

          main();
  /v1/environments:
    get:
      callbacks: {}
      description: >-
        Returns a paginated list of environments. The environments will be returned in order of their index,
        with the `development` environment first.
      operationId: listEnvironments
      parameters:
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of Environment. Contains a list of entries and page information.
                example:
                  entries:
                    - created_at: "2022-10-31T19:59:03Z"
                      deleted_at: null
                      hide_pii_data: false
                      label_color: "#000000"
                      last_commit_at: "2022-10-31T19:59:03Z"
                      name: Production
                      order: 0
                      owner: system
                      slug: production
                      updated_at: "2022-10-31T19:59:03Z"
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/Environment"
                    nullable: false
                    type: array
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedEnvironmentResponse
                type: object
          description: OK
      summary: List environments
      tags:
        - Environments
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const environment of client.environments.list()) {
              console.log(environment.hide_pii_data);
            }
          }

          main();
  /v1/environments/{environment_slug}:
    get:
      callbacks: {}
      description: Returns a single environment by its slug.
      operationId: getEnvironment
      parameters:
        - description: The slug of the environment to retrieve.
          in: path
          name: environment_slug
          required: true
          schema:
            example: development
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
          description: OK
      summary: Get an environment
      tags:
        - Environments
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const environment = await client.environments.retrieve('development');

            console.log(environment.hide_pii_data);
          }

          main();
  /v1/message_types:
    get:
      callbacks: {}
      description: Returns a paginated list of message types available in a given environment.
      operationId: listMessageTypes
      parameters:
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: false
          schema:
            example: development
            type: string
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of MessageType. Contains a list of entries and page information.
                example:
                  entries:
                    - archived_at: "2021-01-01T00:00:00Z"
                      created_at: "2021-01-01T00:00:00Z"
                      deleted_at: "2021-01-01T00:00:00Z"
                      description: Email message type
                      environment: development
                      icon_name: email
                      key: email
                      name: Email
                      owner: user
                      preview: <div>Hello, world!</div>
                      semver: 1.0.0
                      sha: "1234567890"
                      updated_at: "2021-01-01T00:00:00Z"
                      valid: true
                      variants:
                        - fields:
                            - key: text_field
                              settings:
                                description: A description of the text field
                                max_length: 100
                                min_length: 10
                                required: true
                              type: text
                              value: Hello, world!
                          key: default
                          name: Default
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/MessageType"
                    nullable: false
                    type: array
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedMessageTypeResponse
                type: object
          description: OK
      summary: List message types
      tags:
        - Message types
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const messageType of client.messageTypes.list()) {
              console.log(messageType.valid);
            }
          }

          main();
  /v1/message_types/{message_type_key}:
    get:
      callbacks: {}
      description: Retrieve a message type by its key, in a given environment.
      operationId: getMessageType
      parameters:
        - description: The key of the message type to retrieve.
          in: path
          name: message_type_key
          required: true
          schema:
            example: email
            type: string
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: false
          schema:
            example: development
            type: string
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageType"
          description: OK
      summary: Get message type
      tags:
        - Message types
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const messageType = await client.messageTypes.retrieve('email');

            console.log(messageType.valid);
          }

          main();
    put:
      callbacks: {}
      description: |
        Updates a message type, or creates a new one if it does not yet exist.

        Note: this endpoint only operates in the `development` environment.
      operationId: upsertMessageType
      parameters:
        - description: The key of the message type to upsert.
          in: path
          name: message_type_key
          required: true
          schema:
            example: email
            type: string
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: false
          schema:
            example: development
            type: string
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
        - description: Whether to commit the resource at the same time as modifying it.
          in: query
          name: commit
          required: false
          schema:
            type: boolean
        - description: The message to commit the resource with, only used if `commit` is `true`.
          in: query
          name: commit_message
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the MessageTypeRequest request under the message_type key.
              example:
                message_type:
                  description: This is a message type
                  name: My Message Type
                  preview: <div>Hello, world!</div>
                  variants:
                    - fields:
                        - key: text_field
                          settings:
                            description: A description of the text field
                            max_length: 100
                            min_length: 10
                            required: true
                          type: text
                          value: Hello, world!
                      key: default
                      name: Default
              properties:
                message_type:
                  $ref: "#/components/schemas/MessageTypeRequest"
              required:
                - message_type
              title: WrappedMessageTypeRequestRequest
              type: object
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the MessageType response under the `message_type` key.
                example:
                  message_type:
                    archived_at: "2021-01-01T00:00:00Z"
                    created_at: "2021-01-01T00:00:00Z"
                    deleted_at: "2021-01-01T00:00:00Z"
                    description: Email message type
                    environment: development
                    icon_name: email
                    key: email
                    name: Email
                    owner: user
                    preview: <div>Hello, world!</div>
                    semver: 1.0.0
                    sha: "1234567890"
                    updated_at: "2021-01-01T00:00:00Z"
                    valid: true
                    variants:
                      - fields:
                          - key: text_field
                            settings:
                              description: A description of the text field
                              max_length: 100
                              min_length: 10
                              required: true
                            type: text
                            value: Hello, world!
                        key: default
                        name: Default
                properties:
                  message_type:
                    $ref: "#/components/schemas/MessageType"
                required:
                  - message_type
                title: WrappedMessageTypeResponse
                type: object
          description: OK
      summary: Upsert message type
      tags:
        - Message types
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.messageTypes.upsert('email', {
              message_type: {
                description: 'This is a message type',
                name: 'My Message Type',
                preview: '<div>Hello, world!</div>',
              },
            });

            console.log(response.message_type);
          }

          main();
  /v1/message_types/{message_type_key}/validate:
    put:
      callbacks: {}
      description: |
        Validates a message type payload without persisting it.

        Note: this endpoint only operates on message types in the `development` environment.
      operationId: validateMessageType
      parameters:
        - description: The key of the message type to validate.
          in: path
          name: message_type_key
          required: true
          schema:
            example: email
            type: string
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the MessageTypeRequest request under the message_type key.
              example:
                message_type:
                  description: This is a message type
                  name: My Message Type
                  preview: <div>Hello, world!</div>
                  variants:
                    - fields:
                        - key: text_field
                          settings:
                            description: A description of the text field
                            max_length: 100
                            min_length: 10
                            required: true
                          type: text
                          value: Hello, world!
                      key: default
                      name: Default
              properties:
                message_type:
                  $ref: "#/components/schemas/MessageTypeRequest"
              required:
                - message_type
              title: WrappedMessageTypeRequestRequest
              type: object
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the MessageType response under the `message_type` key.
                example:
                  message_type:
                    archived_at: "2021-01-01T00:00:00Z"
                    created_at: "2021-01-01T00:00:00Z"
                    deleted_at: "2021-01-01T00:00:00Z"
                    description: Email message type
                    environment: development
                    icon_name: email
                    key: email
                    name: Email
                    owner: user
                    preview: <div>Hello, world!</div>
                    semver: 1.0.0
                    sha: "1234567890"
                    updated_at: "2021-01-01T00:00:00Z"
                    valid: true
                    variants:
                      - fields:
                          - key: text_field
                            settings:
                              description: A description of the text field
                              max_length: 100
                              min_length: 10
                              required: true
                            type: text
                            value: Hello, world!
                        key: default
                        name: Default
                properties:
                  message_type:
                    $ref: "#/components/schemas/MessageType"
                required:
                  - message_type
                title: WrappedMessageTypeResponse
                type: object
          description: OK
      summary: Validate message type
      tags:
        - Message types
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.messageTypes.validate('email', {
              message_type: {
                description: 'This is a message type',
                name: 'My Message Type',
                preview: '<div>Hello, world!</div>',
              },
            });

            console.log(response.message_type);
          }

          main();
  /v1/partials:
    get:
      callbacks: {}
      description: List all partials for a given environment.
      operationId: listPartials
      parameters:
        - description: A slug of the environment from which to query partials.
          in: query
          name: environment
          required: true
          schema:
            type: string
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of Partial. Contains a list of entries and page information.
                example:
                  entries:
                    - content: <p>Hello, world!</p>
                      description: This is a test partial
                      environment: development
                      icon_name: icon-name
                      inserted_at: "2021-01-01T00:00:00Z"
                      key: my-partial
                      name: My Partial
                      type: html
                      updated_at: "2021-01-01T00:00:00Z"
                      valid: true
                      visual_block_enabled: true
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/Partial"
                    nullable: false
                    type: array
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedPartialResponse
                type: object
          description: OK
      summary: List partials
      tags:
        - Partials
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const partial of client.partials.list({ environment: 'environment' })) {
              console.log(partial.valid);
            }
          }

          main();
  /v1/partials/{partial_key}:
    get:
      callbacks: {}
      description: Get a partial by its key.
      operationId: getPartial
      parameters:
        - description: A slug of the environment from which to query the partial.
          in: query
          name: environment
          required: true
          schema:
            type: string
        - description: The key of the partial to retrieve.
          in: path
          name: partial_key
          required: true
          schema:
            type: string
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Partial"
          description: OK
      summary: Get a partial
      tags:
        - Partials
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const partial = await client.partials.retrieve('partial_key', { environment: 'environment' });

            console.log(partial.valid);
          }

          main();
    put:
      callbacks: {}
      description: |
        Updates a partial of a given key, or creates a new one if it does not yet exist.

        Note: this endpoint only operates on partials in the “development” environment.
      operationId: upsertPartial
      parameters:
        - description: A slug of the environment in which to upsert the partial.
          in: query
          name: environment
          required: true
          schema:
            type: string
        - description: The key of the partial to upsert.
          in: path
          name: partial_key
          required: true
          schema:
            type: string
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
        - description: Whether to commit the resource at the same time as modifying it.
          in: query
          name: commit
          required: false
          schema:
            type: boolean
        - description: The message to commit the resource with, only used if `commit` is `true`.
          in: query
          name: commit_message
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the PartialRequest request under the partial key.
              example:
                partial:
                  content: <p>Hello, world!</p>
                  name: My Partial
                  type: html
              properties:
                partial:
                  $ref: "#/components/schemas/PartialRequest"
              required:
                - partial
              title: WrappedPartialRequestRequest
              type: object
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Partial response under the `partial` key.
                example:
                  partial:
                    content: <p>Hello, world!</p>
                    description: This is a test partial
                    environment: development
                    icon_name: icon-name
                    inserted_at: "2021-01-01T00:00:00Z"
                    key: my-partial
                    name: My Partial
                    type: html
                    updated_at: "2021-01-01T00:00:00Z"
                    valid: true
                    visual_block_enabled: true
                properties:
                  partial:
                    $ref: "#/components/schemas/Partial"
                required:
                  - partial
                title: WrappedPartialResponse
                type: object
          description: OK
      summary: Upsert a partial
      tags:
        - Partials
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.partials.upsert('partial_key', {
              environment: 'environment',
              partial: { content: '<p>Hello, world!</p>', name: 'My Partial', type: 'html' },
            });

            console.log(response.partial);
          }

          main();
  /v1/partials/{partial_key}/validate:
    put:
      callbacks: {}
      description: |
        Validates a partial payload without persisting it.

        Note: this endpoint only operates on partials in the “development” environment.
      operationId: validatePartial
      parameters:
        - description: A slug of the environment in which to validate the partial.
          in: query
          name: environment
          required: true
          schema:
            type: string
        - description: The key of the partial to validate.
          in: path
          name: partial_key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the PartialRequest request under the partial key.
              example:
                partial:
                  content: <p>Hello, world!</p>
                  name: My Partial
                  type: html
              properties:
                partial:
                  $ref: "#/components/schemas/PartialRequest"
              required:
                - partial
              title: WrappedPartialRequestRequest
              type: object
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Partial response under the `partial` key.
                example:
                  partial:
                    content: <p>Hello, world!</p>
                    description: This is a test partial
                    environment: development
                    icon_name: icon-name
                    inserted_at: "2021-01-01T00:00:00Z"
                    key: my-partial
                    name: My Partial
                    type: html
                    updated_at: "2021-01-01T00:00:00Z"
                    valid: true
                    visual_block_enabled: true
                properties:
                  partial:
                    $ref: "#/components/schemas/Partial"
                required:
                  - partial
                title: WrappedPartialResponse
                type: object
          description: OK
      summary: Validate a partial
      tags:
        - Partials
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.partials.validate('partial_key', {
              environment: 'environment',
              partial: { content: '<p>Hello, world!</p>', name: 'My Partial', type: 'html' },
            });

            console.log(response.partial);
          }

          main();
  /v1/translations:
    get:
      callbacks: {}
      description: >
        Returns a paginated list of translations available in a given environment. The translations are
        returned in alpha-sorted order by locale code.
      operationId: listTranslations
      parameters:
        - description: A specific locale code to filter translations for.
          in: query
          name: locale_code
          required: false
          schema:
            type: string
        - description: A specific namespace to filter translations for.
          in: query
          name: namespace
          required: false
          schema:
            type: string
        - description: Optionally specify the returned content format. Supports 'json' and 'po'. Defaults to 'json'.
          in: query
          name: format
          required: false
          schema:
            enum:
              - json
              - po
            type: string
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: false
          schema:
            example: development
            type: string
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of Translation. Contains a list of entries and page information.
                example:
                  entries:
                    - content: '{"hello":"Hello, world!"}'
                      format: json
                      inserted_at: "2021-01-01T00:00:00Z"
                      locale_code: en
                      namespace: my_app
                      updated_at: "2021-01-01T00:00:00Z"
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/Translation"
                    nullable: false
                    type: array
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedTranslationResponse
                type: object
          description: OK
      summary: List translations
      tags:
        - Translations
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const translation of client.translations.list()) {
              console.log(translation.content);
            }
          }

          main();
  /v1/translations/{locale_code}:
    get:
      callbacks: {}
      description: Retrieve a translation by its locale and namespace, in a given environment.
      operationId: getTranslation
      parameters:
        - description: A specific locale code to filter translations for.
          in: path
          name: locale_code
          required: true
          schema:
            type: string
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: false
          schema:
            example: development
            type: string
        - description: Optionally specify the returned content format. Supports 'json' and 'po'. Defaults to 'json'.
          in: query
          name: format
          required: false
          schema:
            enum:
              - json
              - po
            type: string
        - description: A specific namespace to filter translations for.
          in: query
          name: namespace
          required: false
          schema:
            type: string
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Translation response under the `translation` key.
                example:
                  translation:
                    content: '{"hello":"Hello, world!"}'
                    format: json
                    inserted_at: "2021-01-01T00:00:00Z"
                    locale_code: en
                    namespace: my_app
                    updated_at: "2021-01-01T00:00:00Z"
                properties:
                  translation:
                    $ref: "#/components/schemas/Translation"
                required:
                  - translation
                title: WrappedTranslationResponse
                type: object
          description: OK
      summary: Get translation
      tags:
        - Translations
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const translation = await client.translations.retrieve('locale_code');

            console.log(translation.translation);
          }

          main();
    put:
      callbacks: {}
      description: >
        Updates a translation of a given locale code + namespace, or creates a new one if it does not yet
        exist.


        Note: this endpoint only operates on translations in the "development" environment.
      operationId: upsertTranslation
      parameters:
        - description: A locale code of the translation.
          in: path
          name: locale_code
          required: true
          schema:
            type: string
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: false
          schema:
            example: development
            type: string
        - description: An optional namespace that identifies the translation.
          in: query
          name: namespace
          required: true
          schema:
            type: string
        - description: Optionally specify the returned content format. Supports 'json' and 'po'. Defaults to 'json'.
          in: query
          name: format
          required: false
          schema:
            enum:
              - json
              - po
            type: string
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the TranslationRequest request under the translation key.
              example:
                translation:
                  content: '{"hello":"Hello, world!"}'
                  format: json
              properties:
                translation:
                  $ref: "#/components/schemas/TranslationRequest"
              required:
                - translation
              title: WrappedTranslationRequestRequest
              type: object
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Translation response under the `translation` key.
                example:
                  translation:
                    content: '{"hello":"Hello, world!"}'
                    format: json
                    inserted_at: "2021-01-01T00:00:00Z"
                    locale_code: en
                    namespace: my_app
                    updated_at: "2021-01-01T00:00:00Z"
                properties:
                  translation:
                    $ref: "#/components/schemas/Translation"
                required:
                  - translation
                title: WrappedTranslationResponse
                type: object
          description: OK
      summary: Upsert translation
      tags:
        - Translations
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.translations.upsert('locale_code', {
              namespace: 'namespace',
              translation: { content: '{"hello":"Hello, world!"}', format: 'json' },
            });

            console.log(response.translation);
          }

          main();
  /v1/translations/{locale_code}/validate:
    put:
      callbacks: {}
      description: |
        Validates a translation payload without persisting it.

        Note: this endpoint only operates on translations in the "development" environment.
      operationId: validateTranslation
      parameters:
        - description: A locale code of the translation.
          in: path
          name: locale_code
          required: true
          schema:
            type: string
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: false
          schema:
            example: development
            type: string
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the TranslationRequest request under the translation key.
              example:
                translation:
                  content: '{"hello":"Hello, world!"}'
                  format: json
              properties:
                translation:
                  $ref: "#/components/schemas/TranslationRequest"
              required:
                - translation
              title: WrappedTranslationRequestRequest
              type: object
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Translation response under the `translation` key.
                example:
                  translation:
                    content: '{"hello":"Hello, world!"}'
                    format: json
                    inserted_at: "2021-01-01T00:00:00Z"
                    locale_code: en
                    namespace: my_app
                    updated_at: "2021-01-01T00:00:00Z"
                properties:
                  translation:
                    $ref: "#/components/schemas/Translation"
                required:
                  - translation
                title: WrappedTranslationResponse
                type: object
          description: OK
      summary: Validate translation
      tags:
        - Translations
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.translations.validate('locale_code', {
              translation: { content: '{"hello":"Hello, world!"}', format: 'json' },
            });

            console.log(response.translation);
          }

          main();
  /v1/variables:
    get:
      callbacks: {}
      description: Returns a paginated list of variables for a given environment.
      operationId: listVariables
      parameters:
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of Variable. Contains a list of entries and page information.
                example:
                  entries:
                    - description: This is a description of my variable.
                      inserted_at: "2021-01-01T00:00:00Z"
                      key: my_variable
                      type: public
                      updated_at: "2021-01-01T00:00:00Z"
                      value: my_value
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/Variable"
                    nullable: false
                    type: array
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedVariableResponse
                type: object
          description: OK
      summary: List variables
      tags:
        - Variables
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const variable of client.variables.list({ environment: 'development' })) {
              console.log(variable.inserted_at);
            }
          }

          main();
  /v1/whoami:
    get:
      callbacks: {}
      description: Return information about the current service token.
      operationId: getWhoami
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Information about the current service token.
                example:
                  account_name: Acme, Inc.
                  account_slug: acme
                  service_token_name: My Service Token
                properties:
                  account_name:
                    type: string
                  account_slug:
                    type: string
                  service_token_name:
                    type: string
                required:
                  - account_name
                  - account_slug
                  - service_token_name
                type: object
          description: OK
      summary: Verify scope
      tags:
        - Accounts
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.auth.verify();

            console.log(response.account_name);
          }

          main();
  /v1/workflows:
    get:
      callbacks: {}
      description: >-
        Returns a paginated list of workflows available in a given environment. The workflows are returned in
        alpha sorted order by its key.
      operationId: listWorkflows
      parameters:
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of Workflow. Contains a list of entries and page information.
                example:
                  entries:
                    - active: false
                      categories:
                        - marketing
                        - black-friday
                      conditions:
                        all:
                          - argument: admin
                            operator: equal_to
                            variable: recipient.role
                      created_at: "2022-12-16T19:07:50.027113Z"
                      description: This is a dummy workflow for demo purposes.
                      environment: development
                      key: december-16-demo
                      name: december-16-demo
                      settings:
                        override_preferences: true
                      sha: f7e9d3b2a1c8e6m4k5j7h9g0i2l3n4p6q8r0t1u3v5w7x9y
                      steps:
                        - channel_key: in-app-feed
                          description: Main in-app feed
                          name: In-app step
                          ref: in_app_feed_1
                          template:
                            action_url: "{{ vars.app_url }}"
                            markdown_body: Hello **{{ recipient.name }}**
                          type: channel
                      trigger_data_json_schema:
                        properties:
                          name:
                            type: string
                        required:
                          - name
                        type: object
                      trigger_frequency: every_trigger
                      updated_at: "2023-02-08T22:15:19.846681Z"
                      valid: true
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/Workflow"
                    nullable: false
                    type: array
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedWorkflowResponse
                type: object
          description: OK
      summary: List workflows
      tags:
        - Workflows
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            // Automatically fetches more pages as needed.
            for await (const workflow of client.workflows.list({ environment: 'development' })) {
              console.log(workflow.valid);
            }
          }

          main();
  /v1/workflows/{workflow_key}:
    get:
      callbacks: {}
      description: Retrieve a workflow by its key and namespace, in a given environment.
      operationId: getWorkflow
      parameters:
        - description: The key of the workflow to retrieve.
          in: path
          name: workflow_key
          required: true
          schema:
            type: string
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
        - description: Whether to annotate the resource.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
        - description: Whether to hide uncommitted changes.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
          description: OK
      summary: Get a workflow
      tags:
        - Workflows
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const workflow = await client.workflows.retrieve('workflow_key', { environment: 'development' });

            console.log(workflow.valid);
          }

          main();
    put:
      callbacks: {}
      description: |
        Updates a workflow of a given key, or creates a new one if it does not yet exist.

        Note: this endpoint only operates on workflows in the `development` environment.
      operationId: upsertWorkflow
      parameters:
        - description: The key of the workflow.
          in: path
          name: workflow_key
          required: true
          schema:
            type: string
        - description: A slug of the environment in which to upsert the workflow.
          in: query
          name: environment
          required: true
          schema:
            type: string
        - description: Whether to commit the resource at the same time as modifying it.
          in: query
          name: commit
          required: false
          schema:
            type: boolean
        - description: The message to commit the resource with, only used if `commit` is `true`.
          in: query
          name: commit_message
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the WorkflowRequest request under the workflow key.
              example:
                workflow:
                  name: My Workflow
                  steps:
                    - channel_key: in-app-feed
                      name: Channel 1
                      ref: channel_1
                      template:
                        action_url: "{{ vars.app_url }}"
                        markdown_body: Hello **{{ recipient.name }}**
                      type: channel
              properties:
                workflow:
                  $ref: "#/components/schemas/WorkflowRequest"
              required:
                - workflow
              title: WrappedWorkflowRequestRequest
              type: object
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Workflow response under the `workflow` key.
                example:
                  workflow:
                    active: false
                    categories:
                      - marketing
                      - black-friday
                    conditions:
                      all:
                        - argument: admin
                          operator: equal_to
                          variable: recipient.role
                    created_at: "2022-12-16T19:07:50.027113Z"
                    description: This is a dummy workflow for demo purposes.
                    environment: development
                    key: december-16-demo
                    name: december-16-demo
                    settings:
                      override_preferences: true
                    sha: f7e9d3b2a1c8e6m4k5j7h9g0i2l3n4p6q8r0t1u3v5w7x9y
                    steps:
                      - channel_key: in-app-feed
                        description: Main in-app feed
                        name: In-app step
                        ref: in_app_feed_1
                        template:
                          action_url: "{{ vars.app_url }}"
                          markdown_body: Hello **{{ recipient.name }}**
                        type: channel
                    trigger_data_json_schema:
                      properties:
                        name:
                          type: string
                      required:
                        - name
                      type: object
                    trigger_frequency: every_trigger
                    updated_at: "2023-02-08T22:15:19.846681Z"
                    valid: true
                properties:
                  workflow:
                    $ref: "#/components/schemas/Workflow"
                required:
                  - workflow
                title: WrappedWorkflowResponse
                type: object
          description: OK
      summary: Upsert a workflow
      tags:
        - Workflows
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.workflows.upsert('workflow_key', {
              environment: 'environment',
              workflow: {
                name: 'My Workflow',
                steps: [
                  {
                    name: 'Channel 1',
                    ref: 'channel_1',
                    template: { markdown_body: 'Hello **{{ recipient.name }}**' },
                    type: 'channel',
                  },
                ],
              },
            });

            console.log(response.workflow);
          }

          main();
  /v1/workflows/{workflow_key}/activate:
    put:
      callbacks: {}
      description: >
        Activates (or deactivates) a workflow in a given environment.


        Note: This immediately enables or disables a workflow in a given environment without needing to go
        through environment promotion.
      operationId: activateWorkflow
      parameters:
        - description: The key of the workflow.
          in: path
          name: workflow_key
          required: true
          schema:
            type: string
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
      requestBody:
        content:
          application/json:
            schema:
              example:
                status: true
              properties:
                status:
                  description: >-
                    Whether to activate or deactivate the workflow. Set to `true` by default, which will
                    activate the workflow.
                  example: true
                  type: boolean
              required:
                - status
              type: object
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Workflow response under the `workflow` key.
                example:
                  workflow:
                    active: false
                    categories:
                      - marketing
                      - black-friday
                    conditions:
                      all:
                        - argument: admin
                          operator: equal_to
                          variable: recipient.role
                    created_at: "2022-12-16T19:07:50.027113Z"
                    description: This is a dummy workflow for demo purposes.
                    environment: development
                    key: december-16-demo
                    name: december-16-demo
                    settings:
                      override_preferences: true
                    sha: f7e9d3b2a1c8e6m4k5j7h9g0i2l3n4p6q8r0t1u3v5w7x9y
                    steps:
                      - channel_key: in-app-feed
                        description: Main in-app feed
                        name: In-app step
                        ref: in_app_feed_1
                        template:
                          action_url: "{{ vars.app_url }}"
                          markdown_body: Hello **{{ recipient.name }}**
                        type: channel
                    trigger_data_json_schema:
                      properties:
                        name:
                          type: string
                      required:
                        - name
                      type: object
                    trigger_frequency: every_trigger
                    updated_at: "2023-02-08T22:15:19.846681Z"
                    valid: true
                properties:
                  workflow:
                    $ref: "#/components/schemas/Workflow"
                required:
                  - workflow
                title: WrappedWorkflowResponse
                type: object
          description: OK
      summary: Activate a workflow
      tags:
        - Workflows
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.workflows.activate('workflow_key', {
              environment: 'development',
              status: true,
            });

            console.log(response.workflow);
          }

          main();
  /v1/workflows/{workflow_key}/run:
    put:
      callbacks: {}
      description: Runs the latest version of a committed workflow in a given environment using the params provided.
      operationId: runWorkflow
      parameters:
        - description: The key of the workflow.
          in: path
          name: workflow_key
          required: true
          schema:
            type: string
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunWorkflowRequest"
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunWorkflowResponse"
          description: OK
      summary: Run a workflow
      tags:
        - Workflows
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.workflows.run('workflow_key', {
              environment: 'development',
              recipients: ['dnedry'],
            });

            console.log(response.workflow_run_id);
          }

          main();
  /v1/workflows/{workflow_key}/steps/{step_ref}/preview_template:
    post:
      callbacks: {}
      description: Generates a rendered template for a given channel step in a workflow.
      operationId: previewWorkflowTemplate
      parameters:
        - description: The key of the workflow.
          in: path
          name: workflow_key
          required: true
          schema:
            type: string
        - description: The reference key of the channel step in the workflow to preview.
          in: path
          name: step_ref
          required: true
          schema:
            type: string
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PreviewWorkflowTemplateRequest"
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreviewWorkflowTemplateResponse"
          description: OK
      summary: Preview a workflow template
      tags:
        - Workflows
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.workflows.steps.previewTemplate('step_ref', {
              workflow_key: 'workflow_key',
              environment: 'development',
              recipient: 'dnedry',
            });

            console.log(response.content_type);
          }

          main();
  /v1/workflows/{workflow_key}/validate:
    put:
      callbacks: {}
      description: >
        Validates a workflow payload without persisting it. Some read-only fields will be empty as they are
        generated by the system when persisted.


        Note: Validating a workflow is only done in the development environment context.
      operationId: validateWorkflow
      parameters:
        - description: The key of the workflow.
          in: path
          name: workflow_key
          required: true
          schema:
            type: string
        - description: The environment slug. (Defaults to `development`.).
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the WorkflowRequest request under the workflow key.
              example:
                workflow:
                  name: My Workflow
                  steps:
                    - channel_key: in-app-feed
                      name: Channel 1
                      ref: channel_1
                      template:
                        action_url: "{{ vars.app_url }}"
                        markdown_body: Hello **{{ recipient.name }}**
                      type: channel
              properties:
                workflow:
                  $ref: "#/components/schemas/WorkflowRequest"
              required:
                - workflow
              title: WrappedWorkflowRequestRequest
              type: object
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Workflow response under the `workflow` key.
                example:
                  workflow:
                    active: false
                    categories:
                      - marketing
                      - black-friday
                    conditions:
                      all:
                        - argument: admin
                          operator: equal_to
                          variable: recipient.role
                    created_at: "2022-12-16T19:07:50.027113Z"
                    description: This is a dummy workflow for demo purposes.
                    environment: development
                    key: december-16-demo
                    name: december-16-demo
                    settings:
                      override_preferences: true
                    sha: f7e9d3b2a1c8e6m4k5j7h9g0i2l3n4p6q8r0t1u3v5w7x9y
                    steps:
                      - channel_key: in-app-feed
                        description: Main in-app feed
                        name: In-app step
                        ref: in_app_feed_1
                        template:
                          action_url: "{{ vars.app_url }}"
                          markdown_body: Hello **{{ recipient.name }}**
                        type: channel
                    trigger_data_json_schema:
                      properties:
                        name:
                          type: string
                      required:
                        - name
                      type: object
                    trigger_frequency: every_trigger
                    updated_at: "2023-02-08T22:15:19.846681Z"
                    valid: true
                properties:
                  workflow:
                    $ref: "#/components/schemas/Workflow"
                required:
                  - workflow
                title: WrappedWorkflowResponse
                type: object
          description: OK
      summary: Validate a workflow
      tags:
        - Workflows
      x-stainless-snippets:
        typescript: |-
          import Knock from '@knocklabs/mgmt';

          const client = new Knock({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          async function main() {
            const response = await client.workflows.validate('workflow_key', {
              environment: 'development',
              workflow: {
                name: 'My Workflow',
                steps: [
                  {
                    name: 'Channel 1',
                    ref: 'channel_1',
                    template: { markdown_body: 'Hello **{{ recipient.name }}**' },
                    type: 'channel',
                  },
                ],
              },
            });

            console.log(response.workflow);
          }

          main();
security:
  - BearerAuth: []
servers:
  - url: https://control.knock.app
    variables: {}
tags:
  - description: Resources for managing your Knock account.
    name: Accounts
  - description: Workflows let you express your cross-channel notification logic.
    name: Workflows
  - description: Partials allow you to reuse content across templates.
    name: Partials
  - description: Commits are versioned changes to resources.
    name: Commits
  - description: Environments are isolated instances of your account that map to your infrastructure.
    name: Environments
  - description: Translations are per-locale string files that can be used in your templates.
    name: Translations
  - description: Email layouts wrap your email templates and provide a consistent look and feel.
    name: Email layouts
  - description: >-
      A message type allows you to specify an in-app schema that defines the fields available for your in-app
      notifications.
    name: Message types
