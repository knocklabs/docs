components:
  responses: {}
  schemas:
    SmsChannelSettings:
      description: SMS channel settings. Only used as configuration as part of a workflow channel step.
      example:
        link_tracking: true
      properties:
        link_tracking:
          description: Whether to track link clicks on SMS notifications.
          example: true
          type: boolean
          x-struct: null
          x-validate: null
      title: SmsChannelSettings
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.SmsChannelSettings
      x-validate: null
    WrappedEmailLayoutRequestRequest:
      description: Wraps the EmailLayoutRequest request under the email_layout key.
      example:
        email_layout:
          footer_links:
            - text: Example
              url: http://example.com
          html_layout: <html><body>Hello, world!</body></html>
          name: Transactional
          text_layout: Hello, world!
      properties:
        email_layout:
          $ref: "#/components/schemas/EmailLayoutRequest"
      required:
        - email_layout
      title: WrappedEmailLayoutRequestRequest
      type: object
      x-struct: null
      x-validate: null
    WorkflowStep:
      anyOf:
        - $ref: "#/components/schemas/WorkflowChannelStep"
        - $ref: "#/components/schemas/WorkflowDelayStep"
        - $ref: "#/components/schemas/WorkflowBatchStep"
        - $ref: "#/components/schemas/WorkflowFetchStep"
        - $ref: "#/components/schemas/WorkflowThrottleStep"
        - $ref: "#/components/schemas/WorkflowBranchStep"
        - $ref: "#/components/schemas/WorkflowTriggerWorkflowStep"
      description: >-
        A step within a workflow. Each workflow step, regardless of its type, share a common set of core
        attributes (`type`, `ref`, `name`, `description`, `conditions`).
      example:
        channel_group_key: null
        channel_key: postmark
        channel_overrides: null
        conditions: null
        description: This is a description of the channel step
        name: Email channel step
        ref: channel_step
        send_windows: null
        template:
          html_body: <p>Hello, world!</p>
          settings:
            layout_key: default
          subject: Hello, world!
          text_body: Hello, world!
        type: channel
      title: WorkflowStep
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.WorkflowStep
      x-validate: null
    EmailImageBlock:
      description: An image block in an email template.
      example:
        alt: Example image
        id: 123e4567-e89b-12d3-a456-426614174000
        layout_attrs:
          horizontal_align: center
          padding_bottom: 4
          padding_left: 0
          padding_right: 0
          padding_top: 4
        style_attrs:
          width: 25%
        type: image
        url: https://example.com/image.jpg
        version: 1
      properties:
        action:
          description: Optional action URL for the image.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        alt:
          description: Alt text for the image.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        id:
          description: The ID of the block.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
          x-struct: null
          x-validate: null
        layout_attrs:
          description: The layout attributes of the block.
          properties:
            horizontal_align:
              description: The horizontal alignment of the block.
              enum:
                - left
                - center
                - right
              type: string
              x-struct: null
              x-validate: null
            padding_bottom:
              description: The padding_bottom layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
            padding_left:
              description: The padding_left layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
            padding_right:
              description: The padding_right layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
            padding_top:
              description: The padding_top layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
          required:
            - padding_top
            - padding_right
            - padding_bottom
            - padding_left
            - horizontal_align
          type: object
          x-struct: null
          x-validate: null
        style_attrs:
          description: The style attributes of the image.
          properties:
            width:
              description: The width of the image.
              example: 100%
              type: string
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the block.
          type: string
          x-struct: null
          x-validate: null
        url:
          description: The URL of the image to display.
          format: uri
          type: string
          x-struct: null
          x-validate: null
        version:
          description: The version of the block.
          example: 1
          type: integer
          x-struct: null
          x-validate: null
      required:
        - id
        - type
        - version
        - url
      title: EmailImageBlock
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.EmailBlocks.ImageBlock
      x-validate: null
    PaginatedVariableResponse:
      description: A paginated list of Variable. Contains a list of entries and page information.
      example:
        entries:
          - description: This is a description of my variable.
            inserted_at: "2021-01-01T00:00:00Z"
            key: my_variable
            type: public
            updated_at: "2021-01-01T00:00:00Z"
            value: my_value
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/Variable"
          nullable: false
          type: array
          x-struct: null
          x-validate: null
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedVariableResponse
      type: object
      x-struct: null
      x-validate: null
    PreviewWorkflowTemplateResponse:
      description: A response to a preview workflow template request.
      example:
        content_type: email
        result: success
        template:
          html_body: <p>Hello, world!</p>
          settings:
            layout_key: default
          subject: Hello, world!
          text_body: Hello, world!
      properties:
        content_type:
          description: The content type of the preview.
          enum:
            - email
            - in_app_feed
            - push
            - chat
            - sms
            - http
          type: string
          x-struct: null
          x-validate: null
        result:
          description: The result of the preview.
          enum:
            - success
            - error
          type: string
          x-struct: null
          x-validate: null
        template:
          anyOf:
            - $ref: "#/components/schemas/EmailTemplate"
            - $ref: "#/components/schemas/InAppFeedTemplate"
            - $ref: "#/components/schemas/PushTemplate"
            - $ref: "#/components/schemas/ChatTemplate"
            - $ref: "#/components/schemas/SmsTemplate"
            - $ref: "#/components/schemas/RequestTemplate"
          description: The rendered template, ready to be previewed.
          type: object
          x-struct: null
          x-validate: null
      required:
        - result
        - content_type
        - template
      title: PreviewWorkflowTemplateResponse
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.PreviewWorkflowTemplateResponse
      x-validate: null
    WorkflowDelayStep:
      description: >-
        A delay function step. Read more in the
        [docs](https://docs.knock.app/designing-workflows/delay-function).
      example:
        conditions: {}
        description: Delay for 10 seconds
        name: Delay
        ref: delay_step
        settings:
          delay_for:
            unit: seconds
            value: 10
        type: delay
      properties:
        conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
              x-struct: null
              x-validate: null
          description: A set of conditions to be evaluated for this delay step.
          type: object
          x-struct: null
          x-validate: null
        description:
          description: >-
            An arbitrary string attached to a workflow step. Useful for adding notes about the workflow for
            internal purposes.
          example: Delay for 10 seconds
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        name:
          description: A name for the workflow step.
          example: Delay
          type: string
          x-struct: null
          x-validate: null
        ref:
          description: The reference key of the workflow step. Must be unique per workflow.
          example: delay_step
          type: string
          x-struct: null
          x-validate: null
        settings:
          description: >-
            The settings for the delay step. Both fields can be set to compute a delay where `delay_for` is an
            offset from the `delay_until_field_path`.
          properties:
            delay_for:
              anyOf:
                - $ref: "#/components/schemas/Duration"
                - nullable: true
                  x-struct: null
                  x-validate: null
              description: A duration object that describes how long to wait before proceeding to the next step.
              type: object
              x-struct: null
              x-validate: null
            delay_until_field_path:
              description: When set will use the path to resolve the delay into a timestamp from the property referenced
              example: recipient.delay_until
              type: string
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the workflow step.
          enum:
            - delay
          example: delay
          type: string
          x-struct: null
          x-validate: null
      required:
        - type
        - ref
        - name
        - description
        - conditions
        - settings
      title: WorkflowDelayStep
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.WorkflowDelayStep
      x-validate: null
    RequestTemplate:
      description: A request template for a fetch function step.
      example:
        body: null
        headers:
          - key: X-API-Key
            value: "1234567890"
        method: get
        query_params:
          - key: key
            value: value
        url: https://example.com
      properties:
        body:
          description: The body of the request. Only used for POST or PUT requests.
          example: '{"key": "value"}'
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        headers:
          description: >-
            A list of key-value pairs for the request headers. Each object should contain key and value fields
            with string values.
          items:
            properties:
              key:
                description: The key of the header.
                example: X-API-Key
                type: string
                x-struct: null
                x-validate: null
              value:
                description: The value of the header.
                example: "1234567890"
                type: string
                x-struct: null
                x-validate: null
            required:
              - key
              - value
            type: object
            x-struct: null
            x-validate: null
          type: array
          x-struct: null
          x-validate: null
        method:
          description: The HTTP method of the request.
          enum:
            - get
            - post
            - put
            - delete
            - patch
          example: post
          type: string
          x-struct: null
          x-validate: null
        query_params:
          description: >-
            A list of key-value pairs for the request query params. Each object should contain key and value
            fields with string values.
          items:
            properties:
              key:
                description: The key of the query param.
                example: key
                type: string
                x-struct: null
                x-validate: null
              value:
                description: The value of the query param.
                example: value
                type: string
                x-struct: null
                x-validate: null
            required:
              - key
              - value
            type: object
            x-struct: null
            x-validate: null
          type: array
          x-struct: null
          x-validate: null
        url:
          description: The URL of the request.
          example: https://example.com
          type: string
          x-struct: null
          x-validate: null
      required:
        - url
        - method
      title: RequestTemplate
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.RequestTemplate
      x-validate: null
    WorkflowBranchStepBranch:
      description: A branch in a branch step.
      example:
        conditions:
          all:
            - argument: pro
              operator: equal_to
              variable: recipient.plan_type
        name: Pro plan
        steps: []
        terminates: false
      properties:
        conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
              x-struct: null
              x-validate: null
          description: A set of conditions to be evaluated for this branch.
          type: object
          x-struct: null
          x-validate: null
        name:
          description: The name of the branch.
          example: The name of the branch.
          type: string
          x-struct: null
          x-validate: null
        steps:
          description: A list of steps that will be executed if the branch is chosen.
          items:
            $ref: "#/components/schemas/WorkflowStep"
          type: array
          x-struct: null
          x-validate: null
        terminates:
          description: If the workflow should halt at the end of the branch.
          example: true
          type: boolean
          x-struct: null
          x-validate: null
      title: WorkflowBranchStepBranch
      type: object
      x-struct: null
      x-validate: null
    GuideScheduledActivationParams:
      description: A request to schedule the activation of a guide. At least one of from or until must be provided.
      example:
        from: "2024-03-20T10:00:00Z"
        until: "2024-03-21T10:00:00Z"
      properties:
        from:
          description: >-
            When to activate the guide. If provided, the guide will be scheduled to activate at this time.
            Must be in ISO 8601 UTC format.
          example: "2024-03-20T10:00:00Z"
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        until:
          description: >-
            When to deactivate the guide. If provided, the guide will be scheduled to deactivate at this time.
            Must be in ISO 8601 UTC format.
          example: "2024-03-21T10:00:00Z"
          format: date-time
          type: string
          x-struct: null
          x-validate: null
      title: GuideScheduledActivationParams
      type: object
      x-struct: null
      x-validate: null
    WrappedPartialResponse:
      description: Wraps the Partial response under the `partial` key.
      example:
        partial:
          content: <p>Hello, world!</p>
          description: This is a test partial
          environment: development
          icon_name: icon-name
          inserted_at: "2021-01-01T00:00:00Z"
          key: my-partial
          name: My Partial
          type: html
          updated_at: "2021-01-01T00:00:00Z"
          valid: true
          visual_block_enabled: true
      properties:
        partial:
          $ref: "#/components/schemas/Partial"
      required:
        - partial
      title: WrappedPartialResponse
      type: object
      x-struct: null
      x-validate: null
    WrappedPartialRequestRequest:
      description: Wraps the PartialRequest request under the partial key.
      example:
        partial:
          content: <p>Hello, world!</p>
          name: My Partial
          type: html
      properties:
        partial:
          $ref: "#/components/schemas/PartialRequest"
      required:
        - partial
      title: WrappedPartialRequestRequest
      type: object
      x-struct: null
      x-validate: null
    MessageTypeMultiSelectField:
      description: A multi-select field used in a message type.
      example:
        key: multi_select_field
        label: Multi-Select Field
        settings:
          default:
            - option1
            - option3
          description: A description of the multi-select field
          options:
            - label: Option 1
              value: option1
            - label: Option 2
              value: option2
            - label: Option 3
              value: option3
          required: true
        type: multi_select
      properties:
        key:
          description: The unique key of the field.
          example: key
          type: string
          x-struct: null
          x-validate: null
        label:
          description: The label of the field.
          example: Label
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        settings:
          description: Settings for the multi_select field.
          properties:
            default:
              description: The default values for the multi-select field.
              example:
                - option1
                - option3
              items:
                type: string
                x-struct: null
                x-validate: null
              nullable: true
              type: array
              x-struct: null
              x-validate: null
            description:
              example: A description of the field, used in the UI
              type: string
              x-struct: null
              x-validate: null
            options:
              description: The available options for the multi-select field.
              items:
                properties:
                  label:
                    description: The display label for the option.
                    example: Option 1
                    type: string
                    x-struct: null
                    x-validate: null
                  value:
                    description: The value for the option.
                    example: option1
                    type: string
                    x-struct: null
                    x-validate: null
                required:
                  - value
                type: object
                x-struct: null
                x-validate: null
              type: array
              x-struct: null
              x-validate: null
            required:
              description: Whether the field is required.
              example: true
              type: boolean
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the field.
          enum:
            - multi_select
          example: multi_select
          type: string
          x-struct: null
          x-validate: null
      required:
        - type
        - key
        - label
        - settings
      title: MessageTypeMultiSelectField
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.MessageTypes.MultiSelectField
      x-validate: null
    MessageTypeBooleanField:
      description: A boolean field used in a message type.
      example:
        key: boolean_field
        label: Boolean Field
        settings:
          default: false
          description: A description of the boolean field
          required: true
        type: boolean
      properties:
        key:
          description: The unique key of the field.
          example: key
          type: string
          x-struct: null
          x-validate: null
        label:
          description: The label of the field.
          example: Label
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        settings:
          description: Settings for the boolean field.
          properties:
            default:
              description: The default value of the boolean field.
              example: true
              type: boolean
              x-struct: null
              x-validate: null
            description:
              example: A description of the field, used in the UI
              type: string
              x-struct: null
              x-validate: null
            required:
              description: Whether the field is required.
              example: true
              type: boolean
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the field.
          enum:
            - boolean
          example: boolean
          type: string
          x-struct: null
          x-validate: null
      required:
        - type
        - key
        - label
      title: MessageTypeBooleanField
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.MessageTypes.BooleanField
      x-validate: null
    Translation:
      description: A translation object.
      example:
        content: '{"hello":"Hello, world!"}'
        format: json
        inserted_at: "2021-01-01T00:00:00Z"
        locale_code: en
        namespace: my_app
        updated_at: "2021-01-01T00:00:00Z"
      properties:
        content:
          description: >-
            A JSON encoded string containing the key-value pairs of translation references and translation
            strings.
          type: string
          x-struct: null
          x-validate: null
        format:
          description: Indicates whether content is a JSON encoded object string or a string in the PO format.
          enum:
            - json
            - po
          type: string
          x-struct: null
          x-validate: null
        inserted_at:
          description: The timestamp of when the translation was created.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        locale_code:
          description: The locale code for the translation object.
          type: string
          x-struct: null
          x-validate: null
        namespace:
          description: An optional namespace for the translation to help categorize your translations.
          type: string
          x-struct: null
          x-validate: null
        updated_at:
          description: The timestamp of when the translation was last updated.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
      required:
        - locale_code
        - namespace
        - content
        - format
        - inserted_at
        - updated_at
      title: Translation
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.Translation
      x-validate: null
    Commit:
      description: A commit is a change to a resource within an environment, made by an author.
      example:
        commit_author:
          email: john.doe@example.com
          name: John Doe
        commit_message: This is a commit message
        created_at: "2021-01-01T00:00:00Z"
        environment: development
        id: 123e4567-e89b-12d3-a456-426614174000
        resource:
          identifier: my-email-layout
          type: email_layout
        updated_at: "2021-01-01T00:00:00Z"
      properties:
        commit_author:
          description: The author of the commit.
          example:
            email: john.doe@example.com
            name: John Doe
          properties:
            email:
              description: The email address of the commit author.
              type: string
              x-struct: null
              x-validate: null
            name:
              description: The name of the commit author.
              nullable: true
              type: string
              x-struct: null
              x-validate: null
          required:
            - email
          title: CommitAuthor
          type: object
          x-struct: null
          x-validate: null
        commit_message:
          description: The optional message about the commit.
          type: string
          x-struct: null
          x-validate: null
        created_at:
          description: The timestamp of when the commit was created.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        environment:
          description: The environment of the commit.
          example: development
          type: string
          x-struct: null
          x-validate: null
        id:
          description: The unique identifier for the commit.
          format: uuid
          type: string
          x-struct: null
          x-validate: null
        resource:
          description: The resource object associated with the commit.
          example:
            identifier: my-email-layout
            type: email_layout
          properties:
            identifier:
              description: The unique identifier for the resource.
              type: string
              x-struct: null
              x-validate: null
            type:
              description: The type of the resource object.
              enum:
                - email_layout
                - workflow
                - translation
                - partial
                - message_type
              example: workflow
              type: string
              x-struct: null
              x-validate: null
          required:
            - identifier
            - type
          title: CommitResource
          type: object
          x-struct: null
          x-validate: null
        updated_at:
          description: The timestamp of when the commit was last updated.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
      required:
        - id
        - resource
        - commit_author
        - environment
        - commit_message
        - created_at
        - updated_at
      title: Commit
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.Commit
      x-validate: null
    MessageTypeRequest:
      description: A request to create a message type.
      example:
        description: This is a message type
        name: My Message Type
        preview: <div>Hello, world!</div>
        variants:
          - fields:
              - key: text_field
                label: My text field
                settings:
                  description: A description of the text field
                  max_length: 100
                  min_length: 10
                  required: true
                type: text
            key: default
            name: Default
      properties:
        description:
          description: >-
            An arbitrary string attached to a message type object. Useful for adding notes about the message
            type for internal purposes. Maximum of 280 characters allowed.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        icon_name:
          description: The icon name of the message type.
          type: string
          x-struct: null
          x-validate: null
        name:
          description: A name for the message type. Must be at maximum 255 characters in length.
          type: string
          x-struct: null
          x-validate: null
        preview:
          description: An HTML/liquid template for the message type preview.
          type: string
          x-struct: null
          x-validate: null
        semver:
          description: The semantic version of the message type.
          example: 1.0.0
          type: string
          x-struct: null
          x-validate: null
        variants:
          description: The variants of the message type.
          items:
            $ref: "#/components/schemas/MessageTypeVariant"
          type: array
          x-struct: null
          x-validate: null
      required:
        - name
        - description
        - preview
      title: MessageTypeRequest
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.MessageTypeRequest
      x-validate: null
    MessageTypeButtonField:
      description: A button field used in a message type.
      example:
        action:
          key: action
          label: Button Action
          settings:
            description: A description of the text field in the button action
            required: true
          type: text
        key: button_field
        label: Button Field
        settings:
          description: A description of the button field
          required: true
        text:
          key: text
          label: Button Text
          settings:
            description: A description of the text field in the button
            required: true
          type: text
        type: button
      properties:
        action:
          $ref: "#/components/schemas/MessageTypeTextField"
        key:
          description: The unique key of the field.
          example: key
          type: string
          x-struct: null
          x-validate: null
        label:
          description: The label of the field.
          example: Label
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        settings:
          description: Settings for the button field.
          properties:
            description:
              example: A description of the field, used in the UI
              type: string
              x-struct: null
              x-validate: null
            required:
              description: Whether the field is required.
              example: true
              type: boolean
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        text:
          $ref: "#/components/schemas/MessageTypeTextField"
        type:
          description: The type of the field.
          enum:
            - button
          example: button
          type: string
          x-struct: null
          x-validate: null
      required:
        - type
        - key
        - label
        - text
        - action
      title: MessageTypeButtonField
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.MessageTypes.ButtonField
      x-validate: null
    EmailButtonSetBlock:
      description: A button set block in an email template.
      example:
        buttons:
          - action: https://example.com/button1
            label: Button 1
            size_attrs:
              is_fullwidth: false
              size: sm
            style_attrs:
              background_color: "#000000"
              border_color: "#000000"
              border_radius: 6
              border_width: 1
              text_color: "#FFFFFF"
            variant: primary
        id: 123e4567-e89b-12d3-a456-426614174000
        layout_attrs:
          column_gap: 8
          horizontal_align: left
          padding_bottom: 8
          padding_left: 4
          padding_right: 4
          padding_top: 8
        type: button_set
        version: 1
      properties:
        buttons:
          description: A list of buttons in the button set.
          items:
            $ref: "#/components/schemas/EmailButtonSetBlockButton"
          type: array
          x-struct: null
          x-validate: null
        id:
          description: The ID of the block.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
          x-struct: null
          x-validate: null
        layout_attrs:
          description: The layout attributes of the block.
          properties:
            column_gap:
              description: The column_gap layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
            horizontal_align:
              description: The horizontal alignment of the block.
              enum:
                - left
                - center
                - right
              type: string
              x-struct: null
              x-validate: null
            padding_bottom:
              description: The padding_bottom layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
            padding_left:
              description: The padding_left layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
            padding_right:
              description: The padding_right layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
            padding_top:
              description: The padding_top layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
          required:
            - padding_top
            - padding_right
            - padding_bottom
            - padding_left
            - horizontal_align
            - column_gap
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the block.
          type: string
          x-struct: null
          x-validate: null
        version:
          description: The version of the block.
          example: 1
          type: integer
          x-struct: null
          x-validate: null
      required:
        - id
        - type
        - version
        - buttons
      title: EmailButtonSetBlock
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.EmailBlocks.ButtonSetBlock
      x-validate: null
    InAppFeedTemplate:
      description: An in-app feed template.
      example:
        action_buttons:
          - action: https://example.com
            label: Button 1
        action_url: https://example.com
        markdown_body: Hello, world!
      properties:
        action_buttons:
          description: The action buttons of the in-app feed message.
          items:
            description: A single-action button to be rendered in an in-app feed cell.
            properties:
              action:
                description: The URI for this action.
                example: https://example.com
                type: string
                x-struct: null
                x-validate: null
              label:
                description: The label of the action button.
                example: Button 1
                type: string
                x-struct: null
                x-validate: null
            required:
              - label
              - action
            type: object
            x-struct: null
            x-validate: null
          type: array
          x-struct: null
          x-validate: null
        action_url:
          description: >-
            The URL to navigate to when the in-app feed is tapped. Can be omitted for multi-action templates,
            where the action buttons will be used instead.
          example: https://example.com
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        markdown_body:
          description: The markdown body of the in-app feed.
          example: Hello, world!
          type: string
          x-struct: null
          x-validate: null
      required:
        - markdown_body
      title: InAppFeedTemplate
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.InAppFeedTemplate
      x-validate: null
    MessageTypeImageField:
      description: An image field used in a message type.
      example:
        action:
          key: action
          label: Image Action
          settings:
            description: A link to open when the paywall image is clicked
            required: true
          type: text
        alt:
          key: alt
          label: Alt Text
          settings:
            description: A description of the paywall image
            required: true
          type: text
        key: image_field
        label: Paywall Image
        settings:
          description: An image to display in the paywall
          required: true
        type: image
        url:
          key: url
          label: Image URL
          settings:
            description: The URL of the paywall image
            required: true
          type: url
      properties:
        action:
          $ref: "#/components/schemas/MessageTypeTextField"
        alt:
          $ref: "#/components/schemas/MessageTypeTextField"
        key:
          description: The unique key of the field.
          example: key
          type: string
          x-struct: null
          x-validate: null
        label:
          description: The label of the field.
          example: Label
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        settings:
          description: Settings for the image field.
          properties:
            description:
              example: A description of the field, used in the UI
              type: string
              x-struct: null
              x-validate: null
            required:
              description: Whether the field is required.
              example: true
              type: boolean
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the field.
          enum:
            - image
          example: image
          type: string
          x-struct: null
          x-validate: null
        url:
          $ref: "#/components/schemas/MessageTypeUrlField"
      required:
        - type
        - key
        - label
        - url
        - action
        - alt
      title: MessageTypeImageField
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.MessageTypes.ImageField
      x-validate: null
    MessageTypeVariant:
      description: A variant of a message type.
      example:
        fields:
          - key: text_field
            label: My text field
            settings:
              description: A description of the text field
              max_length: 100
              min_length: 10
              required: true
            type: text
        key: default
        name: Default
      properties:
        fields:
          description: The field types available for the variant.
          items:
            anyOf:
              - $ref: "#/components/schemas/MessageTypeBooleanField"
              - $ref: "#/components/schemas/MessageTypeButtonField"
              - $ref: "#/components/schemas/MessageTypeImageField"
              - $ref: "#/components/schemas/MessageTypeMarkdownField"
              - $ref: "#/components/schemas/MessageTypeMultiSelectField"
              - $ref: "#/components/schemas/MessageTypeSelectField"
              - $ref: "#/components/schemas/MessageTypeTextField"
              - $ref: "#/components/schemas/MessageTypeTextareaField"
              - $ref: "#/components/schemas/MessageTypeUrlField"
            type: object
            x-struct: null
            x-validate: null
          type: array
          x-struct: null
          x-validate: null
        key:
          description: >-
            The unique key string for the variant. Must be at minimum 3 characters and at maximum 255
            characters in length. Must be in the format of ^[a-z0-9_-]+$.
          type: string
          x-struct: null
          x-validate: null
        name:
          description: A name for the variant. Must be at maximum 255 characters in length.
          type: string
          x-struct: null
          x-validate: null
      required:
        - key
        - name
        - fields
      title: MessageTypeVariant
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.MessageTypeVariant
      x-validate: null
    EmailLayoutRequest:
      description: A request to update or create an email layout.
      example:
        footer_links:
          - text: Example
            url: http://example.com
        html_layout: <html><body>Hello, world!</body></html>
        name: Transactional
        text_layout: Hello, world!
      properties:
        footer_links:
          description: A list of one or more items to show in the footer of the email layout.
          items:
            properties:
              text:
                description: The text to display as the link.
                nullable: false
                type: string
                x-struct: null
                x-validate: null
              url:
                description: The URL to link to.
                nullable: false
                type: string
                x-struct: null
                x-validate: null
            required:
              - text
              - url
            type: object
            x-struct: null
            x-validate: null
          type: array
          x-struct: null
          x-validate: null
        html_layout:
          description: The complete HTML content of the email layout.
          nullable: false
          type: string
          x-struct: null
          x-validate: null
        name:
          description: The friendly name of this email layout.
          nullable: false
          type: string
          x-struct: null
          x-validate: null
        text_layout:
          description: The complete plain text content of the email layout.
          nullable: false
          type: string
          x-struct: null
          x-validate: null
      required:
        - name
        - html_layout
        - text_layout
      title: EmailLayoutRequest
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.EmailLayoutRequest
      x-validate: null
    PartialRequest:
      description: A partial object with attributes to update or create a partial.
      example:
        content: <p>Hello, world!</p>
        name: My Partial
        type: html
      properties:
        content:
          description: The content of the partial.
          type: string
          x-struct: null
          x-validate: null
        description:
          description: The description of the partial.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        icon_name:
          description: >-
            The name of the icon to be used in the visual editor. Only relevant when `visual_block_enabled` is
            `true`.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        name:
          description: The name of the partial.
          type: string
          x-struct: null
          x-validate: null
        type:
          description: The type of the partial.
          enum:
            - html
            - text
            - json
            - markdown
          type: string
          x-struct: null
          x-validate: null
        visual_block_enabled:
          description: Indicates whether the partial can be used in the visual editor. Only applies to HTML partials.
          example: false
          nullable: true
          type: boolean
          x-struct: null
          x-validate: null
      required:
        - type
        - name
        - content
      title: PartialRequest
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.PartialRequest
      x-validate: null
    ConditionGroup:
      anyOf:
        - $ref: "#/components/schemas/ConditionGroupAllMatch"
        - $ref: "#/components/schemas/ConditionGroupAnyMatch"
      description: A group of conditions to be evaluated.
      example:
        all:
          - argument: some_property
            operator: equal_to
            variable: recipient.property
      title: ConditionGroup
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.ConditionGroup
      x-validate: null
    WorkflowRequest:
      description: A workflow request for upserting a workflow.
      example:
        name: My Workflow
        steps:
          - channel_key: in-app-feed
            name: Channel 1
            ref: channel_1
            template:
              action_url: "{{ vars.app_url }}"
              markdown_body: Hello **{{ recipient.name }}**
            type: channel
      properties:
        categories:
          description: >-
            A list of [categories](https://docs.knock.app/concepts/workflows#workflow-categories) that the
            workflow belongs to.
          items:
            type: string
            x-struct: null
            x-validate: null
          type: array
          x-struct: null
          x-validate: null
        conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
              x-struct: null
              x-validate: null
          description: >-
            A conditions object that describes one or more conditions to be met for the workflow to be
            executed. (optional).
          type: object
          x-struct: null
          x-validate: null
        description:
          description: >-
            An arbitrary string attached to a workflow object. Useful for adding notes about the workflow for
            internal purposes. Maximum of 280 characters allowed.
          type: string
          x-struct: null
          x-validate: null
        name:
          description: A name for the workflow. Must be at maximum 255 characters in length.
          type: string
          x-struct: null
          x-validate: null
        settings:
          description: A map of workflow settings.
          properties:
            is_commercial:
              description: Whether the workflow is commercial. Defaults to false.
              example: false
              type: boolean
              x-struct: null
              x-validate: null
            override_preferences:
              description: >-
                Whether to ignore recipient preferences for a given type of notification. If true, will send
                for every channel in the workflow even if the recipient has opted out of a certain kind.
                Defaults to false.
              example: false
              type: boolean
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        steps:
          description: A list of workflow step objects in the workflow.
          items:
            $ref: "#/components/schemas/WorkflowStep"
          type: array
          x-struct: null
          x-validate: null
        trigger_data_json_schema:
          additionalProperties: true
          description: >-
            A JSON schema for the expected structure of the workflow trigger's data payload. Used to validate
            trigger requests. Read more in the
            [docs](https://docs.knock.app/developer-tools/validating-trigger-data).
          type: object
          x-struct: null
          x-validate: null
        trigger_frequency:
          description: >-
            The frequency at which the workflow should be triggered. One of: `once_per_recipient`,
            `once_per_recipient_per_tenant`, `every_trigger`. Defaults to `every_trigger`. Read more in
            [docs](https://docs.knock.app/send-notifications/triggering-workflows/overview#controlling-workflow-trigger-frequency).
          enum:
            - every_trigger
            - once_per_recipient
            - once_per_recipient_per_tenant
          example: every_trigger
          type: string
          x-struct: null
          x-validate: null
      required:
        - name
        - steps
      title: WorkflowRequest
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.WorkflowRequest
      x-validate: null
    EmailPartialBlock:
      description: A partial block in an email template, used to render a reusable partial component.
      example:
        attrs:
          foo: bar
        id: 123e4567-e89b-12d3-a456-426614174000
        key: my_partial
        layout_attrs:
          padding_bottom: 8
          padding_left: 4
          padding_right: 4
          padding_top: 8
        name: my_partial
        type: partial
        version: 1
      properties:
        attrs:
          additionalProperties: true
          description: The attributes to pass to the partial block.
          type: object
          x-struct: null
          x-validate: null
        id:
          description: The ID of the block.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
          x-struct: null
          x-validate: null
        key:
          description: The key of the partial block to invoke.
          type: string
          x-struct: null
          x-validate: null
        layout_attrs:
          description: The layout attributes of the block.
          properties:
            padding_bottom:
              description: The padding_bottom layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
            padding_left:
              description: The padding_left layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
            padding_right:
              description: The padding_right layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
            padding_top:
              description: The padding_top layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
          required:
            - padding_top
            - padding_right
            - padding_bottom
            - padding_left
          type: object
          x-struct: null
          x-validate: null
        name:
          description: The name of the partial block.
          type: string
          x-struct: null
          x-validate: null
        type:
          description: The type of the block.
          type: string
          x-struct: null
          x-validate: null
        version:
          description: The version of the block.
          example: 1
          type: integer
          x-struct: null
          x-validate: null
      required:
        - id
        - type
        - version
        - name
        - key
        - attrs
      title: EmailPartialBlock
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.EmailBlocks.PartialBlock
      x-validate: null
    RecipientReference:
      description: >-
        A recipient reference, used when referencing a recipient by either their ID (for a user), or by a
        reference for an object.
      example:
        collection: projects
        id: project_1
      oneOf:
        - description: A user ID.
          example: user_1
          nullable: false
          title: UserRecipientReference
          type: string
          x-struct: null
          x-validate: null
        - description: An object reference.
          example:
            collection: projects
            id: project_1
          properties:
            collection:
              description: The collection of the object.
              type: string
              x-struct: null
              x-validate: null
            id:
              description: The ID of the object.
              type: string
              x-struct: null
              x-validate: null
          required:
            - id
            - collection
          title: ObjectRecipientReference
          type: object
          x-struct: null
          x-validate: null
      title: RecipientReference
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.RecipientReference
      x-validate: null
    WrappedGuideResponse:
      description: Wraps the Guide response under the `guide` key.
      example:
        guide:
          activation_location_rules:
            - directive: allow
              pathname: /dashboard/*
          active: true
          archived_at: null
          channel_key: in-app-guide
          created_at: "2024-01-01T00:00:00Z"
          description: A guide to help users get started with the application
          environment: development
          key: getting-started
          name: Getting Started Guide
          semver: 0.0.1
          sha: "1234567890"
          steps:
            - name: Welcome to the App
              ref: welcome-step
              schema_key: tooltip
              schema_semver: 1.0.0
              schema_variant_key: default
              values:
                text_field: value
          target_audience_id: null
          target_property_conditions:
            all:
              - argument: some_property
                operator: equal_to
                variable: recipient.property
          type: banner
          updated_at: "2024-01-01T00:00:00Z"
          valid: true
      properties:
        guide:
          $ref: "#/components/schemas/Guide"
      required:
        - guide
      title: WrappedGuideResponse
      type: object
      x-struct: null
      x-validate: null
    ConditionGroupAnyMatch:
      description: A group of conditions that any must be met. Can contain nested alls.
      example:
        any:
          - all:
              - argument: some_property
                operator: equal_to
                variable: recipient.property
      properties:
        any:
          description: An array of conditions or nested condition groups to evaluate.
          items:
            anyOf:
              - $ref: "#/components/schemas/Condition"
              - $ref: "#/components/schemas/ConditionGroupAllMatch"
            type: object
            x-struct: null
            x-validate: null
          type: array
          x-struct: null
          x-validate: null
      title: ConditionGroupAnyMatch
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.ConditionGroup.ConditionGroupAnyMatch
      x-validate: null
    MessageTypeTextField:
      description: A text field used in a message type.
      example:
        key: text_field
        label: Text Field
        settings:
          description: A description of the text field
          max_length: 100
          min_length: 10
          required: true
        type: text
      properties:
        key:
          description: The unique key of the field.
          example: key
          type: string
          x-struct: null
          x-validate: null
        label:
          description: The label of the field.
          example: Label
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        settings:
          description: Settings for the text field.
          properties:
            default:
              description: The default value of the text field.
              example: A placeholder
              nullable: true
              type: string
              x-struct: null
              x-validate: null
            description:
              example: A description of the field, used in the UI
              type: string
              x-struct: null
              x-validate: null
            max_length:
              example: 100
              type: integer
              x-struct: null
              x-validate: null
            min_length:
              example: 10
              type: integer
              x-struct: null
              x-validate: null
            required:
              description: Whether the field is required.
              example: true
              type: boolean
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the field.
          enum:
            - text
          example: text
          type: string
          x-struct: null
          x-validate: null
      required:
        - type
        - key
        - label
      title: MessageTypeTextField
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.MessageTypes.TextField
      x-validate: null
    GuideBooleanActivationParams:
      description: A request to activate or deactivate a guide.
      example:
        status: true
      properties:
        status:
          description: Whether to activate or deactivate the guide.
          example: true
          type: boolean
          x-struct: null
          x-validate: null
      required:
        - status
      title: GuideBooleanActivationParams
      type: object
      x-struct: null
      x-validate: null
    EmailTemplate:
      description: An email message template.
      example:
        html_body: <p>Hello, world!</p>
        settings:
          layout_key: default
        subject: Hello, world!
        text_body: Hello, world!
      properties:
        html_body:
          description: An HTML template for the email body. Either `html_body` or `visual_blocks` must be provided.
          example: <p>Hello, world!</p>
          type: string
          x-struct: null
          x-validate: null
        settings:
          anyOf:
            - description: The [settings](https://docs.knock.app/integrations/email/settings) for the email template.
              example:
                layout_key: default
              properties:
                attachment_key:
                  description: The object path in the data payload (of the workflow trigger call) to resolve attachments.
                  example: attachments
                  nullable: true
                  type: string
                  x-struct: null
                  x-validate: null
                layout_key:
                  description: The key of the email layout which the step is using.
                  example: default
                  nullable: true
                  type: string
                  x-struct: null
                  x-validate: null
                pre_content:
                  description: >-
                    A liquid template that will be injected into the layout above the message template
                    content.
                  nullable: true
                  type: string
                  x-struct: null
                  x-validate: null
              title: EmailTemplateSettings
              type: object
              x-struct: null
              x-validate: null
            - nullable: true
              x-struct: null
              x-validate: null
          description: >-
            The [settings](https://docs.knock.app/integrations/email/settings) for the email template. Can be
            omitted.
          type: object
          x-struct: null
          x-validate: null
        subject:
          description: The subject of the email.
          example: Hello, world!
          type: string
          x-struct: null
          x-validate: null
        text_body:
          description: >-
            A text template for the email body. Only present if opted out from autogenerating it from the HTML
            template.
          example: Hello, world!
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        visual_blocks:
          description: The visual blocks of the email. Either `html_body` or `visual_blocks` must be provided.
          items:
            anyOf:
              - $ref: "#/components/schemas/EmailButtonSetBlock"
              - $ref: "#/components/schemas/EmailDividerBlock"
              - $ref: "#/components/schemas/EmailHtmlBlock"
              - $ref: "#/components/schemas/EmailImageBlock"
              - $ref: "#/components/schemas/EmailMarkdownBlock"
              - $ref: "#/components/schemas/EmailPartialBlock"
            type: object
            x-struct: null
            x-validate: null
          type: array
          x-struct: null
          x-validate: null
      required:
        - subject
      title: EmailTemplate
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.EmailTemplate
      x-validate: null
    WorkflowChannelStep:
      description: >-
        A channel step within a workflow. Read more in the
        [docs](https://docs.knock.app/designing-workflows/channel-step).
      example:
        channel_group_key: null
        channel_key: postmark
        channel_overrides: null
        conditions: null
        description: This is a description of the channel step
        name: Email channel step
        ref: channel_step
        send_windows: null
        template:
          html_body: <p>Hello, world!</p>
          settings:
            layout_key: default
          subject: Hello, world!
          text_body: Hello, world!
        type: channel
      properties:
        channel_group_key:
          description: >-
            The key of the channel group to which the channel step will be sending a notification. A channel
            step can have either a channel key or a channel group key, but not both.
          example: email
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        channel_key:
          description: >-
            The key of the channel to which the channel step will be sending a notification. A channel step
            can have either a channel key or a channel group key, but not both.
          example: postmark
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        channel_overrides:
          anyOf:
            - $ref: "#/components/schemas/EmailChannelSettings"
            - $ref: "#/components/schemas/InAppFeedChannelSettings"
            - $ref: "#/components/schemas/SmsChannelSettings"
            - $ref: "#/components/schemas/PushChannelSettings"
            - $ref: "#/components/schemas/ChatChannelSettings"
            - nullable: true
              x-struct: null
              x-validate: null
          description: A map of channel overrides for the channel step.
          type: object
          x-struct: null
          x-validate: null
        conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
              x-struct: null
              x-validate: null
          description: A set of conditions to be evaluated for this channel step.
          type: object
          x-struct: null
          x-validate: null
        description:
          description: >-
            An arbitrary string attached to a workflow step. Useful for adding notes about the workflow for
            internal purposes.
          example: Delay for 10 seconds
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        name:
          description: A name for the workflow step.
          example: Delay
          type: string
          x-struct: null
          x-validate: null
        ref:
          description: The reference key of the workflow step. Must be unique per workflow.
          example: delay_step
          type: string
          x-struct: null
          x-validate: null
        send_windows:
          description: A list of send window objects. Must include one send window object per day of the week.
          items:
            $ref: "#/components/schemas/SendWindow"
          nullable: true
          type: array
          x-struct: null
          x-validate: null
        template:
          anyOf:
            - $ref: "#/components/schemas/EmailTemplate"
            - $ref: "#/components/schemas/InAppFeedTemplate"
            - $ref: "#/components/schemas/SmsTemplate"
            - $ref: "#/components/schemas/PushTemplate"
            - $ref: "#/components/schemas/ChatTemplate"
            - $ref: "#/components/schemas/WebhookTemplate"
          description: >-
            The message template for the channel step. The shape of the template depends on the type of the
            channel you'll be sending to. See below for definitions of each channel type template: email,
            in-app, SMS, push, chat, and webhook.
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the workflow step.
          enum:
            - channel
          example: channel
          type: string
          x-struct: null
          x-validate: null
      required:
        - type
        - ref
        - name
        - template
      title: WorkflowChannelStep
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.WorkflowChannelStep
      x-validate: null
    WrappedMessageTypeResponse:
      description: Wraps the MessageType response under the `message_type` key.
      example:
        message_type:
          archived_at: null
          created_at: "2021-01-01T00:00:00Z"
          deleted_at: null
          description: Email message type
          environment: development
          icon_name: email
          key: email
          name: Email
          owner: user
          preview: <div>Hello, world!</div>
          semver: 1.0.0
          sha: "1234567890"
          updated_at: "2021-01-01T00:00:00Z"
          valid: true
          variants:
            - fields:
                - key: text_field
                  label: My text field
                  settings:
                    description: A description of the text field
                    max_length: 100
                    min_length: 10
                    required: true
                  type: text
              key: default
              name: Default
      properties:
        message_type:
          $ref: "#/components/schemas/MessageType"
      required:
        - message_type
      title: WrappedMessageTypeResponse
      type: object
      x-struct: null
      x-validate: null
    EmailDividerBlock:
      description: A divider block in an email template.
      example:
        id: 123e4567-e89b-12d3-a456-426614174000
        layout_attrs:
          padding_bottom: 8
          padding_left: 4
          padding_right: 4
          padding_top: 8
        type: divider
        version: 1
      properties:
        id:
          description: The ID of the block.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
          x-struct: null
          x-validate: null
        layout_attrs:
          description: The layout attributes of the block.
          properties:
            padding_bottom:
              description: The padding_bottom layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
            padding_left:
              description: The padding_left layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
            padding_right:
              description: The padding_right layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
            padding_top:
              description: The padding_top layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
          required:
            - padding_top
            - padding_right
            - padding_bottom
            - padding_left
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the block.
          type: string
          x-struct: null
          x-validate: null
        version:
          description: The version of the block.
          example: 1
          type: integer
          x-struct: null
          x-validate: null
      required:
        - id
        - type
        - version
      title: EmailDividerBlock
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.EmailBlocks.DividerBlock
      x-validate: null
    PaginatedWorkflowResponse:
      description: A paginated list of Workflow. Contains a list of entries and page information.
      example:
        entries:
          - active: false
            categories:
              - marketing
              - black-friday
            conditions:
              all:
                - argument: admin
                  operator: equal_to
                  variable: recipient.role
            created_at: "2022-12-16T19:07:50.027113Z"
            description: This is a dummy workflow for demo purposes.
            environment: development
            key: december-16-demo
            name: december-16-demo
            settings:
              override_preferences: true
            sha: f7e9d3b2a1c8e6m4k5j7h9g0i2l3n4p6q8r0t1u3v5w7x9y
            steps:
              - channel_key: in-app-feed
                description: Main in-app feed
                name: In-app step
                ref: in_app_feed_1
                template:
                  action_url: "{{ vars.app_url }}"
                  markdown_body: Hello **{{ recipient.name }}**
                type: channel
            trigger_data_json_schema:
              properties:
                name:
                  type: string
              required:
                - name
              type: object
            trigger_frequency: every_trigger
            updated_at: "2023-02-08T22:15:19.846681Z"
            valid: true
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/Workflow"
          nullable: false
          type: array
          x-struct: null
          x-validate: null
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedWorkflowResponse
      type: object
      x-struct: null
      x-validate: null
    WorkflowThrottleStep:
      description: >-
        A throttle function step. Read more in the
        [docs](https://docs.knock.app/designing-workflows/throttle-function).
      example:
        name: Throttle step
        ref: throttle_step
        settings:
          throttle_key: data.project_id
          throttle_limit: 1
          throttle_window:
            unit: minutes
            value: 10
        type: throttle
      properties:
        conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
              x-struct: null
              x-validate: null
          description: >-
            A conditions object that describes one or more conditions to be met in order for the step to be
            executed.
          type: object
          x-struct: null
          x-validate: null
        description:
          description: >-
            An arbitrary string attached to a workflow step. Useful for adding notes about the workflow for
            internal purposes.
          example: Throttle step description
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        name:
          description: A name for the workflow step.
          example: Throttle step
          type: string
          x-struct: null
          x-validate: null
        ref:
          description: The reference key of the workflow step. Must be unique per workflow.
          example: throttle_step
          type: string
          x-struct: null
          x-validate: null
        settings:
          description: The settings for the throttle step.
          properties:
            throttle_key:
              description: The data property to use to throttle notifications per recipient.
              example: data.project_id
              nullable: true
              type: string
              x-struct: null
              x-validate: null
            throttle_limit:
              description: The maximum number of workflows to allow within the duration window. Defaults to 1.
              example: 1
              nullable: true
              type: integer
              x-struct: null
              x-validate: null
            throttle_window:
              anyOf:
                - $ref: "#/components/schemas/Duration"
                - nullable: true
                  x-struct: null
                  x-validate: null
              description: The duration of the throttle window.
              nullable: true
              type: object
              x-struct: null
              x-validate: null
            throttle_window_field_path:
              description: >-
                The data path to resolve a dynamic throttle window. The resolved value must be an ISO-8601
                timestamp. See more in the
                [docs](https://docs.knock.app/designing-workflows/throttle-function#set-a-dynamic-throttle-window).
              example: recipient.throttle_window
              nullable: true
              type: string
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the workflow step.
          enum:
            - throttle
          example: throttle
          type: string
          x-struct: null
          x-validate: null
      required:
        - type
        - ref
        - name
        - settings
      title: WorkflowThrottleStep
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.WorkflowThrottleStep
      x-validate: null
    WorkflowBatchStep:
      description: >-
        A batch function step. Read more in the
        [docs](https://docs.knock.app/designing-workflows/batch-function).
      example:
        description: Batch step description
        name: Batch step
        ref: batch_step
        settings:
          batch_key: data.project_id
          batch_window:
            unit: minutes
            value: 10
        type: batch
      properties:
        description:
          description: >-
            An arbitrary string attached to a workflow step. Useful for adding notes about the workflow for
            internal purposes.
          example: Batch step description
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        name:
          description: A name for the workflow step.
          example: Batch step
          type: string
          x-struct: null
          x-validate: null
        ref:
          description: The reference key of the workflow step. Must be unique per workflow.
          example: batch_step
          type: string
          x-struct: null
          x-validate: null
        settings:
          description: The settings for the batch step.
          properties:
            batch_execution_mode:
              description: >-
                The execution mode of the batch step. One of: `accumulate` or `flush_leading`. When set to
                `flush_leading`, the first item in the batch will be executed immediately, and the rest will
                be batched. See [these
                docs](https://docs.knock.app/designing-workflows/batch-function#immediately-flushing-the-first-item-in-a-batch)
                for more information.
              enum:
                - accumulate
                - flush_leading
              example: accumulate
              nullable: true
              type: string
              x-struct: null
              x-validate: null
            batch_items_max_limit:
              description: "The maximum number of batch items allowed in a batch. Between: 2 and 1000."
              example: 1000
              nullable: true
              type: integer
              x-struct: null
              x-validate: null
            batch_items_render_limit:
              description: >-
                The maximum number of batch items allowed to be rendered into a template. Between: 1 and 100.
                Defaults to 10.
              example: 10
              nullable: true
              type: integer
              x-struct: null
              x-validate: null
            batch_key:
              description: The data property to use to batch notifications per recipient.
              example: data.project_id
              nullable: true
              type: string
              x-struct: null
              x-validate: null
            batch_order:
              description: >-
                The order describing whether to return the first or last ten batch items in the activities
                variable. One of: `asc` or `desc`.
              enum:
                - asc
                - desc
              example: asc
              nullable: true
              type: string
              x-struct: null
              x-validate: null
            batch_until_field_path:
              description: The data path to resolve the batch window. The resolved value must be an ISO-8601 timestamp.
              example: recipient.batch_until
              nullable: true
              type: string
              x-struct: null
              x-validate: null
            batch_window:
              anyOf:
                - $ref: "#/components/schemas/Duration"
                - nullable: true
                  x-struct: null
                  x-validate: null
              description: The window of time to collect events in the batch.
              type: object
              x-struct: null
              x-validate: null
            batch_window_extension_limit:
              anyOf:
                - $ref: "#/components/schemas/Duration"
                - nullable: true
                  x-struct: null
                  x-validate: null
              description: >-
                A duration object that describes the maximum duration a batch window can be extended to from
                opening when using a [sliding batch
                window](https://docs.knock.app/designing-workflows/batch-function#using-a-sliding-batch-window).
              type: object
              x-struct: null
              x-validate: null
            batch_window_type:
              description: "The type of the batch window used. One of: `fixed` or `sliding`."
              enum:
                - fixed
                - sliding
              example: fixed
              nullable: true
              type: string
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the workflow step.
          enum:
            - batch
          example: batch
          type: string
          x-struct: null
          x-validate: null
      required:
        - type
        - ref
        - name
        - description
        - settings
      title: WorkflowBatchStep
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.WorkflowBatchStep
      x-validate: null
    Environment:
      description: An environment object.
      example:
        created_at: "2022-10-31T19:59:03Z"
        deleted_at: null
        hide_pii_data: false
        label_color: "#000000"
        last_commit_at: "2022-10-31T19:59:03Z"
        name: Development
        order: 0
        owner: system
        slug: development
        updated_at: "2022-10-31T19:59:03Z"
      properties:
        created_at:
          description: The timestamp of when the environment was created.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        deleted_at:
          description: The timestamp of when the environment was deleted.
          format: date-time
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        hide_pii_data:
          default: false
          description: >-
            Whether PII data is hidden from the environment. Read more in the [data obfuscation
            docs](https://docs.knock.app/manage-your-account/data-obfuscation).
          type: boolean
          x-struct: null
          x-validate: null
        label_color:
          description: The color of the environment label to display in the dashboard.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        last_commit_at:
          description: The timestamp of the most-recent commit in the environment.
          format: date-time
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        name:
          description: A human-readable name for the environment. Cannot exceed 255 characters.
          type: string
          x-struct: null
          x-validate: null
        order:
          description: >-
            The order of the environment. The lowest number is the first environment, the highest number is
            the last environment. The order will not always be sequential.
          type: integer
          x-struct: null
          x-validate: null
        owner:
          description: The owner of the environment.
          enum:
            - system
            - user
          example: user
          type: string
          x-struct: null
          x-validate: null
        slug:
          description: A unique slug for the environment. Cannot exceed 255 characters.
          type: string
          x-struct: null
          x-validate: null
        updated_at:
          description: The timestamp of when the environment was last updated.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
      required:
        - name
        - slug
        - order
        - created_at
        - updated_at
        - owner
      title: Environment
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.Environment
      x-validate: null
    MessageTypeUrlField:
      description: A URL field used in a message type.
      example:
        key: url_field
        label: URL Field
        settings:
          description: A description of the URL field
          required: true
        type: url
      properties:
        key:
          description: The unique key of the field.
          example: key
          type: string
          x-struct: null
          x-validate: null
        label:
          description: The label of the field.
          example: Label
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        settings:
          description: Settings for the url field.
          properties:
            default:
              description: The default value of the URL field.
              example: https://example.com
              nullable: true
              type: string
              x-struct: null
              x-validate: null
            description:
              example: A description of the field, used in the UI
              type: string
              x-struct: null
              x-validate: null
            required:
              description: Whether the field is required.
              example: true
              type: boolean
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the field.
          enum:
            - url
          example: url
          type: string
          x-struct: null
          x-validate: null
      required:
        - type
        - key
        - label
      title: MessageTypeUrlField
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.MessageTypes.UrlField
      x-validate: null
    PushChannelSettings:
      description: Push channel settings. Only used as configuration as part of a workflow channel step.
      example:
        token_deregistration: true
      properties:
        token_deregistration:
          description: >-
            Whether to deregister a push-token when a push send hard bounces. This is to prevent the same
            token from being used for future pushes.
          example: true
          type: boolean
          x-struct: null
          x-validate: null
      title: PushChannelSettings
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.PushChannelSettings
      x-validate: null
    WrappedCommitResponse:
      description: Wraps the Commit response under the `commit` key.
      example:
        commit:
          commit_author:
            email: john.doe@example.com
            name: John Doe
          commit_message: This is a commit message
          created_at: "2021-01-01T00:00:00Z"
          environment: development
          id: 123e4567-e89b-12d3-a456-426614174000
          resource:
            identifier: my-email-layout
            type: email_layout
          updated_at: "2021-01-01T00:00:00Z"
      properties:
        commit:
          $ref: "#/components/schemas/Commit"
      required:
        - commit
      title: WrappedCommitResponse
      type: object
      x-struct: null
      x-validate: null
    WrappedEmailLayoutResponse:
      description: Wraps the EmailLayout response under the `email_layout` key.
      example:
        email_layout:
          created_at: "2021-01-01T00:00:00Z"
          environment: development
          footer_links:
            - text: Example
              url: http://example.com
          html_layout: <html><body>Hello, world!</body></html>
          key: transactional
          name: Transactional
          sha: "1234567890"
          text_layout: Hello, world!
          updated_at: "2021-01-01T00:00:00Z"
      properties:
        email_layout:
          $ref: "#/components/schemas/EmailLayout"
      required:
        - email_layout
      title: WrappedEmailLayoutResponse
      type: object
      x-struct: null
      x-validate: null
    WrappedTranslationRequestRequest:
      description: Wraps the TranslationRequest request under the translation key.
      example:
        translation:
          content: '{"hello":"Hello, world!"}'
          format: json
      properties:
        translation:
          $ref: "#/components/schemas/TranslationRequest"
      required:
        - translation
      title: WrappedTranslationRequestRequest
      type: object
      x-struct: null
      x-validate: null
    InAppFeedChannelSettings:
      description: In-app feed channel settings. Only used as configuration as part of a workflow channel step.
      example:
        link_tracking: true
      properties:
        link_tracking:
          description: Whether to track link clicks on in-app feed notifications.
          example: true
          type: boolean
          x-struct: null
          x-validate: null
      title: InAppFeedChannelSettings
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.InAppFeedChannelSettings
      x-validate: null
    Duration:
      description: A duration of time, represented as a unit and a value.
      example:
        unit: minutes
        value: 10
      properties:
        unit:
          description: The unit of time.
          enum:
            - minutes
            - hours
            - days
            - weeks
            - months
          example: minutes
          type: string
          x-struct: null
          x-validate: null
        value:
          description: The value of the duration.
          example: 10
          type: integer
          x-struct: null
          x-validate: null
      required:
        - unit
        - value
      title: Duration
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.Duration
      x-validate: null
    Channel:
      description: A configured channel, which is a way to route messages to a provider.
      example:
        archived_at: null
        created_at: "2021-01-01T00:00:00Z"
        custom_icon_url: null
        key: my-sendgrid-channel
        name: My Sendgrid Channel
        provider: sendgrid
        type: email
        updated_at: "2021-01-01T00:00:00Z"
      properties:
        archived_at:
          description: The timestamp of when the channel was deleted.
          format: date-time
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        created_at:
          description: The timestamp of when the channel was created.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        custom_icon_url:
          description: Optional URL to a custom icon for the channel. Only used for display purposes in the dashboard.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        description:
          description: Optional description of the channel's purpose or usage.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        key:
          description: Unique identifier for the channel within a project (immutable once created).
          type: string
          x-struct: null
          x-validate: null
        name:
          description: The human-readable name of the channel.
          type: string
          x-struct: null
          x-validate: null
        provider:
          description: >-
            The ID of the provider that this channel uses to deliver messages. Learn more about the providers
            available [in our documentation](https://docs.knock.app/integrations/overview).
          type: string
          x-struct: null
          x-validate: null
        type:
          description: The type of channel, determining what kind of messages it can send.
          enum:
            - email
            - in_app
            - in_app_feed
            - in_app_guide
            - sms
            - push
            - chat
            - http
          type: string
          x-struct: null
          x-validate: null
        updated_at:
          description: The timestamp of when the channel was last updated.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
      required:
        - name
        - key
        - type
        - provider
        - created_at
        - updated_at
      title: Channel
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.Channel
      x-validate: null
    RunWorkflowRequest:
      description: A request to run (test) a workflow.
      example:
        data:
          park_id: 1
        recipients:
          - dnedry
      properties:
        actor:
          anyOf:
            - $ref: "#/components/schemas/RecipientReference"
            - nullable: true
              x-struct: null
              x-validate: null
          description: The actor to reference in the the workflow run.
          type: object
          x-struct: null
          x-validate: null
        cancellation_key:
          description: A key to cancel the workflow run.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        data:
          additionalProperties: true
          description: A map of data to be used in the workflow run.
          type: object
          x-struct: null
          x-validate: null
        recipients:
          description: A list of recipients to run the workflow for.
          items:
            $ref: "#/components/schemas/RecipientReference"
          type: array
          x-struct: null
          x-validate: null
        tenant:
          description: The tenant to associate the workflow run with.
          type: string
          x-struct: null
          x-validate: null
      required:
        - recipients
      title: RunWorkflowRequest
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.RunWorkflowRequest
      x-validate: null
    PaginatedChannelGroupResponse:
      description: A paginated list of ChannelGroup. Contains a list of entries and page information.
      example:
        entries:
          - channel_rules:
              - channel:
                  archived_at: null
                  created_at: "2021-01-01T00:00:00Z"
                  custom_icon_url: null
                  key: my-sendgrid-channel
                  name: My Sendgrid Channel
                  provider: sendgrid
                  type: email
                  updated_at: "2021-01-01T00:00:00Z"
                created_at: "2021-01-01T00:00:00Z"
                index: 0
                rule_type: always
                updated_at: "2021-01-01T00:00:00Z"
            channel_type: push
            created_at: "2021-01-01T00:00:00Z"
            key: push-group
            name: Push Notification Group
            operator: any
            source: user
            updated_at: "2021-01-01T00:00:00Z"
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/ChannelGroup"
          nullable: false
          type: array
          x-struct: null
          x-validate: null
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedChannelGroupResponse
      type: object
      x-struct: null
      x-validate: null
    ObjectRecipientReference:
      description: An object reference.
      example:
        collection: projects
        id: project_1
      properties:
        collection:
          description: The collection of the object.
          type: string
          x-struct: null
          x-validate: null
        id:
          description: The ID of the object.
          type: string
          x-struct: null
          x-validate: null
      required:
        - id
        - collection
      title: ObjectRecipientReference
      type: object
      x-struct: null
      x-validate: null
    PromoteAllResponse:
      description: The response from promoting all changes.
      example:
        result: success
      properties:
        result:
          description: The result of the promote operation.
          example: success
          type: string
          x-struct: null
          x-validate: null
      required:
        - result
      title: PromoteAllResponse
      type: object
      x-struct: null
      x-validate: null
    PageInfo:
      description: The information about a paginated result.
      example:
        after: null
        before: null
        page_size: 25
      properties:
        after:
          description: The cursor to fetch entries after. Will only be present if there are more entries to fetch.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        before:
          description: >-
            The cursor to fetch entries before. Will only be present if there are more entries to fetch before
            the current page.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        page_size:
          description: The number of entries to fetch per-page.
          type: integer
          x-struct: null
          x-validate: null
      required:
        - page_size
      title: PageInfo
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.PageInfo
      x-validate: null
    CommitAllResponse:
      description: The response from committing all changes.
      example:
        result: success
      properties:
        result:
          description: The result of the commit operation.
          example: success
          type: string
          x-struct: null
          x-validate: null
      required:
        - result
      title: CommitAllResponse
      type: object
      x-struct: null
      x-validate: null
    Variable:
      description: An environment variable object.
      example:
        description: This is a description of my variable.
        inserted_at: "2021-01-01T00:00:00Z"
        key: my_variable
        type: public
        updated_at: "2021-01-01T00:00:00Z"
        value: my_value
      properties:
        description:
          description: The description of the variable.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        inserted_at:
          description: The timestamp of when the variable was created.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        key:
          description: The key of the variable.
          type: string
          x-struct: null
          x-validate: null
        type:
          default: public
          description: The type of the variable.
          enum:
            - public
            - secret
          type: string
          x-struct: null
          x-validate: null
        updated_at:
          description: The timestamp of when the variable was last updated.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        value:
          description: The value of the variable.
          type: string
          x-struct: null
          x-validate: null
      required:
        - key
        - value
        - type
        - inserted_at
        - updated_at
      title: Variable
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.Variable
      x-validate: null
    PaginatedTranslationResponse:
      description: A paginated list of Translation. Contains a list of entries and page information.
      example:
        entries:
          - content: '{"hello":"Hello, world!"}'
            format: json
            inserted_at: "2021-01-01T00:00:00Z"
            locale_code: en
            namespace: my_app
            updated_at: "2021-01-01T00:00:00Z"
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/Translation"
          nullable: false
          type: array
          x-struct: null
          x-validate: null
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedTranslationResponse
      type: object
      x-struct: null
      x-validate: null
    PaginatedCommitResponse:
      description: A paginated list of Commit. Contains a list of entries and page information.
      example:
        entries:
          - commit_author:
              email: john.doe@example.com
              name: John Doe
            commit_message: This is a commit message
            created_at: "2021-01-01T00:00:00Z"
            environment: development
            id: 123e4567-e89b-12d3-a456-426614174000
            resource:
              identifier: my-email-layout
              type: email_layout
            updated_at: "2021-01-01T00:00:00Z"
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/Commit"
          nullable: false
          type: array
          x-struct: null
          x-validate: null
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedCommitResponse
      type: object
      x-struct: null
      x-validate: null
    Workflow:
      description: A workflow object.
      example:
        active: false
        categories:
          - marketing
          - black-friday
        conditions:
          all:
            - argument: admin
              operator: equal_to
              variable: recipient.role
        created_at: "2022-12-16T19:07:50.027113Z"
        description: This is a dummy workflow for demo purposes.
        environment: development
        key: december-16-demo
        name: december-16-demo
        settings:
          override_preferences: true
        sha: f7e9d3b2a1c8e6m4k5j7h9g0i2l3n4p6q8r0t1u3v5w7x9y
        steps:
          - channel_key: in-app-feed
            description: Main in-app feed
            name: In-app step
            ref: in_app_feed_1
            template:
              action_url: "{{ vars.app_url }}"
              markdown_body: Hello **{{ recipient.name }}**
            type: channel
        trigger_data_json_schema:
          properties:
            name:
              type: string
          required:
            - name
          type: object
        trigger_frequency: every_trigger
        updated_at: "2023-02-08T22:15:19.846681Z"
        valid: true
      properties:
        active:
          description: >-
            Whether the workflow is [active](https://docs.knock.app/concepts/workflows#workflow-status) in the
            current environment. (read-only).
          type: boolean
          x-struct: null
          x-validate: null
        categories:
          description: >-
            A list of [categories](https://docs.knock.app/concepts/workflows#workflow-categories) that the
            workflow belongs to.
          items:
            type: string
            x-struct: null
            x-validate: null
          type: array
          x-struct: null
          x-validate: null
        conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
              x-struct: null
              x-validate: null
          description: >-
            A conditions object that describes one or more conditions to be met for the workflow to be
            executed. (optional).
          type: object
          x-struct: null
          x-validate: null
        created_at:
          description: The timestamp of when the workflow was created. (read-only).
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        deleted_at:
          description: The timestamp of when the workflow was deleted. (read-only).
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        description:
          description: >-
            An arbitrary string attached to a workflow object. Useful for adding notes about the workflow for
            internal purposes. Maximum of 280 characters allowed.
          type: string
          x-struct: null
          x-validate: null
        environment:
          description: The slug of the environment in which the workflow exists. (read-only).
          type: string
          x-struct: null
          x-validate: null
        key:
          description: >-
            The unique key string for the workflow object. Must be at minimum 3 characters and at maximum 255
            characters in length. Must be in the format of ^[a-z0-9_-]+$.
          type: string
          x-struct: null
          x-validate: null
        name:
          description: A name for the workflow. Must be at maximum 255 characters in length.
          type: string
          x-struct: null
          x-validate: null
        settings:
          description: A map of workflow settings.
          properties:
            is_commercial:
              description: Whether the workflow is commercial. Defaults to false.
              example: false
              type: boolean
              x-struct: null
              x-validate: null
            override_preferences:
              description: >-
                Whether to ignore recipient preferences for a given type of notification. If true, will send
                for every channel in the workflow even if the recipient has opted out of a certain kind.
                Defaults to false.
              example: false
              type: boolean
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        sha:
          description: The SHA hash of the workflow data. (read-only).
          type: string
          x-struct: null
          x-validate: null
        steps:
          description: A list of workflow step objects in the workflow.
          items:
            $ref: "#/components/schemas/WorkflowStep"
          type: array
          x-struct: null
          x-validate: null
        trigger_data_json_schema:
          additionalProperties: true
          description: >-
            A JSON schema for the expected structure of the workflow trigger's data payload. Used to validate
            trigger requests. Read more in the
            [docs](https://docs.knock.app/developer-tools/validating-trigger-data).
          type: object
          x-struct: null
          x-validate: null
        trigger_frequency:
          description: >-
            The frequency at which the workflow should be triggered. One of: `once_per_recipient`,
            `once_per_recipient_per_tenant`, `every_trigger`. Defaults to `every_trigger`. Read more in
            [docs](https://docs.knock.app/send-notifications/triggering-workflows/overview#controlling-workflow-trigger-frequency).
          enum:
            - every_trigger
            - once_per_recipient
            - once_per_recipient_per_tenant
          example: every_trigger
          type: string
          x-struct: null
          x-validate: null
        updated_at:
          description: The timestamp of when the workflow was last updated. (read-only).
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        valid:
          description: Whether the workflow and its steps are in a valid state. (read-only).
          type: boolean
          x-struct: null
          x-validate: null
      required:
        - key
        - name
        - steps
        - active
        - valid
        - environment
        - created_at
        - updated_at
        - sha
      title: Workflow
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.Workflow
      x-validate: null
    ChannelGroup:
      description: A group of channels with rules for when they are applicable.
      example:
        channel_rules:
          - channel:
              archived_at: null
              created_at: "2021-01-01T00:00:00Z"
              custom_icon_url: null
              key: my-sendgrid-channel
              name: My Sendgrid Channel
              provider: sendgrid
              type: email
              updated_at: "2021-01-01T00:00:00Z"
            created_at: "2021-01-01T00:00:00Z"
            index: 0
            rule_type: always
            updated_at: "2021-01-01T00:00:00Z"
        channel_type: push
        created_at: "2021-01-01T00:00:00Z"
        key: push-group
        name: Push Notification Group
        operator: any
        source: user
        updated_at: "2021-01-01T00:00:00Z"
      properties:
        channel_rules:
          description: Rules for determining which channels should be used.
          items:
            $ref: "#/components/schemas/ChannelGroupRule"
          type: array
          x-struct: null
          x-validate: null
        channel_type:
          description: The type of channels contained in this group.
          enum:
            - email
            - in_app
            - in_app_feed
            - in_app_guide
            - sms
            - push
            - chat
            - http
          type: string
          x-struct: null
          x-validate: null
        created_at:
          description: The timestamp of when the channel group was created.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        key:
          description: Unique identifier for the channel group within a project.
          type: string
          x-struct: null
          x-validate: null
        name:
          description: The human-readable name of the channel group.
          type: string
          x-struct: null
          x-validate: null
        operator:
          description: >-
            Determines how the channel rules are applied ('any' means any rule can match, 'all' means all
            rules must match).
          enum:
            - any
            - all
          type: string
          x-struct: null
          x-validate: null
        source:
          description: >-
            Whether this channel group was created by the system or a user. Only user created channel groups
            can be modified.
          enum:
            - system
            - user
          type: string
          x-struct: null
          x-validate: null
        updated_at:
          description: The timestamp of when the channel group was last updated.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
      required:
        - name
        - key
        - channel_type
        - operator
        - source
        - channel_rules
        - created_at
        - updated_at
      title: ChannelGroup
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.ChannelGroup
      x-validate: null
    ChannelGroupRule:
      description: A rule that determines if a channel should be executed as part of a channel group.
      example:
        channel:
          archived_at: null
          created_at: "2021-01-01T00:00:00Z"
          custom_icon_url: null
          key: my-sendgrid-channel
          name: My Sendgrid Channel
          provider: sendgrid
          type: email
          updated_at: "2021-01-01T00:00:00Z"
        created_at: "2021-01-01T00:00:00Z"
        index: 0
        rule_type: always
        updated_at: "2021-01-01T00:00:00Z"
      properties:
        argument:
          description: For conditional rules, the value to compare against.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        channel:
          $ref: "#/components/schemas/Channel"
        created_at:
          description: The timestamp of when the rule was created.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        index:
          description: The order index of this rule within the channel group.
          type: integer
          x-struct: null
          x-validate: null
        operator:
          description: For conditional rules, the operator to apply.
          enum:
            - equal_to
            - not_equal_to
            - greater_than
            - less_than
            - greater_than_or_equal_to
            - less_than_or_equal_to
            - contains
            - not_contains
            - contains_all
            - empty
            - not_empty
            - is_audience_member
            - is_not_audience_member
          example: equal_to
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        rule_type:
          description: The type of rule (if = conditional, unless = negative conditional, always = always apply).
          enum:
            - if
            - unless
            - always
          type: string
          x-struct: null
          x-validate: null
        updated_at:
          description: The timestamp of when the rule was last updated.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        variable:
          description: For conditional rules, the variable to evaluate.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
      required:
        - index
        - rule_type
        - channel
        - created_at
        - updated_at
      title: ChannelGroupRule
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.ChannelGroupRule
      x-validate: null
    WrappedWorkflowResponse:
      description: Wraps the Workflow response under the `workflow` key.
      example:
        workflow:
          active: false
          categories:
            - marketing
            - black-friday
          conditions:
            all:
              - argument: admin
                operator: equal_to
                variable: recipient.role
          created_at: "2022-12-16T19:07:50.027113Z"
          description: This is a dummy workflow for demo purposes.
          environment: development
          key: december-16-demo
          name: december-16-demo
          settings:
            override_preferences: true
          sha: f7e9d3b2a1c8e6m4k5j7h9g0i2l3n4p6q8r0t1u3v5w7x9y
          steps:
            - channel_key: in-app-feed
              description: Main in-app feed
              name: In-app step
              ref: in_app_feed_1
              template:
                action_url: "{{ vars.app_url }}"
                markdown_body: Hello **{{ recipient.name }}**
              type: channel
          trigger_data_json_schema:
            properties:
              name:
                type: string
            required:
              - name
            type: object
          trigger_frequency: every_trigger
          updated_at: "2023-02-08T22:15:19.846681Z"
          valid: true
      properties:
        workflow:
          $ref: "#/components/schemas/Workflow"
      required:
        - workflow
      title: WrappedWorkflowResponse
      type: object
      x-struct: null
      x-validate: null
    WrappedWorkflowRequestRequest:
      description: Wraps the WorkflowRequest request under the workflow key.
      example:
        workflow:
          name: My Workflow
          steps:
            - channel_key: in-app-feed
              name: Channel 1
              ref: channel_1
              template:
                action_url: "{{ vars.app_url }}"
                markdown_body: Hello **{{ recipient.name }}**
              type: channel
      properties:
        workflow:
          $ref: "#/components/schemas/WorkflowRequest"
      required:
        - workflow
      title: WrappedWorkflowRequestRequest
      type: object
      x-struct: null
      x-validate: null
    EmailLayout:
      description: A versioned email layout used within an environment.
      example:
        created_at: "2021-01-01T00:00:00Z"
        environment: development
        footer_links:
          - text: Example
            url: http://example.com
        html_layout: <html><body>Hello, world!</body></html>
        key: transactional
        name: Transactional
        sha: "1234567890"
        text_layout: Hello, world!
        updated_at: "2021-01-01T00:00:00Z"
      properties:
        created_at:
          description: The timestamp of when the email layout was created.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        environment:
          description: The environment of the email layout.
          type: string
          x-struct: null
          x-validate: null
        footer_links:
          description: A list of one or more items to show in the footer of the email layout.
          items:
            properties:
              text:
                description: The text to display as the link.
                type: string
                x-struct: null
                x-validate: null
              url:
                description: The URL to link to.
                type: string
                x-struct: null
                x-validate: null
            required:
              - text
              - url
            type: object
            x-struct: null
            x-validate: null
          type: array
          x-struct: null
          x-validate: null
        html_layout:
          description: The complete HTML content of the email layout.
          type: string
          x-struct: null
          x-validate: null
        key:
          description: The unique key for this email layout.
          type: string
          x-struct: null
          x-validate: null
        name:
          description: The human-readable name of this email layout.
          type: string
          x-struct: null
          x-validate: null
        sha:
          description: The SHA of the email layout.
          type: string
          x-struct: null
          x-validate: null
        text_layout:
          description: The complete plaintext content of the email layout.
          type: string
          x-struct: null
          x-validate: null
        updated_at:
          description: The timestamp of when the email layout was last updated.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
      required:
        - key
        - name
        - html_layout
        - text_layout
        - sha
        - created_at
      title: EmailLayout
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.EmailLayout
      x-validate: null
    ChatChannelSettings:
      description: Chat channel settings. Only used as configuration as part of a workflow channel step.
      example:
        email_based_user_id_resolution: true
        link_tracking: true
      properties:
        email_based_user_id_resolution:
          description: >-
            Whether to resolve chat provider user IDs using a Knock user's email address. Only relevant for
            Slack channels for the time being.
          example: true
          type: boolean
          x-struct: null
          x-validate: null
        link_tracking:
          description: Whether to track link clicks on chat notifications.
          example: true
          type: boolean
          x-struct: null
          x-validate: null
      title: ChatChannelSettings
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.ChatChannelSettings
      x-validate: null
    EmailButtonSetBlockButton:
      description: A button in a button set block.
      example:
        action: https://example.com/button1
        label: Button 1
        size_attrs:
          is_fullwidth: false
          size: sm
        style_attrs:
          background_color: "#000000"
          border_color: "#000000"
          border_radius: 6
          border_width: 1
          text_color: "#FFFFFF"
        variant: primary
      properties:
        action:
          description: The action of the button.
          type: string
          x-struct: null
          x-validate: null
        label:
          description: The label of the button.
          type: string
          x-struct: null
          x-validate: null
        size_attrs:
          description: The size attributes of the button.
          properties:
            is_fullwidth:
              description: Whether the button is full width.
              type: boolean
              x-struct: null
              x-validate: null
            size:
              description: The size of the button.
              enum:
                - sm
                - md
                - lg
              type: string
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        style_attrs:
          description: The style attributes of the button.
          properties:
            background_color:
              description: The background color of the button.
              type: string
              x-struct: null
              x-validate: null
            border_color:
              description: The border color of the button.
              type: string
              x-struct: null
              x-validate: null
            border_radius:
              description: The border radius of the button.
              type: integer
              x-struct: null
              x-validate: null
            border_width:
              description: The border width of the button.
              type: integer
              x-struct: null
              x-validate: null
            text_color:
              description: The text color of the button.
              type: string
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        variant:
          description: The variant of the button.
          type: string
          x-struct: null
          x-validate: null
      required:
        - label
        - action
        - variant
      title: EmailButtonSetBlockButton
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.EmailBlocks.ButtonSetBlock.Button
      x-validate: null
    ChatTemplate:
      description: A chat template.
      example:
        json_body: null
        markdown_body: "**Hello**, world!"
        summary: Hello, world!
      properties:
        json_body:
          description: >-
            A JSON template for the chat notification message payload. Only present if not using the markdown
            body.
          example: '{"type": "text", "text": "Hello, world!"}'
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        markdown_body:
          description: The markdown body of the chat template.
          example: Hello, world!
          type: string
          x-struct: null
          x-validate: null
        summary:
          description: The summary of the chat template. Used by some chat apps in their push notifications.
          example: Hello, world!
          type: string
          x-struct: null
          x-validate: null
      required:
        - markdown_body
      title: ChatTemplate
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.ChatTemplate
      x-validate: null
    Guide:
      description: A guide defines an in-app guide that can be displayed to users based on priority and other conditions.
      example:
        activation_location_rules:
          - directive: allow
            pathname: /dashboard/*
        active: true
        archived_at: null
        channel_key: in-app-guide
        created_at: "2024-01-01T00:00:00Z"
        description: A guide to help users get started with the application
        environment: development
        key: getting-started
        name: Getting Started Guide
        semver: 0.0.1
        sha: "1234567890"
        steps:
          - name: Welcome to the App
            ref: welcome-step
            schema_key: tooltip
            schema_semver: 1.0.0
            schema_variant_key: default
            values:
              text_field: value
        target_audience_id: null
        target_property_conditions:
          all:
            - argument: some_property
              operator: equal_to
              variable: recipient.property
        type: banner
        updated_at: "2024-01-01T00:00:00Z"
        valid: true
      properties:
        activation_location_rules:
          description: A list of activation location rules that describe when the guide should be shown.
          items:
            $ref: "#/components/schemas/GuideActivationLocationRule"
          type: array
          x-struct: null
          x-validate: null
        active:
          default: false
          description: Whether the guide is active.
          type: boolean
          x-struct: null
          x-validate: null
        archived_at:
          description: The timestamp of when the guide was archived.
          format: date-time
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        channel_key:
          description: The key of the channel in which the guide exists.
          type: string
          x-struct: null
          x-validate: null
        created_at:
          description: The timestamp of when the guide was created.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        deleted_at:
          description: The timestamp of when the guide was deleted.
          format: date-time
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        description:
          description: >-
            An arbitrary string attached to a guide object. Useful for adding notes about the guide for
            internal purposes. Maximum of 280 characters allowed.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        environment:
          description: The slug of the environment in which the guide exists.
          type: string
          x-struct: null
          x-validate: null
        key:
          description: >-
            The unique key string for the guide object. Must be at minimum 3 characters and at maximum 255
            characters in length. Must be in the format of ^[a-z0-9_-]+$.
          type: string
          x-struct: null
          x-validate: null
        name:
          description: A name for the guide. Must be at maximum 255 characters in length.
          type: string
          x-struct: null
          x-validate: null
        semver:
          description: The semver of the guide.
          type: string
          x-struct: null
          x-validate: null
        sha:
          description: The SHA hash of the guide.
          type: string
          x-struct: null
          x-validate: null
        steps:
          description: A list of guide step objects in the guide.
          items:
            $ref: "#/components/schemas/GuideStep"
          type: array
          x-struct: null
          x-validate: null
        target_audience_id:
          description: The ID of the target audience for the guide. When not set, will default to targeting all users.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        target_property_conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
              x-struct: null
              x-validate: null
          description: >-
            A conditions object that describes one or more conditions to be met for the guide to be shown to
            an audience member.
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the guide. This is derived from the message type of the guide steps.
          type: string
          x-struct: null
          x-validate: null
        updated_at:
          description: The timestamp of when the guide was last updated.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        valid:
          description: Whether the guide is valid.
          type: boolean
          x-struct: null
          x-validate: null
      required:
        - key
        - active
        - name
        - environment
        - created_at
        - updated_at
        - sha
      title: Guide
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.Guide
      x-validate: null
    WrappedMessageTypeRequestRequest:
      description: Wraps the MessageTypeRequest request under the message_type key.
      example:
        message_type:
          description: This is a message type
          name: My Message Type
          preview: <div>Hello, world!</div>
          variants:
            - fields:
                - key: text_field
                  label: My text field
                  settings:
                    description: A description of the text field
                    max_length: 100
                    min_length: 10
                    required: true
                  type: text
              key: default
              name: Default
      properties:
        message_type:
          $ref: "#/components/schemas/MessageTypeRequest"
      required:
        - message_type
      title: WrappedMessageTypeRequestRequest
      type: object
      x-struct: null
      x-validate: null
    WorkflowBranchStep:
      description: >-
        A branch function step. Read more in the
        [docs](https://docs.knock.app/designing-workflows/branch-function).
      example:
        branches:
          - conditions:
              all:
                - argument: pro
                  operator: equal_to
                  variable: recipient.plan_type
            name: Pro plan
            steps: []
            terminates: false
          - conditions: null
            name: Default
            steps: []
            terminates: false
        description: Branch description
        name: Branch 1
        ref: branch_1
        type: branch
      properties:
        branches:
          description: A list of workflow branches to be evaluated.
          items:
            description: A branch in a branch step.
            example:
              conditions:
                all:
                  - argument: pro
                    operator: equal_to
                    variable: recipient.plan_type
              name: Pro plan
              steps: []
              terminates: false
            properties:
              conditions:
                anyOf:
                  - $ref: "#/components/schemas/ConditionGroup"
                  - nullable: true
                    x-struct: null
                    x-validate: null
                description: A set of conditions to be evaluated for this branch.
                type: object
                x-struct: null
                x-validate: null
              name:
                description: The name of the branch.
                example: The name of the branch.
                type: string
                x-struct: null
                x-validate: null
              steps:
                description: A list of steps that will be executed if the branch is chosen.
                items:
                  $ref: "#/components/schemas/WorkflowStep"
                type: array
                x-struct: null
                x-validate: null
              terminates:
                description: If the workflow should halt at the end of the branch.
                example: true
                type: boolean
                x-struct: null
                x-validate: null
            title: WorkflowBranchStepBranch
            type: object
            x-struct: null
            x-validate: null
          type: array
          x-struct: null
          x-validate: null
        description:
          description: >-
            An arbitrary string attached to a workflow step. Useful for adding notes about the workflow for
            internal purposes.
          example: Branch description
          type: string
          x-struct: null
          x-validate: null
        name:
          description: A name for the workflow step.
          example: Branch
          type: string
          x-struct: null
          x-validate: null
        ref:
          description: The reference key of the workflow step. Must be unique per workflow.
          example: branch_step
          type: string
          x-struct: null
          x-validate: null
        type:
          description: The type of step.
          enum:
            - branch
          example: branch
          type: string
          x-struct: null
          x-validate: null
      required:
        - type
        - ref
        - name
        - description
        - branches
      title: WorkflowBranchStep
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.WorkflowBranchStep
      x-validate: null
    WebhookTemplate:
      description: >-
        A webhook template. By default, a webhook step will use the request settings you configured in your
        webhook channel. You can override this as you see fit on a per-step basis.
      example:
        body: null
        headers:
          - key: X-API-Key
            value: "1234567890"
        method: get
        query_params:
          - key: key
            value: value
        url: https://example.com
      properties:
        body:
          description: The body of the request. Only used for POST or PUT requests.
          example: '{"key": "value"}'
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        headers:
          description: >-
            A list of key-value pairs for the request headers. Each object should contain key and value fields
            with string values.
          items:
            properties:
              key:
                description: The key of the header.
                example: X-API-Key
                type: string
                x-struct: null
                x-validate: null
              value:
                description: The value of the header.
                example: "1234567890"
                type: string
                x-struct: null
                x-validate: null
            required:
              - key
              - value
            type: object
            x-struct: null
            x-validate: null
          type: array
          x-struct: null
          x-validate: null
        method:
          description: The HTTP method of the webhook.
          enum:
            - get
            - post
            - put
            - delete
            - patch
          example: post
          type: string
          x-struct: null
          x-validate: null
        query_params:
          description: >-
            A list of key-value pairs for the request query params. Each object should contain key and value
            fields with string values.
          items:
            properties:
              key:
                description: The key of the query param.
                example: key
                type: string
                x-struct: null
                x-validate: null
              value:
                description: The value of the query param.
                example: value
                type: string
                x-struct: null
                x-validate: null
            required:
              - key
              - value
            type: object
            x-struct: null
            x-validate: null
          type: array
          x-struct: null
          x-validate: null
        url:
          description: The URL of the webhook.
          example: https://example.com
          type: string
          x-struct: null
          x-validate: null
      required:
        - url
        - method
      title: WebhookTemplate
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.WebhookTemplate
      x-validate: null
    GuideActivationLocationRule:
      description: A rule that controls when a guide should be shown based on the user's location in the application.
      example:
        directive: allow
        pathname: /dashboard/*
      properties:
        directive:
          default: allow
          description: Whether to allow or block the guide at the specified pathname.
          enum:
            - allow
            - block
          type: string
          x-struct: null
          x-validate: null
        pathname:
          description: The URL pathname pattern to match against. Must be a valid URI path.
          example: /dashboard/*
          type: string
          x-struct: null
          x-validate: null
      required:
        - directive
        - pathname
      title: GuideActivationLocationRule
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.GuideActivationLocationRule
      x-validate: null
    PaginatedChannelResponse:
      description: A paginated list of Channel. Contains a list of entries and page information.
      example:
        entries:
          - archived_at: null
            created_at: "2021-01-01T00:00:00Z"
            custom_icon_url: null
            key: my-sendgrid-channel
            name: My Sendgrid Channel
            provider: sendgrid
            type: email
            updated_at: "2021-01-01T00:00:00Z"
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/Channel"
          nullable: false
          type: array
          x-struct: null
          x-validate: null
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedChannelResponse
      type: object
      x-struct: null
      x-validate: null
    PaginatedGuideResponse:
      description: A paginated list of Guide. Contains a list of entries and page information.
      example:
        entries:
          - activation_location_rules:
              - directive: allow
                pathname: /dashboard/*
            active: true
            archived_at: null
            channel_key: in-app-guide
            created_at: "2024-01-01T00:00:00Z"
            description: A guide to help users get started with the application
            environment: development
            key: getting-started
            name: Getting Started Guide
            semver: 0.0.1
            sha: "1234567890"
            steps:
              - name: Welcome to the App
                ref: welcome-step
                schema_key: tooltip
                schema_semver: 1.0.0
                schema_variant_key: default
                values:
                  text_field: value
            target_audience_id: null
            target_property_conditions:
              all:
                - argument: some_property
                  operator: equal_to
                  variable: recipient.property
            type: banner
            updated_at: "2024-01-01T00:00:00Z"
            valid: true
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/Guide"
          nullable: false
          type: array
          x-struct: null
          x-validate: null
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedGuideResponse
      type: object
      x-struct: null
      x-validate: null
    EmailMarkdownBlock:
      description: A markdown block in an email template.
      example:
        content: "# Hello, world!"
        id: 123e4567-e89b-12d3-a456-426614174000
        layout_attrs:
          padding_bottom: 8
          padding_left: 4
          padding_right: 4
          padding_top: 8
        type: markdown
        variant: default
        version: 1
      properties:
        content:
          description: The markdown content of the block.
          type: string
          x-struct: null
          x-validate: null
        id:
          description: The ID of the block.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
          x-struct: null
          x-validate: null
        layout_attrs:
          description: The layout attributes of the block.
          properties:
            padding_bottom:
              description: The padding_bottom layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
            padding_left:
              description: The padding_left layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
            padding_right:
              description: The padding_right layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
            padding_top:
              description: The padding_top layout attribute of the block.
              type: integer
              x-struct: null
              x-validate: null
          required:
            - padding_top
            - padding_right
            - padding_bottom
            - padding_left
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the block.
          type: string
          x-struct: null
          x-validate: null
        variant:
          description: The flavor of markdown to use for the block.
          example: default
          type: string
          x-struct: null
          x-validate: null
        version:
          description: The version of the block.
          example: 1
          type: integer
          x-struct: null
          x-validate: null
      required:
        - id
        - type
        - version
        - content
        - variant
      title: EmailMarkdownBlock
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.EmailBlocks.MarkdownBlock
      x-validate: null
    ConditionGroupAllMatch:
      description: A group of conditions that must all be met.
      example:
        all:
          - argument: some_property
            operator: equal_to
            variable: recipient.property
      properties:
        all:
          description: A list of conditions.
          items:
            $ref: "#/components/schemas/Condition"
          type: array
          x-struct: null
          x-validate: null
      title: ConditionGroupAllMatch
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.ConditionGroup.ConditionGroupAllMatch
      x-validate: null
    ExchangeForApiKeyResponse:
      description: Returns an API key that can be used to make requests to the public API.
      example:
        api_key: sk_1234567890
      properties:
        api_key:
          description: The secret API key exchanged from the service token.
          type: string
          x-struct: null
          x-validate: null
      required:
        - api_key
      title: ExchangeForApiKeyResponse
      type: object
      x-struct: null
      x-validate: null
    MessageTypeMarkdownField:
      description: A markdown field used in a message type.
      example:
        key: markdown_field
        label: Markdown Field
        settings:
          default: |-
            # Heading

            This is **bold** and this is *italic*.
          description: A description of the markdown field
          required: true
        type: markdown
      properties:
        key:
          description: The unique key of the field.
          example: key
          type: string
          x-struct: null
          x-validate: null
        label:
          description: The label of the field.
          example: Label
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        settings:
          description: Settings for the markdown field.
          properties:
            default:
              description: The default value of the markdown field.
              example: |-
                # Heading

                This is **bold** and this is *italic*.
              type: string
              x-struct: null
              x-validate: null
            description:
              example: A description of the field, used in the UI
              type: string
              x-struct: null
              x-validate: null
            required:
              description: Whether the field is required.
              example: true
              type: boolean
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the field.
          enum:
            - markdown
          example: markdown
          type: string
          x-struct: null
          x-validate: null
      required:
        - type
        - key
        - label
      title: MessageTypeMarkdownField
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.MessageTypes.MarkdownField
      x-validate: null
    MessageTypeTextareaField:
      description: A textarea field used in a message type.
      example:
        key: textarea_field
        label: Textarea Field
        settings:
          description: A description of the textarea field
          max_length: 1000
          min_length: 10
          required: true
        type: textarea
      properties:
        key:
          description: The unique key of the field.
          example: key
          type: string
          x-struct: null
          x-validate: null
        label:
          description: The label of the field.
          example: Label
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        settings:
          description: Settings for the textarea field.
          properties:
            default:
              description: The default value of the textarea field.
              example: A placeholder
              nullable: true
              type: string
              x-struct: null
              x-validate: null
            description:
              example: A description of the field, used in the UI
              type: string
              x-struct: null
              x-validate: null
            max_length:
              example: 1000
              type: integer
              x-struct: null
              x-validate: null
            min_length:
              example: 10
              type: integer
              x-struct: null
              x-validate: null
            required:
              description: Whether the field is required.
              example: true
              type: boolean
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the field.
          enum:
            - textarea
          example: textarea
          type: string
          x-struct: null
          x-validate: null
      required:
        - type
        - key
        - label
      title: MessageTypeTextareaField
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.MessageTypes.TextareaField
      x-validate: null
    GuideRequest:
      description: A request to create or update a guide.
      example:
        activation_location_rules:
          - directive: allow
            pathname: /dashboard/*
        channel_key: in-app-guide
        description: A guide to help users get started with the application
        name: Getting Started Guide
        steps:
          - name: Welcome to the App
            ref: welcome-step
            schema_key: tooltip
            schema_semver: 1.0.0
            schema_variant_key: default
            values:
              text_field: value
        target_audience_id: null
        target_property_conditions:
          all:
            - argument: some_property
              operator: equal_to
              variable: recipient.property
      properties:
        activation_location_rules:
          description: A list of activation location rules that describe when the guide should be shown.
          items:
            $ref: "#/components/schemas/GuideActivationLocationRule"
          type: array
          x-struct: null
          x-validate: null
        archived_at:
          description: The timestamp of when the guide was archived.
          format: date-time
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        channel_key:
          description: The key of the channel in which the guide exists.
          type: string
          x-struct: null
          x-validate: null
        deleted_at:
          description: The timestamp of when the guide was deleted.
          format: date-time
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        description:
          description: >-
            An arbitrary string attached to a guide object. Useful for adding notes about the guide for
            internal purposes. Maximum of 280 characters allowed.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        name:
          description: A name for the guide. Must be at maximum 255 characters in length.
          type: string
          x-struct: null
          x-validate: null
        steps:
          description: A list of guide step objects in the guide.
          items:
            $ref: "#/components/schemas/GuideStep"
          type: array
          x-struct: null
          x-validate: null
        target_audience_id:
          description: The ID of the target audience for the guide. When not set, will default to targeting all users.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        target_property_conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
              x-struct: null
              x-validate: null
          description: >-
            A conditions object that describes one or more conditions to be met for the guide to be shown to
            an audience member.
          type: object
          x-struct: null
          x-validate: null
      required:
        - name
        - channel_key
        - steps
      title: GuideRequest
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.GuideRequest
      x-validate: null
    TranslationRequest:
      description: A translation object with a content attribute used to update or create a translation.
      example:
        content: '{"hello":"Hello, world!"}'
        format: json
      properties:
        content:
          description: >-
            A JSON encoded string containing the key-value pairs of translation references and translation
            strings.
          type: string
          x-struct: null
          x-validate: null
        format:
          description: Indicates whether content is a JSON encoded object string or a string in the PO format.
          enum:
            - json
            - po
          example: json
          type: string
          x-struct: null
          x-validate: null
      required:
        - content
        - format
      title: TranslationRequest
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.TranslationRequest
      x-validate: null
    GuideActivationParams:
      description: A request to activate or schedule the activation of a guide.
      example:
        active: true
      oneOf:
        - description: A request to activate or deactivate a guide.
          example:
            status: true
          properties:
            status:
              description: Whether to activate or deactivate the guide.
              example: true
              type: boolean
              x-struct: null
              x-validate: null
          required:
            - status
          title: GuideBooleanActivationParams
          type: object
          x-struct: null
          x-validate: null
        - description: A request to schedule the activation of a guide. At least one of from or until must be provided.
          example:
            from: "2024-03-20T10:00:00Z"
            until: "2024-03-21T10:00:00Z"
          properties:
            from:
              description: >-
                When to activate the guide. If provided, the guide will be scheduled to activate at this time.
                Must be in ISO 8601 UTC format.
              example: "2024-03-20T10:00:00Z"
              format: date-time
              type: string
              x-struct: null
              x-validate: null
            until:
              description: >-
                When to deactivate the guide. If provided, the guide will be scheduled to deactivate at this
                time. Must be in ISO 8601 UTC format.
              example: "2024-03-21T10:00:00Z"
              format: date-time
              type: string
              x-struct: null
              x-validate: null
          title: GuideScheduledActivationParams
          type: object
          x-struct: null
          x-validate: null
      title: GuideActivationParams
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.GuideActivationRequest
      x-validate: null
    PaginatedMessageTypeResponse:
      description: A paginated list of MessageType. Contains a list of entries and page information.
      example:
        entries:
          - archived_at: null
            created_at: "2021-01-01T00:00:00Z"
            deleted_at: null
            description: Email message type
            environment: development
            icon_name: email
            key: email
            name: Email
            owner: user
            preview: <div>Hello, world!</div>
            semver: 1.0.0
            sha: "1234567890"
            updated_at: "2021-01-01T00:00:00Z"
            valid: true
            variants:
              - fields:
                  - key: text_field
                    label: My text field
                    settings:
                      description: A description of the text field
                      max_length: 100
                      min_length: 10
                      required: true
                    type: text
                key: default
                name: Default
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/MessageType"
          nullable: false
          type: array
          x-struct: null
          x-validate: null
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedMessageTypeResponse
      type: object
      x-struct: null
      x-validate: null
    SmsTemplate:
      description: An SMS template.
      example:
        settings:
          payload_overrides: '{"name": "John"}'
          to_number: "+1234567890"
        text_body: Hello, world!
      properties:
        settings:
          anyOf:
            - description: >-
                The [settings](https://docs.knock.app/integrations/sms/settings-and-overrides) for the SMS
                template.
              properties:
                payload_overrides:
                  description: A JSON object that overrides the payload sent to the SMS provider.
                  example: '{"name": "John"}'
                  nullable: true
                  type: string
                  x-struct: null
                  x-validate: null
                to_number:
                  description: >-
                    An override for the phone number to send the SMS to. When not set, defaults to
                    `recipient.phone_number`.
                  example: "+1234567890"
                  nullable: true
                  type: string
                  x-struct: null
                  x-validate: null
              type: object
              x-struct: null
              x-validate: null
            - nullable: true
              x-struct: null
              x-validate: null
          description: The settings for the SMS template. Can be omitted.
          type: object
          x-struct: null
          x-validate: null
        text_body:
          description: The message of the SMS.
          example: Hello, world!
          type: string
          x-struct: null
          x-validate: null
      required:
        - text_body
      title: SmsTemplate
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.SmsTemplate
      x-validate: null
    EmailChannelSettings:
      description: Email channel settings. Only used as configuration as part of a workflow channel step.
      example:
        bcc_address: null
        cc_address: null
        from_address: hello@example.com
        from_name: John Doe
        json_overrides: '{"some_override": true}'
        link_tracking: true
        open_tracking: true
        reply_to_address: null
        to_address: hello@example.com
      properties:
        bcc_address:
          description: The BCC address on email notifications. Supports liquid.
          example: hello@example.com
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        cc_address:
          description: The CC address on email notifications. Supports liquid.
          example: hello@example.com
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        from_address:
          description: The email address from which this channel will send. Supports liquid.
          example: hello@example.com
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        from_name:
          description: The name from which this channel will send. Supports liquid.
          example: John Doe
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        json_overrides:
          description: >-
            A JSON template for any custom overrides to merge into the API payload that is sent to the email
            provider. Supports liquid.
          example: '{"some_override": true}'
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        link_tracking:
          description: Whether to track link clicks on email notifications.
          example: true
          type: boolean
          x-struct: null
          x-validate: null
        open_tracking:
          description: Whether to track opens on email notifications.
          example: true
          type: boolean
          x-struct: null
          x-validate: null
        reply_to_address:
          description: The Reply-to address on email notifications. Supports liquid.
          example: hello@example.com
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        to_address:
          description: The email address to which this channel will send. Defaults to `recipient.email`. Supports liquid.
          example: hello@example.com
          type: string
          x-struct: null
          x-validate: null
      title: EmailChannelSettings
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.EmailChannelSettings
      x-validate: null
    SendWindow:
      description: A send window time for a notification. Describes a single day.
      example:
        day: monday
        from: "09:00"
        type: send
        until: "17:00"
      properties:
        day:
          description: The day of the week.
          enum:
            - monday
            - tuesday
            - wednesday
            - thursday
            - friday
            - saturday
            - sunday
          type: string
          x-struct: null
          x-validate: null
        from:
          description: The start time of the send window.
          example: "09:00"
          format: time
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        type:
          description: The type of send window.
          enum:
            - send
            - do_not_send
          example: send
          type: string
          x-struct: null
          x-validate: null
        until:
          description: The end time of the send window.
          example: "17:00"
          format: time
          nullable: true
          type: string
          x-struct: null
          x-validate: null
      required:
        - day
        - type
      title: SendWindow
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.SendWindow
      x-validate: null
    PaginatedEnvironmentResponse:
      description: A paginated list of Environment. Contains a list of entries and page information.
      example:
        entries:
          - created_at: "2022-10-31T19:59:03Z"
            deleted_at: null
            hide_pii_data: false
            label_color: "#000000"
            last_commit_at: "2022-10-31T19:59:03Z"
            name: Development
            order: 0
            owner: system
            slug: development
            updated_at: "2022-10-31T19:59:03Z"
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/Environment"
          nullable: false
          type: array
          x-struct: null
          x-validate: null
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedEnvironmentResponse
      type: object
      x-struct: null
      x-validate: null
    PreviewWorkflowTemplateRequest:
      description: A request to preview a workflow template.
      example:
        actor: dnedry
        data:
          park_id: 1
        recipient: dnedry
        tenant: acme-corp
      properties:
        actor:
          anyOf:
            - $ref: "#/components/schemas/RecipientReference"
            - nullable: true
              x-struct: null
              x-validate: null
          description: The actor to reference in the the workflow run.
          type: object
          x-struct: null
          x-validate: null
        data:
          additionalProperties: true
          description: The data to pass to the workflow template for rendering.
          type: object
          x-struct: null
          x-validate: null
        recipient:
          $ref: "#/components/schemas/RecipientReference"
        tenant:
          description: The tenant to associate the workflow with.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
      required:
        - recipient
      title: PreviewWorkflowTemplateRequest
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.PreviewWorkflowTemplateRequest
      x-validate: null
    EmailTemplateSettings:
      description: The [settings](https://docs.knock.app/integrations/email/settings) for the email template.
      example:
        layout_key: default
      properties:
        attachment_key:
          description: The object path in the data payload (of the workflow trigger call) to resolve attachments.
          example: attachments
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        layout_key:
          description: The key of the email layout which the step is using.
          example: default
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        pre_content:
          description: A liquid template that will be injected into the layout above the message template content.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
      title: EmailTemplateSettings
      type: object
      x-struct: null
      x-validate: null
    EmailHtmlBlock:
      description: An HTML block in an email template.
      example:
        content: <p>Hello, world!</p>
        id: 123e4567-e89b-12d3-a456-426614174000
        type: html
        version: 1
      properties:
        content:
          description: The HTML content of the block.
          type: string
          x-struct: null
          x-validate: null
        id:
          description: The ID of the block.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
          x-struct: null
          x-validate: null
        type:
          description: The type of the block.
          type: string
          x-struct: null
          x-validate: null
        version:
          description: The version of the block.
          example: 1
          type: integer
          x-struct: null
          x-validate: null
      required:
        - id
        - type
        - version
        - content
      title: EmailHtmlBlock
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.EmailBlocks.HtmlBlock
      x-validate: null
    PaginatedEmailLayoutResponse:
      description: A paginated list of EmailLayout. Contains a list of entries and page information.
      example:
        entries:
          - created_at: "2021-01-01T00:00:00Z"
            environment: development
            footer_links:
              - text: Example
                url: http://example.com
            html_layout: <html><body>Hello, world!</body></html>
            key: transactional
            name: Transactional
            sha: "1234567890"
            text_layout: Hello, world!
            updated_at: "2021-01-01T00:00:00Z"
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/EmailLayout"
          nullable: false
          type: array
          x-struct: null
          x-validate: null
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedEmailLayoutResponse
      type: object
      x-struct: null
      x-validate: null
    RunWorkflowResponse:
      description: A response to a run workflow request.
      example:
        workflow_run_id: 123e4567-e89b-12d3-a456-426614174000
      properties:
        workflow_run_id:
          description: The ID of the workflow run.
          format: uuid
          type: string
          x-struct: null
          x-validate: null
      required:
        - workflow_run_id
      title: RunWorkflowResponse
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.RunWorkflowResponse
      x-validate: null
    Partial:
      description: A partial is a reusable piece of content that can be used in a template.
      example:
        content: <p>Hello, world!</p>
        description: This is a test partial
        environment: development
        icon_name: icon-name
        inserted_at: "2021-01-01T00:00:00Z"
        key: my-partial
        name: My Partial
        type: html
        updated_at: "2021-01-01T00:00:00Z"
        valid: true
        visual_block_enabled: true
      properties:
        content:
          description: The partial content.
          type: string
          x-struct: null
          x-validate: null
        description:
          description: >-
            An arbitrary string attached to a partial object. Useful for adding notes about the partial for
            internal purposes. Maximum of 280 characters allowed.
          type: string
          x-struct: null
          x-validate: null
        environment:
          description: The slug of the environment in which the partial exists.
          type: string
          x-struct: null
          x-validate: null
        icon_name:
          description: The name of the icon to be used in the visual editor.
          type: string
          x-struct: null
          x-validate: null
        inserted_at:
          description: The timestamp of when the partial was created.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        key:
          description: >-
            The unique key string for the partial object. Must be at minimum 3 characters and at maximum 255
            characters in length. Must be in the format of ^[a-z0-9_-]+$.
          type: string
          x-struct: null
          x-validate: null
        name:
          description: A name for the partial. Must be at maximum 255 characters in length.
          type: string
          x-struct: null
          x-validate: null
        type:
          description: The partial type. One of 'html', 'json', 'markdown', 'text'.
          enum:
            - html
            - text
            - json
            - markdown
          type: string
          x-struct: null
          x-validate: null
        updated_at:
          description: The timestamp of when the partial was last updated.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        valid:
          description: Whether the partial and its content are in a valid state.
          type: boolean
          x-struct: null
          x-validate: null
        visual_block_enabled:
          description: Indicates whether the partial can be used in the visual editor. Only applies to HTML partials.
          type: boolean
          x-struct: null
          x-validate: null
      required:
        - key
        - type
        - name
        - content
        - inserted_at
        - updated_at
        - valid
      title: Partial
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.Partial
      x-validate: null
    UserRecipientReference:
      description: A user ID.
      example: user_1
      nullable: false
      title: UserRecipientReference
      type: string
      x-struct: null
      x-validate: null
    MessageType:
      description: >-
        A message type is a schema for a message that maps to a UI component or element within your
        application.
      example:
        archived_at: null
        created_at: "2021-01-01T00:00:00Z"
        deleted_at: null
        description: Email message type
        environment: development
        icon_name: email
        key: email
        name: Email
        owner: user
        preview: <div>Hello, world!</div>
        semver: 1.0.0
        sha: "1234567890"
        updated_at: "2021-01-01T00:00:00Z"
        valid: true
        variants:
          - fields:
              - key: text_field
                label: My text field
                settings:
                  description: A description of the text field
                  max_length: 100
                  min_length: 10
                  required: true
                type: text
            key: default
            name: Default
      properties:
        archived_at:
          description: The timestamp of when the message type was deleted.
          format: date-time
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        created_at:
          description: The timestamp of when the message type was created.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        deleted_at:
          description: The timestamp of when the message type was deleted.
          format: date-time
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        description:
          description: >-
            An arbitrary string attached to a message type object. Useful for adding notes about the message
            type for internal purposes. Maximum of 280 characters allowed.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        environment:
          description: The environment of the message type.
          type: string
          x-struct: null
          x-validate: null
        icon_name:
          description: The icon name of the message type.
          type: string
          x-struct: null
          x-validate: null
        key:
          description: >-
            The unique key string for the message type object. Must be at minimum 3 characters and at maximum
            255 characters in length. Must be in the format of ^[a-z0-9_-]+$.
          type: string
          x-struct: null
          x-validate: null
        name:
          description: A name for the message type. Must be at maximum 255 characters in length.
          type: string
          x-struct: null
          x-validate: null
        owner:
          description: The owner of the message type.
          enum:
            - system
            - user
          type: string
          x-struct: null
          x-validate: null
        preview:
          description: An HTML/liquid template for the message type preview.
          type: string
          x-struct: null
          x-validate: null
        semver:
          description: The semantic version of the message type.
          example: 1.0.0
          type: string
          x-struct: null
          x-validate: null
        sha:
          description: The SHA hash of the message type.
          type: string
          x-struct: null
          x-validate: null
        updated_at:
          description: The timestamp of when the message type was last updated.
          format: date-time
          type: string
          x-struct: null
          x-validate: null
        valid:
          description: Whether the message type is valid.
          type: boolean
          x-struct: null
          x-validate: null
        variants:
          description: The variants of the message type.
          items:
            $ref: "#/components/schemas/MessageTypeVariant"
          type: array
          x-struct: null
          x-validate: null
      required:
        - key
        - valid
        - owner
        - environment
        - created_at
        - name
        - variants
        - preview
        - semver
        - updated_at
        - sha
      title: MessageType
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.MessageType
      x-validate: null
    WorkflowFetchStep:
      description: >-
        A fetch function step. Read more in the
        [docs](https://docs.knock.app/designing-workflows/fetch-function).
      example:
        name: Fetch step
        ref: fetch_1
        settings:
          body: null
          headers:
            - key: X-API-Key
              value: "1234567890"
          method: get
          query_params:
            - key: key
              value: value
          url: https://example.com
        type: fetch
      properties:
        conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
              x-struct: null
              x-validate: null
          description: >-
            A conditions object that describes one or more conditions to be met in order for the step to be
            executed.
          type: object
          x-struct: null
          x-validate: null
        description:
          description: >-
            An arbitrary string attached to a workflow step. Useful for adding notes about the workflow for
            internal purposes.
          example: Fetch step description
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        name:
          description: A name for the workflow step.
          example: Fetch step
          type: string
          x-struct: null
          x-validate: null
        ref:
          description: The reference key of the workflow step. Must be unique per workflow.
          example: fetch_step
          type: string
          x-struct: null
          x-validate: null
        settings:
          $ref: "#/components/schemas/RequestTemplate"
        type:
          description: The type of the workflow step.
          enum:
            - fetch
          example: fetch
          type: string
          x-struct: null
          x-validate: null
      required:
        - type
        - ref
        - name
        - settings
      title: WorkflowFetchStep
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.WorkflowFetchStep
      x-validate: null
    PaginatedPartialResponse:
      description: A paginated list of Partial. Contains a list of entries and page information.
      example:
        entries:
          - content: <p>Hello, world!</p>
            description: This is a test partial
            environment: development
            icon_name: icon-name
            inserted_at: "2021-01-01T00:00:00Z"
            key: my-partial
            name: My Partial
            type: html
            updated_at: "2021-01-01T00:00:00Z"
            valid: true
            visual_block_enabled: true
        page_info:
          after: null
          before: null
          page_size: 25
      properties:
        entries:
          description: A list of entries.
          items:
            $ref: "#/components/schemas/Partial"
          nullable: false
          type: array
          x-struct: null
          x-validate: null
        page_info:
          $ref: "#/components/schemas/PageInfo"
      required:
        - entries
        - page_info
      title: PaginatedPartialResponse
      type: object
      x-struct: null
      x-validate: null
    WrappedTranslationResponse:
      description: Wraps the Translation response under the `translation` key.
      example:
        translation:
          content: '{"hello":"Hello, world!"}'
          format: json
          inserted_at: "2021-01-01T00:00:00Z"
          locale_code: en
          namespace: my_app
          updated_at: "2021-01-01T00:00:00Z"
      properties:
        translation:
          $ref: "#/components/schemas/Translation"
      required:
        - translation
      title: WrappedTranslationResponse
      type: object
      x-struct: null
      x-validate: null
    WrappedGuideRequestRequest:
      description: Wraps the GuideRequest request under the guide key.
      example:
        guide:
          activation_location_rules:
            - directive: allow
              pathname: /dashboard/*
          channel_key: in-app-guide
          description: A guide to help users get started with the application
          name: Getting Started Guide
          steps:
            - name: Welcome to the App
              ref: welcome-step
              schema_key: tooltip
              schema_semver: 1.0.0
              schema_variant_key: default
              values:
                text_field: value
          target_audience_id: null
          target_property_conditions:
            all:
              - argument: some_property
                operator: equal_to
                variable: recipient.property
      properties:
        guide:
          $ref: "#/components/schemas/GuideRequest"
      required:
        - guide
      title: WrappedGuideRequestRequest
      type: object
      x-struct: null
      x-validate: null
    MessageTypeSelectField:
      description: A select field used in a message type.
      example:
        key: select_field
        label: Select Field
        settings:
          default: option1
          description: A description of the select field
          options:
            - label: Option 1
              value: option1
            - label: Option 2
              value: option2
            - label: Option 3
              value: option3
          required: true
        type: select
      properties:
        key:
          description: The unique key of the field.
          example: key
          type: string
          x-struct: null
          x-validate: null
        label:
          description: The label of the field.
          example: Label
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        settings:
          description: Settings for the select field.
          properties:
            default:
              description: The default value for the select field.
              example: option1
              nullable: true
              type: string
              x-struct: null
              x-validate: null
            description:
              example: A description of the field, used in the UI
              type: string
              x-struct: null
              x-validate: null
            options:
              description: The available options for the select field.
              items:
                properties:
                  label:
                    description: The display label for the option.
                    example: Option 1
                    type: string
                    x-struct: null
                    x-validate: null
                  value:
                    description: The value for the option.
                    example: option1
                    type: string
                    x-struct: null
                    x-validate: null
                required:
                  - value
                type: object
                x-struct: null
                x-validate: null
              type: array
              x-struct: null
              x-validate: null
            required:
              description: Whether the field is required.
              example: true
              type: boolean
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the field.
          enum:
            - select
          example: select
          type: string
          x-struct: null
          x-validate: null
      required:
        - type
        - key
        - label
        - settings
      title: MessageTypeSelectField
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.MessageTypes.SelectField
      x-validate: null
    GuideStep:
      description: A step in a guide that corresponds to a piece of UI and its content.
      example:
        name: Welcome to the App
        ref: welcome-step
        schema_key: tooltip
        schema_semver: 1.0.0
        schema_variant_key: default
        values:
          text_field: value
      properties:
        name:
          description: A name for the step.
          type: string
          x-struct: null
          x-validate: null
        ref:
          description: >-
            The unique reference string for the step. Must be at minimum 3 characters and at maximum 255
            characters in length. Must be in the format of ^[a-z0-9_-]+$.
          example: welcome-step
          type: string
          x-struct: null
          x-validate: null
        schema_key:
          description: The key of the template schema to use for this step.
          example: tooltip
          type: string
          x-struct: null
          x-validate: null
        schema_semver:
          description: The semantic version of the template schema to use.
          example: 1.0.0
          type: string
          x-struct: null
          x-validate: null
        schema_variant_key:
          description: The key of the template schema variant to use.
          example: default
          type: string
          x-struct: null
          x-validate: null
        values:
          additionalProperties: true
          description: >-
            A map of values that make up the step's content. Each value must conform to its respective
            template schema field settings.
          example:
            text_field: value
          type: object
          x-struct: null
          x-validate: null
      required:
        - ref
        - schema_key
        - schema_semver
        - schema_variant_key
      title: GuideStep
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.GuideStep
      x-validate: null
    WorkflowTriggerWorkflowStep:
      description: >-
        A workflow trigger function step. Read more in the
        [docs](https://docs.knock.app/designing-workflows/trigger-workflow-function).
      example:
        name: Trigger workflow step
        ref: trigger_workflow_step
        settings:
          actor: "{{ actor.id }}"
          cancellation_key: "{{ workflow.cancellation_key }}"
          data: "{{ data | json }}"
          recipients: "{{ recipient.id }}"
          tenant: "{{ tenant.id }}"
          workflow_key: dinosaurs-loose
        type: trigger_workflow
      properties:
        conditions:
          anyOf:
            - $ref: "#/components/schemas/ConditionGroup"
            - nullable: true
              x-struct: null
              x-validate: null
          description: A set of conditions to be evaluated for this trigger workflow step.
          type: object
          x-struct: null
          x-validate: null
        description:
          description: A description for the workflow step.
          example: Trigger workflow step description
          type: string
          x-struct: null
          x-validate: null
        name:
          description: A name for the workflow step.
          example: Trigger workflow step
          type: string
          x-struct: null
          x-validate: null
        ref:
          description: The reference key of the workflow step. Must be unique per workflow.
          example: trigger_workflow_step
          type: string
          x-struct: null
          x-validate: null
        settings:
          description: The settings for the workflow trigger workflow step.
          properties:
            actor:
              description: The actor to trigger the workflow with. Supports liquid.
              example: "{{ actor.id }}"
              type: string
              x-struct: null
              x-validate: null
            cancellation_key:
              description: The cancellation key to trigger the workflow with. Supports liquid.
              example: "{{ workflow.cancellation_key }}"
              type: string
              x-struct: null
              x-validate: null
            data:
              description: The data to be supplied to the workflow. Supports liquid.
              example: "{{ data | json }}"
              type: string
              x-struct: null
              x-validate: null
            recipients:
              description: The recipients or recipient to trigger the workflow for. Supports liquid.
              example: "{{ recipient.id }}"
              type: string
              x-struct: null
              x-validate: null
            tenant:
              description: The tenant to trigger the workflow with. Supports liquid.
              example: "{{ tenant.id }}"
              type: string
              x-struct: null
              x-validate: null
            workflow_key:
              description: The key of the workflow to trigger. Supports liquid.
              example: dinosaurs-loose
              type: string
              x-struct: null
              x-validate: null
          type: object
          x-struct: null
          x-validate: null
        type:
          description: The type of the workflow step.
          enum:
            - trigger_workflow
          example: trigger_workflow
          type: string
          x-struct: null
          x-validate: null
      required:
        - type
        - ref
        - name
        - settings
      title: WorkflowTriggerWorkflowStep
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.WorkflowTriggerWorkflowStep
      x-validate: null
    Condition:
      description: A condition to be evaluated.
      example:
        argument: some_property
        operator: equal_to
        variable: recipient.property
      properties:
        argument:
          description: >-
            The argument to be evaluated. Arguments can be either static values or dynamic properties. Static
            values will always be JSON decoded so will support strings, lists, objects, numbers, and booleans.
            Dynamic values should be path expressions.
          example: some_property
          nullable: true
          type: string
          x-struct: null
          x-validate: null
        operator:
          description: The operator to use in the evaluation of the condition.
          enum:
            - equal_to
            - not_equal_to
            - greater_than
            - less_than
            - greater_than_or_equal_to
            - less_than_or_equal_to
            - contains
            - not_contains
            - contains_all
            - empty
            - not_empty
            - is_audience_member
            - is_not_audience_member
          example: equal_to
          type: string
          x-struct: null
          x-validate: null
        variable:
          description: >-
            The variable to be evaluated. Variables can be either static values or dynamic properties. Static
            values will always be JSON decoded so will support strings, lists, objects, numbers, and booleans.
            Dynamic values should be path expressions.
          example: recipient.property
          type: string
          x-struct: null
          x-validate: null
      required:
        - variable
        - operator
      title: Condition
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.Condition
      x-validate: null
    PushTemplate:
      description: A push notification template.
      example:
        settings:
          payload_overrides: '{"name": "John"}'
        text_body: Hello, world!
        title: Hello, world!
      properties:
        settings:
          anyOf:
            - properties:
                delivery_type:
                  description: >-
                    The delivery type of the push notification. Defaults to `content`. Set as silent to send a
                    data-only notification. When set to `data`, no body will be sent.
                  enum:
                    - silent
                    - content
                  example: content
                  type: string
                  x-struct: null
                  x-validate: null
                payload_overrides:
                  description: A JSON object that overrides the payload sent to the push provider.
                  example: '{"name": "John"}'
                  type: string
                  x-struct: null
                  x-validate: null
              type: object
              x-struct: null
              x-validate: null
            - nullable: true
              x-struct: null
              x-validate: null
          description: >-
            The [settings](https://docs.knock.app/integrations/sms/settings-and-overrides) for the push
            template. Can be omitted.
          type: object
          x-struct: null
          x-validate: null
        text_body:
          description: The body of the push notification.
          example: Hello, world!
          type: string
          x-struct: null
          x-validate: null
        title:
          description: The title of the push notification.
          example: Hello, world!
          type: string
          x-struct: null
          x-validate: null
      required:
        - title
        - text_body
      title: PushTemplate
      type: object
      x-struct: Elixir.ControlWeb.V1.Specs.PushTemplate
      x-validate: null
    CommitAuthor:
      description: The author of the commit.
      example:
        email: john.doe@example.com
        name: John Doe
      properties:
        email:
          description: The email address of the commit author.
          type: string
          x-struct: null
          x-validate: null
        name:
          description: The name of the commit author.
          nullable: true
          type: string
          x-struct: null
          x-validate: null
      required:
        - email
      title: CommitAuthor
      type: object
      x-struct: null
      x-validate: null
    CommitResource:
      description: The resource object associated with the commit.
      example:
        identifier: my-email-layout
        type: email_layout
      properties:
        identifier:
          description: The unique identifier for the resource.
          type: string
          x-struct: null
          x-validate: null
        type:
          description: The type of the resource object.
          enum:
            - email_layout
            - workflow
            - translation
            - partial
            - message_type
          example: workflow
          type: string
          x-struct: null
          x-validate: null
      required:
        - identifier
        - type
      title: CommitResource
      type: object
      x-struct: null
      x-validate: null
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
info:
  title: Knock Management API (mAPI)
  version: "1.0"
openapi: 3.0.0
paths:
  /v1/environments/{environment_slug}:
    get:
      callbacks: {}
      description: Returns a single environment by the `environment_slug`.
      operationId: getEnvironment
      parameters:
        - description: The slug of the environment to retrieve.
          in: path
          name: environment_slug
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
          description: OK
      summary: Get an environment
      tags:
        - Environments
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const environment = await client.environments.retrieve('development');

          console.log(environment.hide_pii_data);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          environment = client.environments.retrieve(
              "development",
          )
          print(environment.hide_pii_data)
  /v1/workflows/{workflow_key}/validate:
    put:
      callbacks: {}
      description: >
        Validates a workflow payload without persisting it. Some read-only fields will be empty as they are
        generated by the system when persisted.


        Note: Validating a workflow is only done in the development environment context.
      operationId: validateWorkflow
      parameters:
        - description: The key of the workflow.
          in: path
          name: workflow_key
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the WorkflowRequest request under the workflow key.
              example:
                workflow:
                  name: My Workflow
                  steps:
                    - channel_key: in-app-feed
                      name: Channel 1
                      ref: channel_1
                      template:
                        action_url: "{{ vars.app_url }}"
                        markdown_body: Hello **{{ recipient.name }}**
                      type: channel
              properties:
                workflow:
                  $ref: "#/components/schemas/WorkflowRequest"
              required:
                - workflow
              title: WrappedWorkflowRequestRequest
              type: object
              x-struct: null
              x-validate: null
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Workflow response under the `workflow` key.
                example:
                  workflow:
                    active: false
                    categories:
                      - marketing
                      - black-friday
                    conditions:
                      all:
                        - argument: admin
                          operator: equal_to
                          variable: recipient.role
                    created_at: "2022-12-16T19:07:50.027113Z"
                    description: This is a dummy workflow for demo purposes.
                    environment: development
                    key: december-16-demo
                    name: december-16-demo
                    settings:
                      override_preferences: true
                    sha: f7e9d3b2a1c8e6m4k5j7h9g0i2l3n4p6q8r0t1u3v5w7x9y
                    steps:
                      - channel_key: in-app-feed
                        description: Main in-app feed
                        name: In-app step
                        ref: in_app_feed_1
                        template:
                          action_url: "{{ vars.app_url }}"
                          markdown_body: Hello **{{ recipient.name }}**
                        type: channel
                    trigger_data_json_schema:
                      properties:
                        name:
                          type: string
                      required:
                        - name
                      type: object
                    trigger_frequency: every_trigger
                    updated_at: "2023-02-08T22:15:19.846681Z"
                    valid: true
                properties:
                  workflow:
                    $ref: "#/components/schemas/Workflow"
                required:
                  - workflow
                title: WrappedWorkflowResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Validate a workflow
      tags:
        - Workflows
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.workflows.validate('workflow_key', {
            environment: 'development',
            workflow: {
              name: 'My Workflow',
              steps: [
                {
                  name: 'Channel 1',
                  ref: 'channel_1',
                  template: { markdown_body: 'Hello **{{ recipient.name }}**' },
                  type: 'channel',
                },
              ],
            },
          });

          console.log(response.workflow);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.workflows.validate(
              workflow_key="workflow_key",
              environment="development",
              workflow={
                  "name": "My Workflow",
                  "steps": [{
                      "name": "Channel 1",
                      "ref": "channel_1",
                      "template": {
                          "markdown_body": "Hello **{{ recipient.name }}**"
                      },
                      "type": "channel",
                  }],
              },
          )
          print(response.workflow)
  /v1/workflows/{workflow_key}/run:
    put:
      callbacks: {}
      description: Runs the latest version of a committed workflow in a given environment using the params provided.
      operationId: runWorkflow
      parameters:
        - description: The key of the workflow.
          in: path
          name: workflow_key
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunWorkflowRequest"
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunWorkflowResponse"
          description: OK
      summary: Run a workflow
      tags:
        - Workflows
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.workflows.run('workflow_key', {
            environment: 'development',
            recipients: ['dnedry'],
          });

          console.log(response.workflow_run_id);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.workflows.run(
              workflow_key="workflow_key",
              environment="development",
              recipients=["dnedry"],
          )
          print(response.workflow_run_id)
  /v1/email_layouts:
    get:
      callbacks: {}
      description: Returns a paginated list of email layouts available in a given environment.
      operationId: listEmailLayouts
      parameters:
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: >-
            Whether to hide uncommitted changes. When true, only committed changes will be returned. When
            false, both committed and uncommitted changes will be returned.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of EmailLayout. Contains a list of entries and page information.
                example:
                  entries:
                    - created_at: "2021-01-01T00:00:00Z"
                      environment: development
                      footer_links:
                        - text: Example
                          url: http://example.com
                      html_layout: <html><body>Hello, world!</body></html>
                      key: transactional
                      name: Transactional
                      sha: "1234567890"
                      text_layout: Hello, world!
                      updated_at: "2021-01-01T00:00:00Z"
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/EmailLayout"
                    nullable: false
                    type: array
                    x-struct: null
                    x-validate: null
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedEmailLayoutResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: List email layouts
      tags:
        - Email layouts
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          // Automatically fetches more pages as needed.
          for await (const emailLayout of client.emailLayouts.list({ environment: 'development' })) {
            console.log(emailLayout.created_at);
          }
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          page = client.email_layouts.list(
              environment="development",
          )
          page = page.entries[0]
          print(page.created_at)
  /v1/guides/{guide_key}:
    get:
      callbacks: {}
      description: Get a guide by its key.
      operationId: getGuide
      parameters:
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: The key of the guide to retrieve.
          in: path
          name: guide_key
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: >-
            Whether to hide uncommitted changes. When true, only committed changes will be returned. When
            false, both committed and uncommitted changes will be returned.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Guide"
          description: OK
      summary: Get a guide
      tags:
        - Guides
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const guide = await client.guides.retrieve('guide_key', { environment: 'development' });

          console.log(guide.target_audience_id);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          guide = client.guides.retrieve(
              guide_key="guide_key",
              environment="development",
          )
          print(guide.target_audience_id)
    put:
      callbacks: {}
      description: |
        Updates a guide of a given key, or creates a new one if it does not yet exist.

        Note: this endpoint only operates on guides in the "development" environment.
      operationId: upsertGuide
      parameters:
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: The key of the guide to upsert.
          in: path
          name: guide_key
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: Whether to commit the resource at the same time as modifying it.
          in: query
          name: commit
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: The message to commit the resource with, only used if `commit` is `true`.
          in: query
          name: commit_message
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the GuideRequest request under the guide key.
              example:
                guide:
                  activation_location_rules:
                    - directive: allow
                      pathname: /dashboard/*
                  channel_key: in-app-guide
                  description: A guide to help users get started with the application
                  name: Getting Started Guide
                  steps:
                    - name: Welcome to the App
                      ref: welcome-step
                      schema_key: tooltip
                      schema_semver: 1.0.0
                      schema_variant_key: default
                      values:
                        text_field: value
                  target_audience_id: null
                  target_property_conditions:
                    all:
                      - argument: some_property
                        operator: equal_to
                        variable: recipient.property
              properties:
                guide:
                  $ref: "#/components/schemas/GuideRequest"
              required:
                - guide
              title: WrappedGuideRequestRequest
              type: object
              x-struct: null
              x-validate: null
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Guide response under the `guide` key.
                example:
                  guide:
                    activation_location_rules:
                      - directive: allow
                        pathname: /dashboard/*
                    active: true
                    archived_at: null
                    channel_key: in-app-guide
                    created_at: "2024-01-01T00:00:00Z"
                    description: A guide to help users get started with the application
                    environment: development
                    key: getting-started
                    name: Getting Started Guide
                    semver: 0.0.1
                    sha: "1234567890"
                    steps:
                      - name: Welcome to the App
                        ref: welcome-step
                        schema_key: tooltip
                        schema_semver: 1.0.0
                        schema_variant_key: default
                        values:
                          text_field: value
                    target_audience_id: null
                    target_property_conditions:
                      all:
                        - argument: some_property
                          operator: equal_to
                          variable: recipient.property
                    type: banner
                    updated_at: "2024-01-01T00:00:00Z"
                    valid: true
                properties:
                  guide:
                    $ref: "#/components/schemas/Guide"
                required:
                  - guide
                title: WrappedGuideResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Upsert a guide
      tags:
        - Guides
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.guides.upsert('guide_key', {
            environment: 'development',
            guide: {
              channel_key: 'in-app-guide',
              name: 'Getting Started Guide',
              steps: [
                { ref: 'welcome-step', schema_key: 'tooltip', schema_semver: '1.0.0', schema_variant_key: 'default' },
              ],
            },
          });

          console.log(response.guide);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.guides.upsert(
              guide_key="guide_key",
              environment="development",
              guide={
                  "channel_key": "in-app-guide",
                  "name": "Getting Started Guide",
                  "steps": [{
                      "ref": "welcome-step",
                      "schema_key": "tooltip",
                      "schema_semver": "1.0.0",
                      "schema_variant_key": "default",
                  }],
              },
          )
          print(response.guide)
  /v1/guides:
    get:
      callbacks: {}
      description: Returns a paginated list of guides available in a given environment.
      operationId: listGuides
      parameters:
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: >-
            Whether to hide uncommitted changes. When true, only committed changes will be returned. When
            false, both committed and uncommitted changes will be returned.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of Guide. Contains a list of entries and page information.
                example:
                  entries:
                    - activation_location_rules:
                        - directive: allow
                          pathname: /dashboard/*
                      active: true
                      archived_at: null
                      channel_key: in-app-guide
                      created_at: "2024-01-01T00:00:00Z"
                      description: A guide to help users get started with the application
                      environment: development
                      key: getting-started
                      name: Getting Started Guide
                      semver: 0.0.1
                      sha: "1234567890"
                      steps:
                        - name: Welcome to the App
                          ref: welcome-step
                          schema_key: tooltip
                          schema_semver: 1.0.0
                          schema_variant_key: default
                          values:
                            text_field: value
                      target_audience_id: null
                      target_property_conditions:
                        all:
                          - argument: some_property
                            operator: equal_to
                            variable: recipient.property
                      type: banner
                      updated_at: "2024-01-01T00:00:00Z"
                      valid: true
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/Guide"
                    nullable: false
                    type: array
                    x-struct: null
                    x-validate: null
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedGuideResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: List guides
      tags:
        - Guides
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          // Automatically fetches more pages as needed.
          for await (const guide of client.guides.list({ environment: 'development' })) {
            console.log(guide.target_audience_id);
          }
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          page = client.guides.list(
              environment="development",
          )
          page = page.entries[0]
          print(page.target_audience_id)
  /v1/translations:
    get:
      callbacks: {}
      description: >
        Returns a paginated list of translations available in a given environment. The translations are
        returned in alphabetical order by locale code.
      operationId: listTranslations
      parameters:
        - description: A specific locale code to filter translations for.
          in: query
          name: locale_code
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: A specific namespace to filter translations for.
          in: query
          name: namespace
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: Optionally specify the returned content format. Supports 'json' and 'po'. Defaults to 'json'.
          in: query
          name: format
          required: false
          schema:
            enum:
              - json
              - po
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: >-
            Whether to hide uncommitted changes. When true, only committed changes will be returned. When
            false, both committed and uncommitted changes will be returned.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of Translation. Contains a list of entries and page information.
                example:
                  entries:
                    - content: '{"hello":"Hello, world!"}'
                      format: json
                      inserted_at: "2021-01-01T00:00:00Z"
                      locale_code: en
                      namespace: my_app
                      updated_at: "2021-01-01T00:00:00Z"
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/Translation"
                    nullable: false
                    type: array
                    x-struct: null
                    x-validate: null
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedTranslationResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: List translations
      tags:
        - Translations
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          // Automatically fetches more pages as needed.
          for await (const translation of client.translations.list({ environment: 'development' })) {
            console.log(translation.content);
          }
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          page = client.translations.list(
              environment="development",
          )
          page = page.entries[0]
          print(page.content)
  /v1/workflows/{workflow_key}/steps/{step_ref}/preview_template:
    post:
      callbacks: {}
      description: Generates a rendered template for a given channel step in a workflow.
      operationId: previewWorkflowTemplate
      parameters:
        - description: The key of the workflow.
          in: path
          name: workflow_key
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The reference key of the channel step in the workflow to preview.
          in: path
          name: step_ref
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PreviewWorkflowTemplateRequest"
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreviewWorkflowTemplateResponse"
          description: OK
      summary: Preview a workflow template
      tags:
        - Workflows
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.workflows.steps.previewTemplate('step_ref', {
            workflow_key: 'workflow_key',
            environment: 'development',
            recipient: 'dnedry',
          });

          console.log(response.content_type);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.workflows.steps.preview_template(
              step_ref="step_ref",
              workflow_key="workflow_key",
              environment="development",
              recipient="dnedry",
          )
          print(response.content_type)
  /v1/guides/{guide_key}/activate:
    put:
      callbacks: {}
      description: >
        Activates (or deactivates) a guide in a given environment. You can either set the active status
        immediately or schedule it.


        Note: This immediately enables or disables a guide in a given environment without needing to go
        through environment promotion.
      operationId: activateGuide
      parameters:
        - description: The key of the guide.
          in: path
          name: guide_key
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GuideActivationParams"
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Guide response under the `guide` key.
                example:
                  guide:
                    activation_location_rules:
                      - directive: allow
                        pathname: /dashboard/*
                    active: true
                    archived_at: null
                    channel_key: in-app-guide
                    created_at: "2024-01-01T00:00:00Z"
                    description: A guide to help users get started with the application
                    environment: development
                    key: getting-started
                    name: Getting Started Guide
                    semver: 0.0.1
                    sha: "1234567890"
                    steps:
                      - name: Welcome to the App
                        ref: welcome-step
                        schema_key: tooltip
                        schema_semver: 1.0.0
                        schema_variant_key: default
                        values:
                          text_field: value
                    target_audience_id: null
                    target_property_conditions:
                      all:
                        - argument: some_property
                          operator: equal_to
                          variable: recipient.property
                    type: banner
                    updated_at: "2024-01-01T00:00:00Z"
                    valid: true
                properties:
                  guide:
                    $ref: "#/components/schemas/Guide"
                required:
                  - guide
                title: WrappedGuideResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Activate a guide
      tags:
        - Guides
      x-stainless-snippets:
        typescript: >-
          import KnockMgmt from '@knocklabs/mgmt';


          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });


          const response = await client.guides.activate('guide_key', { environment: 'development', status:
          true });


          console.log(response.guide);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.guides.activate(
              guide_key="guide_key",
              environment="development",
              status=True,
          )
          print(response.guide)
  /v1/partials:
    get:
      callbacks: {}
      description: List all partials for a given environment.
      operationId: listPartials
      parameters:
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: >-
            Whether to hide uncommitted changes. When true, only committed changes will be returned. When
            false, both committed and uncommitted changes will be returned.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of Partial. Contains a list of entries and page information.
                example:
                  entries:
                    - content: <p>Hello, world!</p>
                      description: This is a test partial
                      environment: development
                      icon_name: icon-name
                      inserted_at: "2021-01-01T00:00:00Z"
                      key: my-partial
                      name: My Partial
                      type: html
                      updated_at: "2021-01-01T00:00:00Z"
                      valid: true
                      visual_block_enabled: true
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/Partial"
                    nullable: false
                    type: array
                    x-struct: null
                    x-validate: null
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedPartialResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: List partials
      tags:
        - Partials
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          // Automatically fetches more pages as needed.
          for await (const partial of client.partials.list({ environment: 'development' })) {
            console.log(partial.valid);
          }
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          page = client.partials.list(
              environment="development",
          )
          page = page.entries[0]
          print(page.valid)
  /v1/partials/{partial_key}:
    get:
      callbacks: {}
      description: Get a partial by its key.
      operationId: getPartial
      parameters:
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: The key of the partial to retrieve.
          in: path
          name: partial_key
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: >-
            Whether to hide uncommitted changes. When true, only committed changes will be returned. When
            false, both committed and uncommitted changes will be returned.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Partial"
          description: OK
      summary: Get a partial
      tags:
        - Partials
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const partial = await client.partials.retrieve('partial_key', { environment: 'development' });

          console.log(partial.valid);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          partial = client.partials.retrieve(
              partial_key="partial_key",
              environment="development",
          )
          print(partial.valid)
    put:
      callbacks: {}
      description: |
        Updates a partial of a given key, or creates a new one if it does not yet exist.

        Note: this endpoint only operates on partials in the “development” environment.
      operationId: upsertPartial
      parameters:
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: The key of the partial to upsert.
          in: path
          name: partial_key
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: Whether to commit the resource at the same time as modifying it.
          in: query
          name: commit
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: The message to commit the resource with, only used if `commit` is `true`.
          in: query
          name: commit_message
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the PartialRequest request under the partial key.
              example:
                partial:
                  content: <p>Hello, world!</p>
                  name: My Partial
                  type: html
              properties:
                partial:
                  $ref: "#/components/schemas/PartialRequest"
              required:
                - partial
              title: WrappedPartialRequestRequest
              type: object
              x-struct: null
              x-validate: null
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Partial response under the `partial` key.
                example:
                  partial:
                    content: <p>Hello, world!</p>
                    description: This is a test partial
                    environment: development
                    icon_name: icon-name
                    inserted_at: "2021-01-01T00:00:00Z"
                    key: my-partial
                    name: My Partial
                    type: html
                    updated_at: "2021-01-01T00:00:00Z"
                    valid: true
                    visual_block_enabled: true
                properties:
                  partial:
                    $ref: "#/components/schemas/Partial"
                required:
                  - partial
                title: WrappedPartialResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Upsert a partial
      tags:
        - Partials
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.partials.upsert('partial_key', {
            environment: 'development',
            partial: { content: '<p>Hello, world!</p>', name: 'My Partial', type: 'html' },
          });

          console.log(response.partial);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.partials.upsert(
              partial_key="partial_key",
              environment="development",
              partial={
                  "content": "<p>Hello, world!</p>",
                  "name": "My Partial",
                  "type": "html",
              },
          )
          print(response.partial)
  /v1/channels:
    get:
      callbacks: {}
      description: >-
        Returns a paginated list of channels. Note: the list of channels is across the entire account, not
        scoped to an environment.
      operationId: listChannels
      parameters:
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of Channel. Contains a list of entries and page information.
                example:
                  entries:
                    - archived_at: null
                      created_at: "2021-01-01T00:00:00Z"
                      custom_icon_url: null
                      key: my-sendgrid-channel
                      name: My Sendgrid Channel
                      provider: sendgrid
                      type: email
                      updated_at: "2021-01-01T00:00:00Z"
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/Channel"
                    nullable: false
                    type: array
                    x-struct: null
                    x-validate: null
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedChannelResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: List channels
      tags:
        - Channels
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          // Automatically fetches more pages as needed.
          for await (const channel of client.channels.list()) {
            console.log(channel.provider);
          }
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          page = client.channels.list()
          page = page.entries[0]
          print(page.provider)
  /v1/email_layouts/{email_layout_key}:
    get:
      callbacks: {}
      description: Retrieve an email layout by its key, in a given environment.
      operationId: getEmailLayout
      parameters:
        - description: The key of the email layout to show.
          in: path
          name: email_layout_key
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: >-
            Whether to hide uncommitted changes. When true, only committed changes will be returned. When
            false, both committed and uncommitted changes will be returned.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailLayout"
          description: OK
      summary: Get email layout
      tags:
        - Email layouts
      x-stainless-snippets:
        typescript: >-
          import KnockMgmt from '@knocklabs/mgmt';


          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });


          const emailLayout = await client.emailLayouts.retrieve('email_layout_key', { environment:
          'development' });


          console.log(emailLayout.created_at);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          email_layout = client.email_layouts.retrieve(
              email_layout_key="email_layout_key",
              environment="development",
          )
          print(email_layout.created_at)
    put:
      callbacks: {}
      description: |
        Updates an email layout, or creates a new one if it does not yet exist.

        Note: this endpoint only operates in the "development" environment.
      operationId: upsertEmailLayout
      parameters:
        - description: The key of the email layout to upsert.
          in: path
          name: email_layout_key
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: Whether to commit the resource at the same time as modifying it.
          in: query
          name: commit
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: The message to commit the resource with, only used if `commit` is `true`.
          in: query
          name: commit_message
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the EmailLayoutRequest request under the email_layout key.
              example:
                email_layout:
                  footer_links:
                    - text: Example
                      url: http://example.com
                  html_layout: <html><body>Hello, world!</body></html>
                  name: Transactional
                  text_layout: Hello, world!
              properties:
                email_layout:
                  $ref: "#/components/schemas/EmailLayoutRequest"
              required:
                - email_layout
              title: WrappedEmailLayoutRequestRequest
              type: object
              x-struct: null
              x-validate: null
        description: Email layout
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the EmailLayout response under the `email_layout` key.
                example:
                  email_layout:
                    created_at: "2021-01-01T00:00:00Z"
                    environment: development
                    footer_links:
                      - text: Example
                        url: http://example.com
                    html_layout: <html><body>Hello, world!</body></html>
                    key: transactional
                    name: Transactional
                    sha: "1234567890"
                    text_layout: Hello, world!
                    updated_at: "2021-01-01T00:00:00Z"
                properties:
                  email_layout:
                    $ref: "#/components/schemas/EmailLayout"
                required:
                  - email_layout
                title: WrappedEmailLayoutResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Upsert email layout
      tags:
        - Email layouts
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.emailLayouts.upsert('email_layout_key', {
            environment: 'development',
            email_layout: {
              html_layout: '<html><body>Hello, world!</body></html>',
              name: 'Transactional',
              text_layout: 'Hello, world!',
            },
          });

          console.log(response.email_layout);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.email_layouts.upsert(
              email_layout_key="email_layout_key",
              environment="development",
              email_layout={
                  "html_layout": "<html><body>Hello, world!</body></html>",
                  "name": "Transactional",
                  "text_layout": "Hello, world!",
              },
          )
          print(response.email_layout)
  /v1/channel_groups:
    get:
      callbacks: {}
      description: >-
        Returns a paginated list of channel groups. Note: the list of channel groups is across the entire
        account, not scoped to an environment.
      operationId: listChannelGroups
      parameters:
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of ChannelGroup. Contains a list of entries and page information.
                example:
                  entries:
                    - channel_rules:
                        - channel:
                            archived_at: null
                            created_at: "2021-01-01T00:00:00Z"
                            custom_icon_url: null
                            key: my-sendgrid-channel
                            name: My Sendgrid Channel
                            provider: sendgrid
                            type: email
                            updated_at: "2021-01-01T00:00:00Z"
                          created_at: "2021-01-01T00:00:00Z"
                          index: 0
                          rule_type: always
                          updated_at: "2021-01-01T00:00:00Z"
                      channel_type: push
                      created_at: "2021-01-01T00:00:00Z"
                      key: push-group
                      name: Push Notification Group
                      operator: any
                      source: user
                      updated_at: "2021-01-01T00:00:00Z"
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/ChannelGroup"
                    nullable: false
                    type: array
                    x-struct: null
                    x-validate: null
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedChannelGroupResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: List channel groups
      tags:
        - Channel Groups
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          // Automatically fetches more pages as needed.
          for await (const channelGroup of client.channelGroups.list()) {
            console.log(channelGroup.channel_rules);
          }
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          page = client.channel_groups.list()
          page = page.entries[0]
          print(page.channel_rules)
  /v1/workflows:
    get:
      callbacks: {}
      description: >-
        Returns a paginated list of workflows available in a given environment. The workflows are returned
        alphabetically by `key`.
      operationId: listWorkflows
      parameters:
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: >-
            Whether to hide uncommitted changes. When true, only committed changes will be returned. When
            false, both committed and uncommitted changes will be returned.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of Workflow. Contains a list of entries and page information.
                example:
                  entries:
                    - active: false
                      categories:
                        - marketing
                        - black-friday
                      conditions:
                        all:
                          - argument: admin
                            operator: equal_to
                            variable: recipient.role
                      created_at: "2022-12-16T19:07:50.027113Z"
                      description: This is a dummy workflow for demo purposes.
                      environment: development
                      key: december-16-demo
                      name: december-16-demo
                      settings:
                        override_preferences: true
                      sha: f7e9d3b2a1c8e6m4k5j7h9g0i2l3n4p6q8r0t1u3v5w7x9y
                      steps:
                        - channel_key: in-app-feed
                          description: Main in-app feed
                          name: In-app step
                          ref: in_app_feed_1
                          template:
                            action_url: "{{ vars.app_url }}"
                            markdown_body: Hello **{{ recipient.name }}**
                          type: channel
                      trigger_data_json_schema:
                        properties:
                          name:
                            type: string
                        required:
                          - name
                        type: object
                      trigger_frequency: every_trigger
                      updated_at: "2023-02-08T22:15:19.846681Z"
                      valid: true
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/Workflow"
                    nullable: false
                    type: array
                    x-struct: null
                    x-validate: null
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedWorkflowResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: List workflows
      tags:
        - Workflows
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          // Automatically fetches more pages as needed.
          for await (const workflow of client.workflows.list({ environment: 'development' })) {
            console.log(workflow.valid);
          }
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          page = client.workflows.list(
              environment="development",
          )
          page = page.entries[0]
          print(page.valid)
  /v1/translations/{locale_code}/validate:
    put:
      callbacks: {}
      description: |
        Validates a translation payload without persisting it.

        Note: this endpoint only operates on translations in the "development" environment.
      operationId: validateTranslation
      parameters:
        - description: The translation's locale code.
          in: path
          name: locale_code
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the TranslationRequest request under the translation key.
              example:
                translation:
                  content: '{"hello":"Hello, world!"}'
                  format: json
              properties:
                translation:
                  $ref: "#/components/schemas/TranslationRequest"
              required:
                - translation
              title: WrappedTranslationRequestRequest
              type: object
              x-struct: null
              x-validate: null
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Translation response under the `translation` key.
                example:
                  translation:
                    content: '{"hello":"Hello, world!"}'
                    format: json
                    inserted_at: "2021-01-01T00:00:00Z"
                    locale_code: en
                    namespace: my_app
                    updated_at: "2021-01-01T00:00:00Z"
                properties:
                  translation:
                    $ref: "#/components/schemas/Translation"
                required:
                  - translation
                title: WrappedTranslationResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Validate translation
      tags:
        - Translations
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.translations.validate('locale_code', {
            environment: 'development',
            translation: { content: '{"hello":"Hello, world!"}', format: 'json' },
          });

          console.log(response.translation);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.translations.validate(
              locale_code="locale_code",
              environment="development",
              translation={
                  "content": "{\"hello\":\"Hello, world!\"}",
                  "format": "json",
              },
          )
          print(response.translation)
  /v1/whoami:
    get:
      callbacks: {}
      description: Return information about the current service token.
      operationId: getWhoami
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Information about the current service token.
                example:
                  account_name: Acme, Inc.
                  account_slug: acme
                  service_token_name: My Service Token
                properties:
                  account_name:
                    type: string
                    x-struct: null
                    x-validate: null
                  account_slug:
                    type: string
                    x-struct: null
                    x-validate: null
                  service_token_name:
                    type: string
                    x-struct: null
                    x-validate: null
                required:
                  - account_name
                  - account_slug
                  - service_token_name
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Verify scope
      tags:
        - Accounts
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.auth.verify();

          console.log(response.account_name);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.auth.verify()
          print(response.account_name)
  /v1/commits/{id}:
    get:
      callbacks: {}
      description: Retrieve a single commit by its ID.
      operationId: getCommit
      parameters:
        - description: The id of the commit to retrieve.
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Commit"
          description: OK
      summary: Get a commit
      tags:
        - Commits
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const commit = await client.commits.retrieve('182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e');

          console.log(commit.id);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          commit = client.commits.retrieve(
              "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
          )
          print(commit.id)
  /v1/variables:
    get:
      callbacks: {}
      description: Returns a paginated list of variables for a given environment.
      operationId: listVariables
      parameters:
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of Variable. Contains a list of entries and page information.
                example:
                  entries:
                    - description: This is a description of my variable.
                      inserted_at: "2021-01-01T00:00:00Z"
                      key: my_variable
                      type: public
                      updated_at: "2021-01-01T00:00:00Z"
                      value: my_value
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/Variable"
                    nullable: false
                    type: array
                    x-struct: null
                    x-validate: null
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedVariableResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: List variables
      tags:
        - Variables
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          // Automatically fetches more pages as needed.
          for await (const variable of client.variables.list({ environment: 'development' })) {
            console.log(variable.inserted_at);
          }
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          page = client.variables.list(
              environment="development",
          )
          page = page.entries[0]
          print(page.inserted_at)
  /v1/workflows/{workflow_key}/activate:
    put:
      callbacks: {}
      description: >
        Activates (or deactivates) a workflow in a given environment. Read more in the
        [docs](https://docs.knock.app/concepts/workflows#workflow-status).


        Note: This immediately enables or disables a workflow in a given environment without needing to go
        through environment promotion.
      operationId: activateWorkflow
      parameters:
        - description: The key of the workflow.
          in: path
          name: workflow_key
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
      requestBody:
        content:
          application/json:
            schema:
              example:
                status: true
              properties:
                status:
                  description: >-
                    Whether to activate or deactivate the workflow. Set to `true` by default, which will
                    activate the workflow.
                  example: true
                  type: boolean
                  x-struct: null
                  x-validate: null
              required:
                - status
              type: object
              x-struct: null
              x-validate: null
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Workflow response under the `workflow` key.
                example:
                  workflow:
                    active: false
                    categories:
                      - marketing
                      - black-friday
                    conditions:
                      all:
                        - argument: admin
                          operator: equal_to
                          variable: recipient.role
                    created_at: "2022-12-16T19:07:50.027113Z"
                    description: This is a dummy workflow for demo purposes.
                    environment: development
                    key: december-16-demo
                    name: december-16-demo
                    settings:
                      override_preferences: true
                    sha: f7e9d3b2a1c8e6m4k5j7h9g0i2l3n4p6q8r0t1u3v5w7x9y
                    steps:
                      - channel_key: in-app-feed
                        description: Main in-app feed
                        name: In-app step
                        ref: in_app_feed_1
                        template:
                          action_url: "{{ vars.app_url }}"
                          markdown_body: Hello **{{ recipient.name }}**
                        type: channel
                    trigger_data_json_schema:
                      properties:
                        name:
                          type: string
                      required:
                        - name
                      type: object
                    trigger_frequency: every_trigger
                    updated_at: "2023-02-08T22:15:19.846681Z"
                    valid: true
                properties:
                  workflow:
                    $ref: "#/components/schemas/Workflow"
                required:
                  - workflow
                title: WrappedWorkflowResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Activate a workflow
      tags:
        - Workflows
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.workflows.activate('workflow_key', {
            environment: 'development',
            status: true,
          });

          console.log(response.workflow);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.workflows.activate(
              workflow_key="workflow_key",
              environment="development",
              status=True,
          )
          print(response.workflow)
  /v1/partials/{partial_key}/validate:
    put:
      callbacks: {}
      description: |
        Validates a partial payload without persisting it.

        Note: this endpoint only operates on partials in the “development” environment.
      operationId: validatePartial
      parameters:
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: The key of the partial to validate.
          in: path
          name: partial_key
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the PartialRequest request under the partial key.
              example:
                partial:
                  content: <p>Hello, world!</p>
                  name: My Partial
                  type: html
              properties:
                partial:
                  $ref: "#/components/schemas/PartialRequest"
              required:
                - partial
              title: WrappedPartialRequestRequest
              type: object
              x-struct: null
              x-validate: null
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Partial response under the `partial` key.
                example:
                  partial:
                    content: <p>Hello, world!</p>
                    description: This is a test partial
                    environment: development
                    icon_name: icon-name
                    inserted_at: "2021-01-01T00:00:00Z"
                    key: my-partial
                    name: My Partial
                    type: html
                    updated_at: "2021-01-01T00:00:00Z"
                    valid: true
                    visual_block_enabled: true
                properties:
                  partial:
                    $ref: "#/components/schemas/Partial"
                required:
                  - partial
                title: WrappedPartialResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Validate a partial
      tags:
        - Partials
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.partials.validate('partial_key', {
            environment: 'development',
            partial: { content: '<p>Hello, world!</p>', name: 'My Partial', type: 'html' },
          });

          console.log(response.partial);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.partials.validate(
              partial_key="partial_key",
              environment="development",
              partial={
                  "content": "<p>Hello, world!</p>",
                  "name": "My Partial",
                  "type": "html",
              },
          )
          print(response.partial)
  /v1/message_types/{message_type_key}/validate:
    put:
      callbacks: {}
      description: |
        Validates a message type payload without persisting it.

        Note: this endpoint only operates on message types in the `development` environment.
      operationId: validateMessageType
      parameters:
        - description: The key of the message type to validate.
          in: path
          name: message_type_key
          required: true
          schema:
            example: email
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the MessageTypeRequest request under the message_type key.
              example:
                message_type:
                  description: This is a message type
                  name: My Message Type
                  preview: <div>Hello, world!</div>
                  variants:
                    - fields:
                        - key: text_field
                          label: My text field
                          settings:
                            description: A description of the text field
                            max_length: 100
                            min_length: 10
                            required: true
                          type: text
                      key: default
                      name: Default
              properties:
                message_type:
                  $ref: "#/components/schemas/MessageTypeRequest"
              required:
                - message_type
              title: WrappedMessageTypeRequestRequest
              type: object
              x-struct: null
              x-validate: null
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the MessageType response under the `message_type` key.
                example:
                  message_type:
                    archived_at: null
                    created_at: "2021-01-01T00:00:00Z"
                    deleted_at: null
                    description: Email message type
                    environment: development
                    icon_name: email
                    key: email
                    name: Email
                    owner: user
                    preview: <div>Hello, world!</div>
                    semver: 1.0.0
                    sha: "1234567890"
                    updated_at: "2021-01-01T00:00:00Z"
                    valid: true
                    variants:
                      - fields:
                          - key: text_field
                            label: My text field
                            settings:
                              description: A description of the text field
                              max_length: 100
                              min_length: 10
                              required: true
                            type: text
                        key: default
                        name: Default
                properties:
                  message_type:
                    $ref: "#/components/schemas/MessageType"
                required:
                  - message_type
                title: WrappedMessageTypeResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Validate message type
      tags:
        - Message types
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.messageTypes.validate('email', {
            environment: 'development',
            message_type: {
              description: 'This is a message type',
              name: 'My Message Type',
              preview: '<div>Hello, world!</div>',
            },
          });

          console.log(response.message_type);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.message_types.validate(
              message_type_key="email",
              environment="development",
              message_type={
                  "description": "This is a message type",
                  "name": "My Message Type",
                  "preview": "<div>Hello, world!</div>",
              },
          )
          print(response.message_type)
  /v1/translations/{locale_code}:
    get:
      callbacks: {}
      description: Retrieve a translation by its locale and namespace, in a given environment.
      operationId: getTranslation
      parameters:
        - description: A specific locale code to filter translations for.
          in: path
          name: locale_code
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: Optionally specify the returned content format. Supports 'json' and 'po'. Defaults to 'json'.
          in: query
          name: format
          required: false
          schema:
            enum:
              - json
              - po
            type: string
            x-struct: null
            x-validate: null
        - description: A specific namespace to filter translations for.
          in: query
          name: namespace
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: >-
            Whether to hide uncommitted changes. When true, only committed changes will be returned. When
            false, both committed and uncommitted changes will be returned.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Translation response under the `translation` key.
                example:
                  translation:
                    content: '{"hello":"Hello, world!"}'
                    format: json
                    inserted_at: "2021-01-01T00:00:00Z"
                    locale_code: en
                    namespace: my_app
                    updated_at: "2021-01-01T00:00:00Z"
                properties:
                  translation:
                    $ref: "#/components/schemas/Translation"
                required:
                  - translation
                title: WrappedTranslationResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Get translation
      tags:
        - Translations
      x-stainless-snippets:
        typescript: >-
          import KnockMgmt from '@knocklabs/mgmt';


          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });


          const translation = await client.translations.retrieve('locale_code', { environment: 'development'
          });


          console.log(translation.translation);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          translation = client.translations.retrieve(
              locale_code="locale_code",
              environment="development",
          )
          print(translation.translation)
    put:
      callbacks: {}
      description: >
        Updates a translation of a given locale code + namespace, or creates a new one if it does not yet
        exist.


        Note: this endpoint only operates on translations in the "development" environment.
      operationId: upsertTranslation
      parameters:
        - description: A locale code of the translation.
          in: path
          name: locale_code
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: An optional namespace that identifies the translation.
          in: query
          name: namespace
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: Optionally specify the returned content format. Supports 'json' and 'po'. Defaults to 'json'.
          in: query
          name: format
          required: false
          schema:
            enum:
              - json
              - po
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: Whether to commit the resource at the same time as modifying it.
          in: query
          name: commit
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: The message to commit the resource with, only used if `commit` is `true`.
          in: query
          name: commit_message
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the TranslationRequest request under the translation key.
              example:
                translation:
                  content: '{"hello":"Hello, world!"}'
                  format: json
              properties:
                translation:
                  $ref: "#/components/schemas/TranslationRequest"
              required:
                - translation
              title: WrappedTranslationRequestRequest
              type: object
              x-struct: null
              x-validate: null
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Translation response under the `translation` key.
                example:
                  translation:
                    content: '{"hello":"Hello, world!"}'
                    format: json
                    inserted_at: "2021-01-01T00:00:00Z"
                    locale_code: en
                    namespace: my_app
                    updated_at: "2021-01-01T00:00:00Z"
                properties:
                  translation:
                    $ref: "#/components/schemas/Translation"
                required:
                  - translation
                title: WrappedTranslationResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Upsert translation
      tags:
        - Translations
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.translations.upsert('locale_code', {
            environment: 'development',
            namespace: 'namespace',
            translation: { content: '{"hello":"Hello, world!"}', format: 'json' },
          });

          console.log(response.translation);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.translations.upsert(
              locale_code="locale_code",
              environment="development",
              namespace="namespace",
              translation={
                  "content": "{\"hello\":\"Hello, world!\"}",
                  "format": "json",
              },
          )
          print(response.translation)
  /v1/environments:
    get:
      callbacks: {}
      description: >-
        Returns a paginated list of environments. The environments will be returned in order of their index,
        with the `development` environment first.
      operationId: listEnvironments
      parameters:
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of Environment. Contains a list of entries and page information.
                example:
                  entries:
                    - created_at: "2022-10-31T19:59:03Z"
                      deleted_at: null
                      hide_pii_data: false
                      label_color: "#000000"
                      last_commit_at: "2022-10-31T19:59:03Z"
                      name: Development
                      order: 0
                      owner: system
                      slug: development
                      updated_at: "2022-10-31T19:59:03Z"
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/Environment"
                    nullable: false
                    type: array
                    x-struct: null
                    x-validate: null
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedEnvironmentResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: List environments
      tags:
        - Environments
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          // Automatically fetches more pages as needed.
          for await (const environment of client.environments.list()) {
            console.log(environment.hide_pii_data);
          }
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          page = client.environments.list()
          page = page.entries[0]
          print(page.hide_pii_data)
  /v1/email_layouts/{email_layout_key}/validate:
    put:
      callbacks: {}
      description: |
        Validates an email layout payload without persisting it.

        Note: this endpoint only operates in the "development" environment.
      operationId: validateEmailLayout
      parameters:
        - description: The key of the email layout to validate.
          in: path
          name: email_layout_key
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the EmailLayoutRequest request under the email_layout key.
              example:
                email_layout:
                  footer_links:
                    - text: Example
                      url: http://example.com
                  html_layout: <html><body>Hello, world!</body></html>
                  name: Transactional
                  text_layout: Hello, world!
              properties:
                email_layout:
                  $ref: "#/components/schemas/EmailLayoutRequest"
              required:
                - email_layout
              title: WrappedEmailLayoutRequestRequest
              type: object
              x-struct: null
              x-validate: null
        description: Email layout
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the EmailLayout response under the `email_layout` key.
                example:
                  email_layout:
                    created_at: "2021-01-01T00:00:00Z"
                    environment: development
                    footer_links:
                      - text: Example
                        url: http://example.com
                    html_layout: <html><body>Hello, world!</body></html>
                    key: transactional
                    name: Transactional
                    sha: "1234567890"
                    text_layout: Hello, world!
                    updated_at: "2021-01-01T00:00:00Z"
                properties:
                  email_layout:
                    $ref: "#/components/schemas/EmailLayout"
                required:
                  - email_layout
                title: WrappedEmailLayoutResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Validate email layout
      tags:
        - Email layouts
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.emailLayouts.validate('email_layout_key', {
            environment: 'development',
            email_layout: {
              html_layout: '<html><body>Hello, world!</body></html>',
              name: 'Transactional',
              text_layout: 'Hello, world!',
            },
          });

          console.log(response.email_layout);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.email_layouts.validate(
              email_layout_key="email_layout_key",
              environment="development",
              email_layout={
                  "html_layout": "<html><body>Hello, world!</body></html>",
                  "name": "Transactional",
                  "text_layout": "Hello, world!",
              },
          )
          print(response.email_layout)
  /v1/commits/{id}/promote:
    put:
      callbacks: {}
      description: Promotes one change to the subsequent environment.
      operationId: promoteOneCommit
      parameters:
        - description: The target commit ID to promote to the subsequent environment.
          in: path
          name: id
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Commit response under the `commit` key.
                example:
                  commit:
                    commit_author:
                      email: john.doe@example.com
                      name: John Doe
                    commit_message: This is a commit message
                    created_at: "2021-01-01T00:00:00Z"
                    environment: development
                    id: 123e4567-e89b-12d3-a456-426614174000
                    resource:
                      identifier: my-email-layout
                      type: email_layout
                    updated_at: "2021-01-01T00:00:00Z"
                properties:
                  commit:
                    $ref: "#/components/schemas/Commit"
                required:
                  - commit
                title: WrappedCommitResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Promote one commit
      tags:
        - Commits
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.commits.promoteOne('id');

          console.log(response.commit);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.commits.promote_one(
              "id",
          )
          print(response.commit)
  /v1/guides/{guide_key}/validate:
    put:
      callbacks: {}
      description: |
        Validates a guide payload without persisting it.

        Note: Validating a guide is only done in the development environment context.
      operationId: validateGuide
      parameters:
        - description: The key of the guide.
          in: path
          name: guide_key
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the GuideRequest request under the guide key.
              example:
                guide:
                  activation_location_rules:
                    - directive: allow
                      pathname: /dashboard/*
                  channel_key: in-app-guide
                  description: A guide to help users get started with the application
                  name: Getting Started Guide
                  steps:
                    - name: Welcome to the App
                      ref: welcome-step
                      schema_key: tooltip
                      schema_semver: 1.0.0
                      schema_variant_key: default
                      values:
                        text_field: value
                  target_audience_id: null
                  target_property_conditions:
                    all:
                      - argument: some_property
                        operator: equal_to
                        variable: recipient.property
              properties:
                guide:
                  $ref: "#/components/schemas/GuideRequest"
              required:
                - guide
              title: WrappedGuideRequestRequest
              type: object
              x-struct: null
              x-validate: null
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Guide response under the `guide` key.
                example:
                  guide:
                    activation_location_rules:
                      - directive: allow
                        pathname: /dashboard/*
                    active: true
                    archived_at: null
                    channel_key: in-app-guide
                    created_at: "2024-01-01T00:00:00Z"
                    description: A guide to help users get started with the application
                    environment: development
                    key: getting-started
                    name: Getting Started Guide
                    semver: 0.0.1
                    sha: "1234567890"
                    steps:
                      - name: Welcome to the App
                        ref: welcome-step
                        schema_key: tooltip
                        schema_semver: 1.0.0
                        schema_variant_key: default
                        values:
                          text_field: value
                    target_audience_id: null
                    target_property_conditions:
                      all:
                        - argument: some_property
                          operator: equal_to
                          variable: recipient.property
                    type: banner
                    updated_at: "2024-01-01T00:00:00Z"
                    valid: true
                properties:
                  guide:
                    $ref: "#/components/schemas/Guide"
                required:
                  - guide
                title: WrappedGuideResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Validate a guide
      tags:
        - Guides
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.guides.validate('guide_key', {
            environment: 'development',
            guide: {
              channel_key: 'in-app-guide',
              name: 'Getting Started Guide',
              steps: [
                { ref: 'welcome-step', schema_key: 'tooltip', schema_semver: '1.0.0', schema_variant_key: 'default' },
              ],
            },
          });

          console.log(response.guide);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.guides.validate(
              guide_key="guide_key",
              environment="development",
              guide={
                  "channel_key": "in-app-guide",
                  "name": "Getting Started Guide",
                  "steps": [{
                      "ref": "welcome-step",
                      "schema_key": "tooltip",
                      "schema_semver": "1.0.0",
                      "schema_variant_key": "default",
                  }],
              },
          )
          print(response.guide)
  /v1/message_types/{message_type_key}:
    get:
      callbacks: {}
      description: Retrieve a message type by its key, in a given environment.
      operationId: getMessageType
      parameters:
        - description: The key of the message type to retrieve.
          in: path
          name: message_type_key
          required: true
          schema:
            example: email
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: >-
            Whether to hide uncommitted changes. When true, only committed changes will be returned. When
            false, both committed and uncommitted changes will be returned.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageType"
          description: OK
      summary: Get message type
      tags:
        - Message types
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const messageType = await client.messageTypes.retrieve('email', { environment: 'development' });

          console.log(messageType.valid);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          message_type = client.message_types.retrieve(
              message_type_key="email",
              environment="development",
          )
          print(message_type.valid)
    put:
      callbacks: {}
      description: |
        Updates a message type, or creates a new one if it does not yet exist.

        Note: this endpoint only operates in the `development` environment.
      operationId: upsertMessageType
      parameters:
        - description: The key of the message type to upsert.
          in: path
          name: message_type_key
          required: true
          schema:
            example: email
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: Whether to commit the resource at the same time as modifying it.
          in: query
          name: commit
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: The message to commit the resource with, only used if `commit` is `true`.
          in: query
          name: commit_message
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the MessageTypeRequest request under the message_type key.
              example:
                message_type:
                  description: This is a message type
                  name: My Message Type
                  preview: <div>Hello, world!</div>
                  variants:
                    - fields:
                        - key: text_field
                          label: My text field
                          settings:
                            description: A description of the text field
                            max_length: 100
                            min_length: 10
                            required: true
                          type: text
                      key: default
                      name: Default
              properties:
                message_type:
                  $ref: "#/components/schemas/MessageTypeRequest"
              required:
                - message_type
              title: WrappedMessageTypeRequestRequest
              type: object
              x-struct: null
              x-validate: null
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the MessageType response under the `message_type` key.
                example:
                  message_type:
                    archived_at: null
                    created_at: "2021-01-01T00:00:00Z"
                    deleted_at: null
                    description: Email message type
                    environment: development
                    icon_name: email
                    key: email
                    name: Email
                    owner: user
                    preview: <div>Hello, world!</div>
                    semver: 1.0.0
                    sha: "1234567890"
                    updated_at: "2021-01-01T00:00:00Z"
                    valid: true
                    variants:
                      - fields:
                          - key: text_field
                            label: My text field
                            settings:
                              description: A description of the text field
                              max_length: 100
                              min_length: 10
                              required: true
                            type: text
                        key: default
                        name: Default
                properties:
                  message_type:
                    $ref: "#/components/schemas/MessageType"
                required:
                  - message_type
                title: WrappedMessageTypeResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Upsert message type
      tags:
        - Message types
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.messageTypes.upsert('email', {
            environment: 'development',
            message_type: {
              description: 'This is a message type',
              name: 'My Message Type',
              preview: '<div>Hello, world!</div>',
            },
          });

          console.log(response.message_type);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.message_types.upsert(
              message_type_key="email",
              environment="development",
              message_type={
                  "description": "This is a message type",
                  "name": "My Message Type",
                  "preview": "<div>Hello, world!</div>",
              },
          )
          print(response.message_type)
  /v1/workflows/{workflow_key}:
    get:
      callbacks: {}
      description: Retrieve a workflow by its key in a given environment.
      operationId: getWorkflow
      parameters:
        - description: The key of the workflow to retrieve.
          in: path
          name: workflow_key
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: >-
            Whether to hide uncommitted changes. When true, only committed changes will be returned. When
            false, both committed and uncommitted changes will be returned.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
          description: OK
      summary: Get a workflow
      tags:
        - Workflows
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const workflow = await client.workflows.retrieve('workflow_key', { environment: 'development' });

          console.log(workflow.valid);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          workflow = client.workflows.retrieve(
              workflow_key="workflow_key",
              environment="development",
          )
          print(workflow.valid)
    put:
      callbacks: {}
      description: |
        Updates a workflow of a given key, or creates a new one if it does not yet exist.

        Note: this endpoint only operates on workflows in the `development` environment.
      operationId: upsertWorkflow
      parameters:
        - description: The key of the workflow.
          in: path
          name: workflow_key
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: Whether to commit the resource at the same time as modifying it.
          in: query
          name: commit
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: The message to commit the resource with, only used if `commit` is `true`.
          in: query
          name: commit_message
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
      requestBody:
        content:
          application/json:
            schema:
              description: Wraps the WorkflowRequest request under the workflow key.
              example:
                workflow:
                  name: My Workflow
                  steps:
                    - channel_key: in-app-feed
                      name: Channel 1
                      ref: channel_1
                      template:
                        action_url: "{{ vars.app_url }}"
                        markdown_body: Hello **{{ recipient.name }}**
                      type: channel
              properties:
                workflow:
                  $ref: "#/components/schemas/WorkflowRequest"
              required:
                - workflow
              title: WrappedWorkflowRequestRequest
              type: object
              x-struct: null
              x-validate: null
        description: Params
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Wraps the Workflow response under the `workflow` key.
                example:
                  workflow:
                    active: false
                    categories:
                      - marketing
                      - black-friday
                    conditions:
                      all:
                        - argument: admin
                          operator: equal_to
                          variable: recipient.role
                    created_at: "2022-12-16T19:07:50.027113Z"
                    description: This is a dummy workflow for demo purposes.
                    environment: development
                    key: december-16-demo
                    name: december-16-demo
                    settings:
                      override_preferences: true
                    sha: f7e9d3b2a1c8e6m4k5j7h9g0i2l3n4p6q8r0t1u3v5w7x9y
                    steps:
                      - channel_key: in-app-feed
                        description: Main in-app feed
                        name: In-app step
                        ref: in_app_feed_1
                        template:
                          action_url: "{{ vars.app_url }}"
                          markdown_body: Hello **{{ recipient.name }}**
                        type: channel
                    trigger_data_json_schema:
                      properties:
                        name:
                          type: string
                      required:
                        - name
                      type: object
                    trigger_frequency: every_trigger
                    updated_at: "2023-02-08T22:15:19.846681Z"
                    valid: true
                properties:
                  workflow:
                    $ref: "#/components/schemas/Workflow"
                required:
                  - workflow
                title: WrappedWorkflowResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Upsert a workflow
      tags:
        - Workflows
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.workflows.upsert('workflow_key', {
            environment: 'development',
            workflow: {
              name: 'My Workflow',
              steps: [
                {
                  name: 'Channel 1',
                  ref: 'channel_1',
                  template: { markdown_body: 'Hello **{{ recipient.name }}**' },
                  type: 'channel',
                },
              ],
            },
          });

          console.log(response.workflow);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.workflows.upsert(
              workflow_key="workflow_key",
              environment="development",
              workflow={
                  "name": "My Workflow",
                  "steps": [{
                      "name": "Channel 1",
                      "ref": "channel_1",
                      "template": {
                          "markdown_body": "Hello **{{ recipient.name }}**"
                      },
                      "type": "channel",
                  }],
              },
          )
          print(response.workflow)
  /v1/commits/promote:
    put:
      callbacks: {}
      description: Promote all changes across all resources to the target environment from its preceding environment.
      operationId: promoteAllCommits
      parameters:
        - description: >
            A slug of the target environment to which you want to promote all changes from its directly
            preceding environment.


            For example, if you have three environments “development”, “staging”, and “production” (in that
            order), setting this param to “production” will promote all commits not currently in production
            from staging.


            Note: This must be a non-development environment.
          in: query
          name: to_environment
          required: true
          schema:
            type: string
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The response from promoting all changes.
                example:
                  result: success
                properties:
                  result:
                    description: The result of the promote operation.
                    example: success
                    type: string
                    x-struct: null
                    x-validate: null
                required:
                  - result
                title: PromoteAllResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Promote all changes
      tags:
        - Commits
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.commits.promoteAll({ to_environment: 'to_environment' });

          console.log(response.result);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.commits.promote_all(
              to_environment="to_environment",
          )
          print(response.result)
  /v1/commits:
    get:
      callbacks: {}
      description: >-
        Returns a paginated list of commits in a given environment. The commits are ordered from most recent
        first.
      operationId: listCommits
      parameters:
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: >-
            Whether to show commits in the given environment that have not been promoted to the subsequent
            environment (false) or commits which have been promoted (true).
          in: query
          name: promoted
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of Commit. Contains a list of entries and page information.
                example:
                  entries:
                    - commit_author:
                        email: john.doe@example.com
                        name: John Doe
                      commit_message: This is a commit message
                      created_at: "2021-01-01T00:00:00Z"
                      environment: development
                      id: 123e4567-e89b-12d3-a456-426614174000
                      resource:
                        identifier: my-email-layout
                        type: email_layout
                      updated_at: "2021-01-01T00:00:00Z"
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/Commit"
                    nullable: false
                    type: array
                    x-struct: null
                    x-validate: null
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedCommitResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: List commits
      tags:
        - Commits
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          // Automatically fetches more pages as needed.
          for await (const commit of client.commits.list({ environment: 'development' })) {
            console.log(commit.id);
          }
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          page = client.commits.list(
              environment="development",
          )
          page = page.entries[0]
          print(page.id)
    put:
      callbacks: {}
      description: Commit all changes across all resources in the development environment.
      operationId: commitAllChanges
      parameters:
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: An optional message to include in a commit.
          in: query
          name: commit_message
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The response from committing all changes.
                example:
                  result: success
                properties:
                  result:
                    description: The result of the commit operation.
                    example: success
                    type: string
                    x-struct: null
                    x-validate: null
                required:
                  - result
                title: CommitAllResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Commit all changes
      tags:
        - Commits
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.commits.commitAll({ environment: 'development' });

          console.log(response.result);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.commits.commit_all(
              environment="development",
          )
          print(response.result)
  /v1/api_keys/exchange:
    post:
      callbacks: {}
      description: >-
        Given an authenticated service token and an environment, will exchange the service token for a secret
        API key that can be used to make requests to the public API.
      operationId: exchangeForApiKey
      parameters:
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Returns an API key that can be used to make requests to the public API.
                example:
                  api_key: sk_1234567890
                properties:
                  api_key:
                    description: The secret API key exchanged from the service token.
                    type: string
                    x-struct: null
                    x-validate: null
                required:
                  - api_key
                title: ExchangeForApiKeyResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: Exchange for API key
      tags:
        - API keys
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          const response = await client.apiKeys.exchange({ environment: 'development' });

          console.log(response.api_key);
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          response = client.api_keys.exchange(
              environment="development",
          )
          print(response.api_key)
  /v1/message_types:
    get:
      callbacks: {}
      description: Returns a paginated list of message types available in a given environment.
      operationId: listMessageTypes
      parameters:
        - description: The environment slug.
          in: query
          name: environment
          required: true
          schema:
            example: development
            type: string
            x-struct: null
            x-validate: null
        - description: Whether to annotate the resource. Only used in the Knock CLI.
          in: query
          name: annotate
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: >-
            Whether to hide uncommitted changes. When true, only committed changes will be returned. When
            false, both committed and uncommitted changes will be returned.
          in: query
          name: hide_uncommitted_changes
          required: false
          schema:
            type: boolean
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries after.
          in: query
          name: after
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The cursor to fetch entries before.
          in: query
          name: before
          required: false
          schema:
            type: string
            x-struct: null
            x-validate: null
        - description: The number of entries to fetch per-page.
          in: query
          name: limit
          required: false
          schema:
            type: integer
            x-struct: null
            x-validate: null
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A paginated list of MessageType. Contains a list of entries and page information.
                example:
                  entries:
                    - archived_at: null
                      created_at: "2021-01-01T00:00:00Z"
                      deleted_at: null
                      description: Email message type
                      environment: development
                      icon_name: email
                      key: email
                      name: Email
                      owner: user
                      preview: <div>Hello, world!</div>
                      semver: 1.0.0
                      sha: "1234567890"
                      updated_at: "2021-01-01T00:00:00Z"
                      valid: true
                      variants:
                        - fields:
                            - key: text_field
                              label: My text field
                              settings:
                                description: A description of the text field
                                max_length: 100
                                min_length: 10
                                required: true
                              type: text
                          key: default
                          name: Default
                  page_info:
                    after: null
                    before: null
                    page_size: 25
                properties:
                  entries:
                    description: A list of entries.
                    items:
                      $ref: "#/components/schemas/MessageType"
                    nullable: false
                    type: array
                    x-struct: null
                    x-validate: null
                  page_info:
                    $ref: "#/components/schemas/PageInfo"
                required:
                  - entries
                  - page_info
                title: PaginatedMessageTypeResponse
                type: object
                x-struct: null
                x-validate: null
          description: OK
      summary: List message types
      tags:
        - Message types
      x-stainless-snippets:
        typescript: |-
          import KnockMgmt from '@knocklabs/mgmt';

          const client = new KnockMgmt({
            serviceToken: process.env['KNOCK_SERVICE_TOKEN'], // This is the default and can be omitted
          });

          // Automatically fetches more pages as needed.
          for await (const messageType of client.messageTypes.list({ environment: 'development' })) {
            console.log(messageType.valid);
          }
        python: |-
          import os
          from knock_mapi import KnockMgmt

          client = KnockMgmt(
              service_token=os.environ.get("KNOCK_SERVICE_TOKEN"),  # This is the default and can be omitted
          )
          page = client.message_types.list(
              environment="development",
          )
          page = page.entries[0]
          print(page.valid)
security:
  - BearerAuth: []
servers:
  - url: https://control.knock.app
    variables: {}
tags:
  - description: Resources for managing your Knock account.
    name: Accounts
  - description: Workflows let you express your cross-channel notification logic.
    name: Workflows
  - description: Partials allow you to reuse content across templates.
    name: Partials
  - description: Commits are versioned changes to resources.
    name: Commits
  - description: Environments are isolated instances of your account that map to your infrastructure.
    name: Environments
  - description: Translations are per-locale string files that can be used in your templates.
    name: Translations
  - description: Email layouts wrap your email templates and provide a consistent look and feel.
    name: Email layouts
  - description: >-
      A message type allows you to specify an in-app schema that defines the fields available for your in-app
      notifications.
    name: Message types
  - description: >-
      Guides let you define in-app guides that can be displayed to users based on priority and other
      conditions.
    name: Guides
